'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get3 = require('babel-runtime/helpers/get');

var _get4 = _interopRequireDefault(_get3);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _nodeStyle = require('./node-style');

var _nodeStyle2 = _interopRequireDefault(_nodeStyle);

var _Node = require('../motor/Node');

var _Node2 = _interopRequireDefault(_Node);

var _Transformable = require('../motor/Transformable');

var _Transformable2 = _interopRequireDefault(_Transformable);

var _Sizeable = require('../motor/Sizeable');

var _Sizeable2 = _interopRequireDefault(_Sizeable);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

require('document-register-element');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _base.initMotorHTMLBase)();

var MotorHTMLNode = function (_MotorHTMLBase) {
    (0, _inherits3.default)(MotorHTMLNode, _MotorHTMLBase);

    function MotorHTMLNode() {
        (0, _classCallCheck3.default)(this, MotorHTMLNode);
        return (0, _possibleConstructorReturn3.default)(this, (MotorHTMLNode.__proto__ || (0, _getPrototypeOf2.default)(MotorHTMLNode)).apply(this, arguments));
    }

    (0, _createClass3.default)(MotorHTMLNode, [{
        key: 'getStyles',
        value: function getStyles() {
            return _nodeStyle2.default;
        }

        // this is called by DeclarativeBase#init, which is called by
        // WebComponent#connectedCallback, at which point this element has a
        // parentNode.
        // @override

    }, {
        key: '_makeImperativeCounterpart',
        value: function _makeImperativeCounterpart() {
            return new _Node2.default({
                _motorHtmlCounterpart: this
            });
        }
    }, {
        key: 'attributeChangedCallback',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
                var _get2;

                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                (_get2 = (0, _get4.default)(MotorHTMLNode.prototype.__proto__ || (0, _getPrototypeOf2.default)(MotorHTMLNode.prototype), 'attributeChangedCallback', this)).call.apply(_get2, [this].concat(args));
                                _context.next = 3;
                                return this._imperativeCounterpartPromise;

                            case 3:
                                this._updateNodeProperty.apply(this, args);

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function attributeChangedCallback() {
                return _ref.apply(this, arguments);
            }

            return attributeChangedCallback;
        }()
    }, {
        key: '_updateNodeProperty',
        value: function _updateNodeProperty(attribute, oldValue, newValue) {
            // attributes on our HTML elements are the same name as those on
            // the Node class (the setters).
            if (newValue !== oldValue) {
                if (attribute.match(/opacity/i)) this.imperativeCounterpart[attribute] = window.parseFloat(newValue);else if (attribute.match(/sizeMode/i)) this.imperativeCounterpart[attribute] = parseStringArray(newValue);else if (attribute.match(/rotation/i) || attribute.match(/scale/i) || attribute.match(/position/i) || attribute.match(/absoluteSize/i) || attribute.match(/proportionalSize/i) || attribute.match(/align/i) || attribute.match(/mountPoint/i) || attribute.match(/origin/i) || attribute.match(/skew/i)) {
                    this.imperativeCounterpart[attribute] = parseNumberArray(newValue);
                } else {
                    /* nothing, ignore other attributes */
                }
            }
        }
    }]);
    return MotorHTMLNode;
}(_base2.default);

// This associates the Transformable getters/setters with the HTML-API classes,
// so that the same getters/setters can be called from HTML side of the API.


(0, _base.proxyGettersSetters)(_Transformable2.default, MotorHTMLNode);
(0, _base.proxyGettersSetters)(_Sizeable2.default, MotorHTMLNode);

function parseNumberArray(str) {
    checkIsNumberArrayString(str);
    var numbers = str.trim().split(/(?:\s*,\s*)|(?:\s+)/g);
    var length = numbers.length;
    if (length > 0) numbers[0] = window.parseFloat(numbers[0]);
    if (length > 1) numbers[1] = window.parseFloat(numbers[1]);
    if (length > 2) numbers[2] = window.parseFloat(numbers[2]);
    return numbers;
}

function parseStringArray(str) {
    checkIsSizeArrayString(str);
    var strings = str.trim().toLowerCase().split(/(?:\s*,\s*)|(?:\s+)/g);
    var length = strings.length;
    if (length > 0) strings[0] = window.parseFloat(strings[0]);
    if (length > 1) strings[1] = window.parseFloat(strings[1]);
    if (length > 2) strings[2] = window.parseFloat(strings[2]);
    return strings;
}

function checkIsNumberArrayString(str) {
    if (!str.match(/^\s*(((\s*(-|\+)?((\.\d+)|(\d+\.\d+)|(\d+))\s*,){0,2}(\s*(-|\+)?((\.\d+)|(\d+\.\d+)|(\d+))))|((\s*(-|\+)?((\.\d+)|(\d+\.\d+)|(\d+))\s){0,2}(\s*(-|\+)?((\.\d+)|(\d+\.\d+)|(\d+)))))\s*$/g)) throw new Error('Attribute must be a comma- or space-separated sequence of up to three numbers, for example "1 2.5 3". Yours was "' + str + '".');
}

function checkIsSizeArrayString(str) {
    if (!str.match(/^\s*(((\s*([a-zA-Z]+)\s*,){0,2}(\s*([a-zA-Z]+)))|((\s*([a-zA-Z]+)\s*){1,3}))\s*$/g)) throw new Error('Attribute must be a comma- or space-separated sequence of up to three strings, for example "absolute absolute". Yours was "' + str + '".');
}

exports.default = MotorHTMLNode = document.registerElement('motor-node', MotorHTMLNode);

exports.default = MotorHTMLNode;
module.exports = exports['default'];
//# sourceMappingURL=node.js.map