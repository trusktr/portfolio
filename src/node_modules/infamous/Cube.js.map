{"version":3,"sources":["src/Cube.js"],"names":["Cube","cubeWidth","size","register","mouse","touch","cubeSideNodes","cubeSides","_createCubeSide","bind","index","T","sideMol","side","properties","background","backfaceVisibility","sync","push","pipe","options","handler","modifier","transformFrom","multiply","rotate","Math","PI","translate","add","children"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;AAEA;;;;;;;;IAQaA,I,WAAAA,I;;;AAET;;;;;;AAMA,kBAAYC,SAAZ,EAAuB;AAAA;;AAAA,sIACb,EAACC,MAAMD,SAAP,EADa;;AAGnB,8BAAYE,QAAZ,CAAqB;AACjBC,sCADiB;AAEjBC;AAFiB,SAArB;;AAKA,cAAKJ,SAAL,GAAiBA,SAAjB;;AAEA,cAAKK,aAAL,GAAqB,EAArB;AACA,cAAKC,SAAL,GAAiB,EAAjB;;AAEA;AACA,iCAAU,CAAV,EAAa,MAAKC,eAAL,CAAqBC,IAArB,OAAb;AAdmB;AAetB;;AAED;;;;;;;;;;;;;wCASgBC,K,EAAO;AACnB,gBAAMC,uBAAN;AACA,gBAAMC,UAAU,wBAAhB;AACA,gBAAMC,OAAO,oBAAU;AACnBX,sBAAM,CAAC,KAAKD,SAAN,EAAgB,KAAKA,SAArB,CADa;AAEnBa,4BAAY;AACRC,gCAAY,MADJ;AAERC,wCAAoB;AAFZ;AAFO,aAAV,CAAb;AAOA,gBAAMC,OAAO,0BAAgB,CAAC,OAAD,EAAS,OAAT,CAAhB,CAAb;;AAEA,iBAAKV,SAAL,CAAeW,IAAf,CAAoBL,IAApB;;AAEAA,iBAAKM,IAAL,CAAUF,IAAV;AACAA,iBAAKE,IAAL,CAAU,KAAKC,OAAL,CAAaC,OAAvB;;AAEA;AACA,gBAAIX,QAAQ,CAAZ,EAAe;AAAE;AACbE,wBAAQU,QAAR,CAAiBC,aAAjB,CAAgCZ,EAAEa,QAAF,CAAWb,EAAEc,MAAF,CAAS,CAAT,EAAaC,KAAKC,EAAL,GAAQ,CAAT,GAAYjB,KAAxB,EAA+B,CAA/B,CAAX,EAA8CC,EAAEiB,SAAF,CAAY,CAAZ,EAAc,CAAd,EAAgB,KAAK3B,SAAL,GAAe,CAA/B,CAA9C,CAAhC;AACH,aAFD,MAGK;AAAE;AACHW,wBAAQU,QAAR,CAAiBC,aAAjB,CAAgCZ,EAAEa,QAAF,CAAWb,EAAEc,MAAF,CAAWC,KAAKC,EAAL,GAAQ,CAAT,IAAajB,QAAM,CAAN,GAAQ,CAAC,CAAT,GAAW,CAAxB,CAAV,EAAsC,CAAtC,EAAyC,CAAzC,CAAX,EAAwDC,EAAEiB,SAAF,CAAY,CAAZ,EAAc,CAAd,EAAgB,KAAK3B,SAAL,GAAe,CAA/B,CAAxD,CAAhC;AACH;;AAED,iBAAKK,aAAL,CAAmBY,IAAnB,CACI,KAAKW,GAAL,CAASjB,OAAT,CADJ;AAGAA,oBAAQiB,GAAR,CAAYhB,IAAZ;AACH;;AAED;;;;;;;;;;oCAOYiB,Q,EAAU;AAClB,qCAAU,CAAV,EAAa,UAASpB,KAAT,EAAgB;AACzB;AACA,qBAAKJ,aAAL,CAAmBI,KAAnB,EAA0BmB,GAA1B,CAA8BC,SAASpB,KAAT,CAA9B;AACH,aAHY,CAGXD,IAHW,CAGN,IAHM,CAAb;AAIA,mBAAO,IAAP;AACH;;;uBAzGL;;;;;;;;;kBA2GeT,I","file":"Cube.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Transform from 'famous/src/core/Transform';\nimport MouseSync from 'famous/src/inputs/MouseSync';\nimport TouchSync from 'famous/src/inputs/TouchSync';\nimport GenericSync from 'famous/src/inputs/GenericSync';\n\nimport Molecule from './Molecule';\nimport Plane from './Plane';\n\nimport forLength from 'army-knife/forLength';\n\n/**\n * A scenegraph tree that lays things out in a cube form. The leaf nodes of the\n * scenegraph (the cube sides) are Molecules. Add anything to the leaf nodes\n * that a [famous/src/core/RenderNode](#famous/src/core/RenderNode) would normally accept.\n *\n * @class Cube\n * @extends Molecule\n */\nexport class Cube extends Molecule {\n\n    /**\n     * Create a new Cube.\n     *\n     * @constructor\n     * @param {Number} cubeWidth The integer width of the cube.\n     */\n    constructor(cubeWidth) {\n        super({size: cubeWidth});\n\n        GenericSync.register({\n            mouse: MouseSync,\n            touch: TouchSync\n        });\n\n        this.cubeWidth = cubeWidth;\n\n        this.cubeSideNodes = [];\n        this.cubeSides = [];\n\n        // TODO: v0.1.0: Put this in a function.\n        forLength(6, this._createCubeSide.bind(this));\n    }\n\n    /**\n     * Creates the 6 sides of the cube (the leafnodes of the scenegraph).\n     *\n     * TODO v0.1.0: Rename to CubeLayout.\n     * TODO v0.1.0: Don't create Planes for each side, let the user specify their own content for each side using this.setChildren.\n     *\n     * @private\n     * @param {Number} index The index (a integer between 0 and 5) that specifies which side to create.\n     */\n    _createCubeSide(index) {\n        const T = Transform;\n        const sideMol = new Molecule();\n        const side = new Plane({\n            size: [this.cubeWidth,this.cubeWidth],\n            properties: {\n                background: 'pink',\n                backfaceVisibility: 'visible'\n            }\n        });\n        const sync = new GenericSync(['mouse','touch']);\n\n        this.cubeSides.push(side);\n\n        side.pipe(sync);\n        sync.pipe(this.options.handler);\n\n        // rotate and place each side.\n        if (index < 4) { // sides\n            sideMol.modifier.transformFrom( T.multiply(T.rotate(0, (Math.PI/2)*index, 0), T.translate(0,0,this.cubeWidth/2)));\n        }\n        else { // top/bottom\n            sideMol.modifier.transformFrom( T.multiply(T.rotate( (Math.PI/2)*(index%2?-1:1), 0, 0), T.translate(0,0,this.cubeWidth/2)));\n        }\n\n        this.cubeSideNodes.push(\n            this.add(sideMol)\n        );\n        sideMol.add(side);\n    }\n\n    /**\n     * Set the content for the sides of the cube.\n     *\n     * @param {Array} children An array containing anything that a\n     * [famous/src/core/RenderNode](#famous/src/core/RenderNode) would accept in it's `add` method. Only the\n     * first 6 items are used, the rest are ignored.\n     */\n    setChildren(children) {\n        forLength(6, function(index) {\n            //this.cubeSideNodes[index].set(null); // TODO: how do we erase previous children?\n            this.cubeSideNodes[index].add(children[index]);\n        }.bind(this));\n        return this;\n    }\n}\nexport default Cube;\n"]}