'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.traverse = exports.getAncestorShadowRoot = exports.hasShadowDomV1 = exports.hasShadowDomV0 = exports.getShadowRootVersion = exports.observeChildren = exports.makeAccessorsEnumerable = exports.makeLowercaseSetterAliases = exports.animationFrame = exports.getBodySize = exports.applyCSSLabel = exports.epsilon = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names');

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Get the dimensions of the body element.
 * @async
 * @return {Object} An object containing `width` and `height` properties.
 */
var getBodySize = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
        var body, width, height;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return (0, _windowLoaded2.default)();

                    case 2:
                        body = document.body;
                        width = window.parseInt(window.getComputedStyle(body).getPropertyValue('width'));
                        height = window.parseInt(window.getComputedStyle(body).getPropertyValue('height'));
                        return _context.abrupt('return', { width: width, height: height });

                    case 6:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function getBodySize() {
        return _ref.apply(this, arguments);
    };
}();

var _windowLoaded = require('awaitbox/dom/windowLoaded');

var _windowLoaded2 = _interopRequireDefault(_windowLoaded);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function epsilon(value) {
    return Math.abs(value) < 0.000001 ? 0 : value;
}

function applyCSSLabel(value, label) {
    if (value === 0) {
        return '0px';
    } else if (label === '%') {
        return value * 100 + '%';
    } else if (label === 'px') {
        return value + 'px';
    }
}

function animationFrame() {
    var resolve = null;
    var promise = new _promise2.default(function (r) {
        return resolve = r;
    });
    window.requestAnimationFrame(resolve);
    return promise;
}

// Create lowercase versions of each setter property.
function makeLowercaseSetterAliases(object) {
    var props = (0, _getOwnPropertyNames2.default)(object);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (0, _getIterator3.default)(props), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var prop = _step.value;

            var lowercaseProp = prop.toLowerCase();
            if (lowercaseProp != prop) {
                var descriptor = (0, _getOwnPropertyDescriptor2.default)(object, prop);
                if ((0, _getOwnPropertyNames2.default)(descriptor).indexOf('set') >= 0) {
                    // we care only about the setters.
                    (0, _defineProperty2.default)(object, lowercaseProp, descriptor);
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

function makeAccessorsEnumerable(object) {
    var props = (0, _getOwnPropertyNames2.default)(object);
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = (0, _getIterator3.default)(props), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var prop = _step2.value;

            var descriptor = (0, _getOwnPropertyDescriptor2.default)(object, prop);
            if (descriptor && (descriptor.set || descriptor.get)) {
                descriptor.enumerable = true;
                (0, _defineProperty2.default)(object, prop, descriptor);
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }
}

// NOTE: If a child is disconnected then connected to the same parent in the
// same turn, then the onConnect and onDisconnect callbacks won't be called
// because the DOM tree will be back in the exact state as before.
var childObservationHandlers = null;
var childObserver = null;
function observeChildren(ctx, onConnect, onDisconnect) {
    if (!childObservationHandlers) childObservationHandlers = new _map2.default();
    if (!childObserver) childObserver = createChildObserver();
    childObservationHandlers.set(ctx, { onConnect: onConnect, onDisconnect: onDisconnect });
    childObserver.observe(ctx, { childList: true });
    return true;
}
function createChildObserver() {
    var _this = this;

    return new MutationObserver(function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(changes) {
            var weightsPerTarget, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, change, weights, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, addedNode, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, removedNode, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _step4$value, target, _weights, _childObservationHand, onConnect, onDisconnect, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _step7$value, node, weight;

            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            weightsPerTarget = new _map2.default();
                            _iteratorNormalCompletion3 = true;
                            _didIteratorError3 = false;
                            _iteratorError3 = undefined;
                            _context2.prev = 4;
                            _iterator3 = (0, _getIterator3.default)(changes);

                        case 6:
                            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                                _context2.next = 53;
                                break;
                            }

                            change = _step3.value;

                            if (!(change.type != 'childList')) {
                                _context2.next = 10;
                                break;
                            }

                            return _context2.abrupt('continue', 50);

                        case 10:

                            if (!weightsPerTarget.has(change.target)) weightsPerTarget.set(change.target, new _map2.default());

                            weights = weightsPerTarget.get(change.target);
                            _iteratorNormalCompletion5 = true;
                            _didIteratorError5 = false;
                            _iteratorError5 = undefined;
                            _context2.prev = 15;


                            for (_iterator5 = (0, _getIterator3.default)(change.addedNodes); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                addedNode = _step5.value;

                                weights.set(addedNode, (weights.get(addedNode) || 0) + 1);
                            }_context2.next = 23;
                            break;

                        case 19:
                            _context2.prev = 19;
                            _context2.t0 = _context2['catch'](15);
                            _didIteratorError5 = true;
                            _iteratorError5 = _context2.t0;

                        case 23:
                            _context2.prev = 23;
                            _context2.prev = 24;

                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                _iterator5.return();
                            }

                        case 26:
                            _context2.prev = 26;

                            if (!_didIteratorError5) {
                                _context2.next = 29;
                                break;
                            }

                            throw _iteratorError5;

                        case 29:
                            return _context2.finish(26);

                        case 30:
                            return _context2.finish(23);

                        case 31:
                            _iteratorNormalCompletion6 = true;
                            _didIteratorError6 = false;
                            _iteratorError6 = undefined;
                            _context2.prev = 34;
                            for (_iterator6 = (0, _getIterator3.default)(change.removedNodes); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                removedNode = _step6.value;

                                weights.set(removedNode, (weights.get(removedNode) || 0) - 1);
                            }_context2.next = 42;
                            break;

                        case 38:
                            _context2.prev = 38;
                            _context2.t1 = _context2['catch'](34);
                            _didIteratorError6 = true;
                            _iteratorError6 = _context2.t1;

                        case 42:
                            _context2.prev = 42;
                            _context2.prev = 43;

                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                _iterator6.return();
                            }

                        case 45:
                            _context2.prev = 45;

                            if (!_didIteratorError6) {
                                _context2.next = 48;
                                break;
                            }

                            throw _iteratorError6;

                        case 48:
                            return _context2.finish(45);

                        case 49:
                            return _context2.finish(42);

                        case 50:
                            _iteratorNormalCompletion3 = true;
                            _context2.next = 6;
                            break;

                        case 53:
                            _context2.next = 59;
                            break;

                        case 55:
                            _context2.prev = 55;
                            _context2.t2 = _context2['catch'](4);
                            _didIteratorError3 = true;
                            _iteratorError3 = _context2.t2;

                        case 59:
                            _context2.prev = 59;
                            _context2.prev = 60;

                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }

                        case 62:
                            _context2.prev = 62;

                            if (!_didIteratorError3) {
                                _context2.next = 65;
                                break;
                            }

                            throw _iteratorError3;

                        case 65:
                            return _context2.finish(62);

                        case 66:
                            return _context2.finish(59);

                        case 67:
                            _iteratorNormalCompletion4 = true;
                            _didIteratorError4 = false;
                            _iteratorError4 = undefined;
                            _context2.prev = 70;
                            _iterator4 = (0, _getIterator3.default)(weightsPerTarget);

                        case 72:
                            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                                _context2.next = 97;
                                break;
                            }

                            _step4$value = (0, _slicedToArray3.default)(_step4.value, 2), target = _step4$value[0], _weights = _step4$value[1];
                            _childObservationHand = childObservationHandlers.get(target), onConnect = _childObservationHand.onConnect, onDisconnect = _childObservationHand.onDisconnect;
                            _iteratorNormalCompletion7 = true;
                            _didIteratorError7 = false;
                            _iteratorError7 = undefined;
                            _context2.prev = 78;


                            for (_iterator7 = (0, _getIterator3.default)(_weights); !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                _step7$value = (0, _slicedToArray3.default)(_step7.value, 2), node = _step7$value[0], weight = _step7$value[1];

                                if (weight > 0 && typeof onConnect == 'function') onConnect.call(target, node);else if (weight < 0 && typeof onDisconnect == 'function') onDisconnect.call(target, node);
                            }
                            _context2.next = 86;
                            break;

                        case 82:
                            _context2.prev = 82;
                            _context2.t3 = _context2['catch'](78);
                            _didIteratorError7 = true;
                            _iteratorError7 = _context2.t3;

                        case 86:
                            _context2.prev = 86;
                            _context2.prev = 87;

                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }

                        case 89:
                            _context2.prev = 89;

                            if (!_didIteratorError7) {
                                _context2.next = 92;
                                break;
                            }

                            throw _iteratorError7;

                        case 92:
                            return _context2.finish(89);

                        case 93:
                            return _context2.finish(86);

                        case 94:
                            _iteratorNormalCompletion4 = true;
                            _context2.next = 72;
                            break;

                        case 97:
                            _context2.next = 103;
                            break;

                        case 99:
                            _context2.prev = 99;
                            _context2.t4 = _context2['catch'](70);
                            _didIteratorError4 = true;
                            _iteratorError4 = _context2.t4;

                        case 103:
                            _context2.prev = 103;
                            _context2.prev = 104;

                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }

                        case 106:
                            _context2.prev = 106;

                            if (!_didIteratorError4) {
                                _context2.next = 109;
                                break;
                            }

                            throw _iteratorError4;

                        case 109:
                            return _context2.finish(106);

                        case 110:
                            return _context2.finish(103);

                        case 111:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, _this, [[4, 55, 59, 67], [15, 19, 23, 31], [24,, 26, 30], [34, 38, 42, 50], [43,, 45, 49], [60,, 62, 66], [70, 99, 103, 111], [78, 82, 86, 94], [87,, 89, 93], [104,, 106, 110]]);
        }));

        return function (_x) {
            return _ref2.apply(this, arguments);
        };
    }());
}

var hasShadowDomV0 = typeof Element.prototype.createShadowRoot == 'function' && typeof HTMLContentElement == 'function' ? true : false;

var hasShadowDomV1 = typeof Element.prototype.attachShadow == 'function' && typeof HTMLSlotElement == 'function' ? true : false;

function getShadowRootVersion(shadowRoot) {
    console.log('getShadowRootVersion');
    if (!shadowRoot) return null;
    var slot = document.createElement('slot');
    shadowRoot.appendChild(slot);
    slot.appendChild(document.createElement('div'));
    var assignedNodes = slot.assignedNodes({ flatten: true });
    slot.remove();
    console.log('hmm', assignedNodes.length, assignedNodes.length > 0 ? 'v1' : 'v0');
    return assignedNodes.length > 0 ? 'v1' : 'v0';
}

function getAncestorShadowRoot(node) {
    var current = node;

    while (current && !(current instanceof ShadowRoot)) {
        current = current.parentNode;
    }

    return current;
}

// in the future, the user will be able to toggle the HTML API.
var hasHtmlApi = true;

// Traverses a tree while considering ShadowDOM disribution.
function traverse(node, isShadowChild) {
    console.log(isShadowChild ? 'distributedNode:' : 'node:', node);

    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
        for (var _iterator8 = (0, _getIterator3.default)(node.children), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var child = _step8.value;

            // skip nodes that are possiblyDistributed, i.e. they have a parent
            // that has a ShadowRoot.
            if (!hasHtmlApi || !child._elementManager.element._isPossiblyDistributed) traverse(child);
        }
    } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
                _iterator8.return();
            }
        } finally {
            if (_didIteratorError8) {
                throw _iteratorError8;
            }
        }
    }

    if (hasHtmlApi && node._elementManager.element._shadowChildren) {
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
            for (var _iterator9 = (0, _getIterator3.default)(node._elementManager.element._shadowChildren), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                var shadowChild = _step9.value;

                traverse(shadowChild.imperativeCounterpart, true);
            }
        } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion9 && _iterator9.return) {
                    _iterator9.return();
                }
            } finally {
                if (_didIteratorError9) {
                    throw _iteratorError9;
                }
            }
        }
    }
}

exports.epsilon = epsilon;
exports.applyCSSLabel = applyCSSLabel;
exports.getBodySize = getBodySize;
exports.animationFrame = animationFrame;
exports.makeLowercaseSetterAliases = makeLowercaseSetterAliases;
exports.makeAccessorsEnumerable = makeAccessorsEnumerable;
exports.observeChildren = observeChildren;
exports.getShadowRootVersion = getShadowRootVersion;
exports.hasShadowDomV0 = hasShadowDomV0;
exports.hasShadowDomV1 = hasShadowDomV1;
exports.getAncestorShadowRoot = getAncestorShadowRoot;
exports.traverse = traverse;
//# sourceMappingURL=Utility.js.map