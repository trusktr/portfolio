{"version":3,"sources":["../src/motor/ElementManager.js"],"names":["ElementManager","element","length","classList","add","property","value","style","childElementManager","appendChild","parentNode","removeChild","childImperativeNode","_elementManager","parentElement","addChild","domMatrix","cssMatrixString","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","applyStyle","size","x","y","opacity","node","applyOpacity","_properties","applyTransform","transform","applySize","_calculatedSize","task","addRenderTask","removeRenderTask","default"],"mappings":"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","file":"ElementManager.js","sourcesContent":["import Node from './Node'\nimport Motor from './Motor'\n\n/**\n * Manages a DOM element. Exposes a set of recommended APIs for working with\n * DOM efficiently. Currently doesn't do much yet...\n */\nclass ElementManager {\n    constructor(element) {\n        this.element = element\n    }\n\n    /**\n     * @param {Array.string} classes An array of class names to add to the\n     * managed element.\n     *\n     * Note: updating class names with `el.classList.add()` won't thrash the\n     * layout. See: http://www.html5rocks.com/en/tutorials/speed/animations\n     */\n    setClasses (...classes) {\n        if (classes.length) this.element.classList.add(...classes)\n        return this\n    }\n\n    /**\n     * Apply a style property to the element.\n     *\n     * @private\n     * @param  {string} property The CSS property we will a apply.\n     * @param  {string} value    The value the CSS property wil have.\n     */\n    applyStyle(property, value) {\n        this.element.style[property] = value\n    }\n\n    addChild(childElementManager) {\n        this.element.appendChild(childElementManager.element)\n    }\n\n    removeChild(childElementManager) {\n        // This conditional check is needed incase the element was already\n        // removed from the HTML-API side.\n        if (childElementManager.element.parentNode === this.element)\n            this.element.removeChild(childElementManager.element)\n    }\n\n    connectChildElement(childImperativeNode) {\n        if (\n\n            // When using the imperative API, this statement is\n            // true, so the DOM elements need to be connected.\n            !childImperativeNode._elementManager.element.parentNode\n\n            // This condition is irrelevant when strictly using the\n            // imperative API. However, it is possible that when\n            // using the HTML API that the HTML-API node can be placed\n            // somewhere that isn't another HTML-API node, and the\n            // imperative Node can be gotten and used to add the\n            // node to another imperative Node. In this case, the\n            // HTML-API node will be added to the proper HTMLparent.\n            || (childImperativeNode._elementManager.element.parentElement &&\n                childImperativeNode._elementManager.element.parentElement !== this.element)\n\n            // When an HTML-API node is already child of the\n            // relevant parent, or it is child of a shadow root of\n            // the relevant parent, there there's nothing to do,\n            // everything is already as expected, so the following\n            // conditional body is skipped.\n        ) {\n            this.addChild(childImperativeNode._elementManager)\n        }\n    }\n\n    disconnectChildElement(childImperativeNode) {\n        // If DeclarativeBase#removeChild was called first, we don't need to\n        // call this again.\n        if (!childImperativeNode._elementManager.element.parentNode) return\n\n        this.removeChild(childImperativeNode._elementManager)\n    }\n\n    /**\n     * Apply the DOMMatrix value to the style of this Node's element.\n     */\n    applyTransform (domMatrix) {\n        var cssMatrixString = `matrix3d(\n            ${ domMatrix.m11 },\n            ${ domMatrix.m12 },\n            ${ domMatrix.m13 },\n            ${ domMatrix.m14 },\n            ${ domMatrix.m21 },\n            ${ domMatrix.m22 },\n            ${ domMatrix.m23 },\n            ${ domMatrix.m24 },\n            ${ domMatrix.m31 },\n            ${ domMatrix.m32 },\n            ${ domMatrix.m33 },\n            ${ domMatrix.m34 },\n            ${ domMatrix.m41 },\n            ${ domMatrix.m42 },\n            ${ domMatrix.m43 },\n            ${ domMatrix.m44 }\n        )`;\n\n        this.applyStyle('transform', cssMatrixString)\n    }\n\n    /**\n     * [applySize description]\n     */\n    applySize (size) {\n        const {x,y} = size\n\n        this.applyStyle('width', `${x}px`)\n        this.applyStyle('height', `${y}px`)\n\n        // NOTE: we ignore the Z axis on elements, since they are flat.\n    }\n\n    applyOpacity(opacity) {\n        this.applyStyle('opacity', opacity)\n    }\n\n    applyImperativeNodeProperties(node) {\n\n        // Only Node is Transformable\n        if (node instanceof Node) {\n            this.applyOpacity(node._properties.opacity)\n            this.applyTransform(node._properties.transform)\n        }\n\n        // But both Node and Scene are Sizeable\n        this.applySize(node._calculatedSize)\n    }\n\n    shouldRender() {\n        const task = Motor.addRenderTask(() => {\n            this.applyStyle('display', 'block')\n            Motor.removeRenderTask(task)\n        })\n    }\n\n    shouldNotRender() {\n        const task = Motor.addRenderTask(() => {\n            this.applyStyle('display', 'none')\n            Motor.removeRenderTask(task)\n        })\n    }\n}\n\nexport {ElementManager as default}\n"]}