'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Node = require('./Node');

var _Node2 = _interopRequireDefault(_Node);

var _Motor = require('./Motor');

var _Motor2 = _interopRequireDefault(_Motor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Manages a DOM element. Exposes a set of recommended APIs for working with
 * DOM efficiently. Currently doesn't do much yet...
 */
var ElementManager = function () {
    function ElementManager(element) {
        (0, _classCallCheck3.default)(this, ElementManager);

        this.element = element;
    }

    /**
     * @param {Array.string} classes An array of class names to add to the
     * managed element.
     *
     * Note: updating class names with `el.classList.add()` won't thrash the
     * layout. See: http://www.html5rocks.com/en/tutorials/speed/animations
     */


    (0, _createClass3.default)(ElementManager, [{
        key: 'setClasses',
        value: function setClasses() {
            var _element$classList;

            if (arguments.length) (_element$classList = this.element.classList).add.apply(_element$classList, arguments);
            return this;
        }

        /**
         * Apply a style property to the element.
         *
         * @private
         * @param  {string} property The CSS property we will a apply.
         * @param  {string} value    The value the CSS property wil have.
         */

    }, {
        key: 'applyStyle',
        value: function applyStyle(property, value) {
            this.element.style[property] = value;
        }
    }, {
        key: 'addChild',
        value: function addChild(childElementManager) {
            this.element.appendChild(childElementManager.element);
        }
    }, {
        key: 'removeChild',
        value: function removeChild(childElementManager) {
            // This conditional check is needed incase the element was already
            // removed from the HTML-API side.
            if (childElementManager.element.parentNode === this.element) this.element.removeChild(childElementManager.element);
        }
    }, {
        key: 'connectChildElement',
        value: function connectChildElement(childImperativeNode) {
            if (

            // When using the imperative API, this statement is
            // true, so the DOM elements need to be connected.
            !childImperativeNode._elementManager.element.parentNode

            // This condition is irrelevant when strictly using the
            // imperative API. However, it is possible that when
            // using the HTML API that the HTML-API node can be placed
            // somewhere that isn't another HTML-API node, and the
            // imperative Node can be gotten and used to add the
            // node to another imperative Node. In this case, the
            // HTML-API node will be added to the proper HTMLparent.
            || childImperativeNode._elementManager.element.parentElement && childImperativeNode._elementManager.element.parentElement !== this.element

            // When an HTML-API node is already child of the
            // relevant parent, or it is child of a shadow root of
            // the relevant parent, there there's nothing to do,
            // everything is already as expected, so the following
            // conditional body is skipped.
            ) {
                    this.addChild(childImperativeNode._elementManager);
                }
        }
    }, {
        key: 'disconnectChildElement',
        value: function disconnectChildElement(childImperativeNode) {
            // If DeclarativeBase#removeChild was called first, we don't need to
            // call this again.
            if (!childImperativeNode._elementManager.element.parentNode) return;

            this.removeChild(childImperativeNode._elementManager);
        }

        /**
         * Apply the DOMMatrix value to the style of this Node's element.
         */

    }, {
        key: 'applyTransform',
        value: function applyTransform(domMatrix) {
            var cssMatrixString = 'matrix3d(\n            ' + domMatrix.m11 + ',\n            ' + domMatrix.m12 + ',\n            ' + domMatrix.m13 + ',\n            ' + domMatrix.m14 + ',\n            ' + domMatrix.m21 + ',\n            ' + domMatrix.m22 + ',\n            ' + domMatrix.m23 + ',\n            ' + domMatrix.m24 + ',\n            ' + domMatrix.m31 + ',\n            ' + domMatrix.m32 + ',\n            ' + domMatrix.m33 + ',\n            ' + domMatrix.m34 + ',\n            ' + domMatrix.m41 + ',\n            ' + domMatrix.m42 + ',\n            ' + domMatrix.m43 + ',\n            ' + domMatrix.m44 + '\n        )';

            this.applyStyle('transform', cssMatrixString);
        }

        /**
         * [applySize description]
         */

    }, {
        key: 'applySize',
        value: function applySize(size) {
            var x = size.x,
                y = size.y;


            this.applyStyle('width', x + 'px');
            this.applyStyle('height', y + 'px');

            // NOTE: we ignore the Z axis on elements, since they are flat.
        }
    }, {
        key: 'applyOpacity',
        value: function applyOpacity(opacity) {
            this.applyStyle('opacity', opacity);
        }
    }, {
        key: 'applyImperativeNodeProperties',
        value: function applyImperativeNodeProperties(node) {

            // Only Node is Transformable
            if (node instanceof _Node2.default) {
                this.applyOpacity(node._properties.opacity);
                this.applyTransform(node._properties.transform);
            }

            // But both Node and Scene are Sizeable
            this.applySize(node._calculatedSize);
        }
    }, {
        key: 'shouldRender',
        value: function shouldRender() {
            var _this = this;

            var task = _Motor2.default.addRenderTask(function () {
                _this.applyStyle('display', 'block');
                _Motor2.default.removeRenderTask(task);
            });
        }
    }, {
        key: 'shouldNotRender',
        value: function shouldNotRender() {
            var _this2 = this;

            var task = _Motor2.default.addRenderTask(function () {
                _this2.applyStyle('display', 'none');
                _Motor2.default.removeRenderTask(task);
            });
        }
    }]);
    return ElementManager;
}();

exports.default = ElementManager;
module.exports = exports['default'];
//# sourceMappingURL=ElementManager.js.map