'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _hasInstance = require('babel-runtime/core-js/symbol/has-instance');

var _hasInstance2 = _interopRequireDefault(_hasInstance);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var instanceofSymbol = (0, _symbol2.default)('instanceofSymbol');

var TreeNodeMixin = function TreeNodeMixin(base) {
    var TreeNode = function (_base) {
        (0, _inherits3.default)(TreeNode, _base);

        function TreeNode() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            (0, _classCallCheck3.default)(this, TreeNode);

            var _this = (0, _possibleConstructorReturn3.default)(this, (TreeNode.__proto__ || (0, _getPrototypeOf2.default)(TreeNode)).call(this, options));

            _this._parent = null; // default to no parent.
            _this._children = [];
            return _this;
        }

        /**
         * this._parent is protected (node's can access other node._parent).
         * The user should use the addChild methods, which automatically handles
         * setting a parent.
         *
         * @readonly
         */


        (0, _createClass3.default)(TreeNode, [{
            key: 'addChild',


            /**
             * Add a child node to this TreeNode.
             *
             * @param {TreeNode} childNode The child node to add.
             */
            value: function addChild(childNode) {

                if (!(childNode instanceof TreeNode)) throw new TypeError('TreeNode.addChild expects the childNode argument to be a TreeNode instance.');

                if (childNode._parent === this) throw new ReferenceError('childNode is already a child of this parent.');

                if (childNode._parent) childNode._parent.removeChild(childNode);

                childNode._parent = this;

                this._children.push(childNode);

                return this;
            }

            /**
             * Add all the child nodes in the given array to this node.
             *
             * @param {Array.TreeNode} nodes The nodes to add.
             */

        }, {
            key: 'addChildren',
            value: function addChildren(nodes) {
                var _this2 = this;

                nodes.forEach(function (node) {
                    return _this2.addChild(node);
                });
                return this;
            }

            /**
             * Remove a child node from this node.
             *
             * @param {TreeNode} childNode The node to remove.
             */

        }, {
            key: 'removeChild',
            value: function removeChild(childNode) {
                if (!(childNode instanceof TreeNode)) throw new Error('\n                    TreeNode.removeChild expects the childNode argument to be an\n                    instance of TreeNode. There should only be TreeNodes in the\n                    tree.\n                ');

                if (childNode._parent !== this) throw new ReferenceError('childNode is not a child of this parent.');

                childNode._parent = null;
                this._children.splice(this._children.indexOf(childNode), 1);

                return this;
            }

            /**
             * Remove all the child nodes in the given array from this node.
             *
             * @param {Array.TreeNode} nodes The nodes to remove.
             */

        }, {
            key: 'removeChildren',
            value: function removeChildren(nodes) {
                var _this3 = this;

                nodes.forEach(function (node) {
                    return _this3.removeChild(node);
                });
                return this;
            }

            /**
             * Shortcut to remove all children.
             */

        }, {
            key: 'removeAllChildren',
            value: function removeAllChildren() {
                this.removeChildren(this._children);
                return this;
            }

            /**
             * @readonly
             * @return {number} How many children this TreeNode has.
             */

        }, {
            key: 'parent',
            get: function get() {
                return this._parent;
            }

            /**
             * @readonly
             */

        }, {
            key: 'children',
            get: function get() {
                // return a new array, so that the user modifying it doesn't affect
                // this node's actual children.
                return [].concat((0, _toConsumableArray3.default)(this._children));
            }
        }, {
            key: 'childCount',
            get: function get() {
                return this._children.length;
            }
        }]);
        return TreeNode;
    }(base);

    (0, _defineProperty2.default)(TreeNode, _hasInstance2.default, {
        value: function value(obj) {
            if (this !== TreeNode) return (0, _getPrototypeOf2.default)(TreeNode)[_hasInstance2.default].call(this, obj);

            var currentProto = obj;

            while (currentProto) {
                var desc = (0, _getOwnPropertyDescriptor2.default)(currentProto, "constructor");

                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol)) return true;

                currentProto = (0, _getPrototypeOf2.default)(currentProto);
            }

            return false;
        }
    });

    TreeNode[instanceofSymbol] = true;

    return TreeNode;
};

var TreeNode = TreeNodeMixin(function () {
    function _class() {
        (0, _classCallCheck3.default)(this, _class);
    }

    return _class;
}());
TreeNode.mixin = TreeNodeMixin;

exports.default = TreeNode;
module.exports = exports['default'];
//# sourceMappingURL=TreeNode.js.map