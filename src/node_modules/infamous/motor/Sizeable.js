'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _hasInstance = require('babel-runtime/core-js/symbol/has-instance');

var _hasInstance2 = _interopRequireDefault(_hasInstance);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _Utility = require('./Utility');

var _TreeNode = require('./TreeNode');

var _TreeNode2 = _interopRequireDefault(_TreeNode);

var _XYZValues = require('./XYZValues');

var _XYZValues2 = _interopRequireDefault(_XYZValues);

var _Observable = require('./Observable');

var _Observable2 = _interopRequireDefault(_Observable);

var _Motor = require('./Motor');

var _Motor2 = _interopRequireDefault(_Motor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// fallback to experimental CSS transform if browser doesn't have it (fix for Safari 9)
if (typeof document.createElement('div').style.transform == 'undefined') {
    Object.defineProperty(CSSStyleDeclaration.prototype, 'transform', {
        set: function set(value) {
            this.webkitTransform = value;
        },
        get: function get() {
            return this.webkitTransform;
        },

        enumerable: true
    });
}

var instanceofSymbol = (0, _symbol2.default)('instanceofSymbol');

var SizeableMixin = function SizeableMixin(base) {

    // Sizeable extends TreeNode because Sizeable knows about its _parent when
    // calculating proportionalSize.
    var Sizeable = function (_TreeNode$mixin) {
        (0, _inherits3.default)(Sizeable, _TreeNode$mixin);

        function Sizeable() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            (0, _classCallCheck3.default)(this, Sizeable);

            var _this = (0, _possibleConstructorReturn3.default)(this, (Sizeable.__proto__ || (0, _getPrototypeOf2.default)(Sizeable)).call(this, options));

            _this._propertyFunctions = null;
            _this._calculatedSize = { x: 0, y: 0, z: 0 };
            _this._properties = {};
            _this._setDefaultProperties();
            _this._setPropertyObservers();
            _this.properties = options;
            return _this;
        }

        (0, _createClass3.default)(Sizeable, [{
            key: '_setDefaultProperties',
            value: function _setDefaultProperties() {
                (0, _assign2.default)(this._properties, {
                    sizeMode: new _XYZValues2.default('absolute', 'absolute', 'absolute'),
                    absoluteSize: new _XYZValues2.default(0, 0, 0),
                    proportionalSize: new _XYZValues2.default(1, 1, 1)
                });
            }
        }, {
            key: '_setPropertyObservers',
            value: function _setPropertyObservers() {
                var _this2 = this;

                this._properties.sizeMode.on('valuechanged', function () {
                    return _this2.triggerEvent('propertychange', 'sizeMode');
                });
                this._properties.absoluteSize.on('valuechanged', function () {
                    return _this2.triggerEvent('propertychange', 'absoluteSize');
                });
                this._properties.proportionalSize.on('valuechanged', function () {
                    return _this2.triggerEvent('propertychange', 'proportionalSize');
                });
            }

            /**
             * Set the size mode for each axis. Possible size modes are "absolute" and "proportional".
             *
             * @param {Object} newValue
             * @param {number} [newValue.x] The x-axis sizeMode to apply.
             * @param {number} [newValue.y] The y-axis sizeMode to apply.
             * @param {number} [newValue.z] The z-axis sizeMode to apply.
             */

        }, {
            key: '_calcSize',
            value: function _calcSize() {
                var calculatedSize = this._calculatedSize;
                var previousSize = (0, _objectWithoutProperties3.default)(calculatedSize, []);

                var props = this._properties;
                var parentSize = this._getParentSize();

                if (props.sizeMode._x == 'absolute') {
                    calculatedSize.x = props.absoluteSize._x;
                } else {
                    // proportional
                    calculatedSize.x = parentSize.x * props.proportionalSize._x;
                }

                if (props.sizeMode._y == 'absolute') {
                    calculatedSize.y = props.absoluteSize._y;
                } else {
                    // proportional
                    calculatedSize.y = parentSize.y * props.proportionalSize._y;
                }

                if (props.sizeMode._z == 'absolute') {
                    calculatedSize.z = props.absoluteSize._z;
                } else {
                    // proportional
                    calculatedSize.z = parentSize.z * props.proportionalSize._z;
                }

                if (previousSize.x !== calculatedSize.x || previousSize.y !== calculatedSize.y || previousSize.z !== calculatedSize.z) {
                    this.triggerEvent('sizechange', (0, _assign2.default)({}, calculatedSize));
                }
            }
        }, {
            key: '_getParentSize',
            value: function _getParentSize() {
                return this._parent ? this._parent._calculatedSize : { x: 0, y: 0, z: 0 };
            }

            /**
             * @param {Object} newValue
             * @param {number} [newValue.x] The x-axis absoluteSize to apply.
             * @param {number} [newValue.y] The y-axis absoluteSize to apply.
             * @param {number} [newValue.z] The z-axis absoluteSize to apply.
             */

        }, {
            key: '_setPropertyXYZ',

            // no need for a properties getter.

            value: function _setPropertyXYZ(Class, name, newValue) {
                var _this3 = this;

                if (!(newValue instanceof Object || newValue instanceof Array || newValue instanceof Function)) {
                    throw new TypeError('Invalid value for ' + Class.name + '#' + name + '.');
                }

                var change = false;

                if (newValue instanceof Function) {
                    // remove previous task if any.
                    if (!this._propertyFunctions) this._propertyFunctions = new _map2.default();

                    if (this._propertyFunctions.has(name)) _Motor2.default.removeRenderTask(this._propertyFunctions.get(name));

                    this._propertyFunctions.set(name, _Motor2.default.addRenderTask(function (time) {
                        var result = newValue(_this3._properties[name]._x, _this3._properties[name]._y, _this3._properties[name]._z, time);

                        if (result === false) {
                            _this3._propertyFunctions.delete(name);
                            return false;
                        }

                        _this3[name] = result;
                    }));
                } else if (newValue instanceof Array) {
                    if (typeof newValue[0] != 'undefined') {
                        this._properties[name]._x = newValue[0];change = true;
                    }
                    if (typeof newValue[1] != 'undefined') {
                        this._properties[name]._y = newValue[1];change = true;
                    }
                    if (typeof newValue[2] != 'undefined') {
                        this._properties[name]._z = newValue[2];change = true;
                    }
                } else {
                    if (typeof newValue.x != 'undefined') {
                        this._properties[name]._x = newValue.x;change = true;
                    }
                    if (typeof newValue.y != 'undefined') {
                        this._properties[name]._y = newValue.y;change = true;
                    }
                    if (typeof newValue.z != 'undefined') {
                        this._properties[name]._z = newValue.z;change = true;
                    }
                }

                if (change) this.triggerEvent('propertychange', name);
            }
        }, {
            key: '_setPropertySingle',
            value: function _setPropertySingle(Class, name, newValue, type) {
                var _this4 = this;

                if (!((typeof newValue === 'undefined' ? 'undefined' : (0, _typeof3.default)(newValue)) == type || newValue instanceof Function)) throw new TypeError('Invalid value for ' + Class.name + '#' + name + '.');

                if (newValue instanceof Function) {
                    // remove previous task if any.
                    _Motor2.default.addRenderTask(function (time) {
                        var result = newValue(_this4._properties[name], time);

                        if (result === false) return false;

                        _this4[name] = result;
                    });
                } else {
                    this._properties[name] = newValue;
                    this.triggerEvent('propertychange', name);
                }
            }
        }, {
            key: 'sizeMode',
            set: function set(newValue) {
                this._setPropertyXYZ(Sizeable, 'sizeMode', newValue);
            },
            get: function get() {
                return this._properties.sizeMode;
            }
        }, {
            key: 'absoluteSize',
            set: function set(newValue) {
                this._setPropertyXYZ(Sizeable, 'absoluteSize', newValue);
            },
            get: function get() {
                return this._properties.absoluteSize;
            }

            /**
             * Get the actual size of the Node. This can be useful when size is
             * proportional, as the actual size of the Node depends on the size of
             * it's parent.
             *
             * @readonly
             *
             * @return {Array.number} An Oject with x, y, and z properties, each
             * property representing the computed size of the x, y, and z axes
             * respectively.
             */

        }, {
            key: 'actualSize',
            get: function get() {
                var _calculatedSize = this._calculatedSize,
                    x = _calculatedSize.x,
                    y = _calculatedSize.y,
                    z = _calculatedSize.z;

                return { x: x, y: y, z: z };
            }

            /**
             * Set the size of a Node proportional to the size of it's parent Node. The
             * values are a real number between 0 and 1 inclusive where 0 means 0% of
             * the parent size and 1 means 100% of the parent size.
             *
             * @param {Object} newValue
             * @param {number} [newValue.x] The x-axis proportionalSize to apply.
             * @param {number} [newValue.y] The y-axis proportionalSize to apply.
             * @param {number} [newValue.z] The z-axis proportionalSize to apply.
             */

        }, {
            key: 'proportionalSize',
            set: function set(newValue) {
                this._setPropertyXYZ(Sizeable, 'proportionalSize', newValue);
            },
            get: function get() {
                return this._properties.proportionalSize;
            }

            /**
             * Set all properties of a Sizeable in one method.
             *
             * @param {Object} properties Properties object - see example
             *
             * @example
             * node.properties = {
             *   sizeMode: {x:'absolute', y:'proportional', z:'absolute'},
             *   absoluteSize: {x:300, y:100, z:200},
             *   proportionalSize: {x:1, z:0.5}
             * }
             */

        }, {
            key: 'properties',
            set: function set() {
                var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                if (properties.sizeMode) this.sizeMode = properties.sizeMode;

                if (properties.absoluteSize) this.absoluteSize = properties.absoluteSize;

                if (properties.proportionalSize) this.proportionalSize = properties.proportionalSize;
            }
        }]);
        return Sizeable;
    }(_TreeNode2.default.mixin(_Observable2.default.mixin(base)));

    (0, _defineProperty2.default)(Sizeable, _hasInstance2.default, {
        value: function value(obj) {
            if (this !== Sizeable) return (0, _getPrototypeOf2.default)(Sizeable)[_hasInstance2.default].call(this, obj);

            var currentProto = obj;

            while (currentProto) {
                var desc = (0, _getOwnPropertyDescriptor2.default)(currentProto, "constructor");

                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol)) return true;

                currentProto = (0, _getPrototypeOf2.default)(currentProto);
            }

            return false;
        }
    });

    Sizeable[instanceofSymbol] = true;

    // for use by MotorHTML, convenient since HTMLElement attributes are all
    // converted to lowercase by default, so if we don't do this then we won't be
    // able to map attributes to Node setters as easily.
    (0, _Utility.makeLowercaseSetterAliases)(Sizeable.prototype);

    (0, _Utility.makeAccessorsEnumerable)(Sizeable.prototype);

    return Sizeable;
};

var Sizeable = SizeableMixin(function () {
    function _class() {
        (0, _classCallCheck3.default)(this, _class);
    }

    return _class;
}());
Sizeable.mixin = SizeableMixin;

exports.default = Sizeable;
module.exports = exports['default'];
//# sourceMappingURL=Sizeable.js.map