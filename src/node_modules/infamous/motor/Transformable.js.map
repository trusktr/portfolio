{"version":3,"sources":["../src/motor/Transformable.js"],"names":["instanceofSymbol","TransformableMixin","Transformable","_properties","position","rotation","scale","origin","align","mountPoint","opacity","transform","window","DOMMatrix","on","triggerEvent","matrix","properties","alignAdjustment","_parent","parentSize","_calculatedSize","x","y","z","mountPointAdjustment","thisSize","appliedPosition","translateSelf","rotateAxisAngleSelf","newValue","_setPropertyXYZ","isRealNumber","undefined","_setPropertySingle","mixin","base","value","obj","call","currentProto","desc","hasOwnProperty","prototype","num","NaN","Infinity","default"],"mappings":"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","file":"Transformable.js","sourcesContent":["import XYZValues from './XYZValues'\nimport Sizeable from './Sizeable'\nimport { makeLowercaseSetterAliases, makeAccessorsEnumerable } from './Utility'\n\nconst instanceofSymbol = Symbol('instanceofSymbol')\n\nconst TransformableMixin = base => {\n\n    // Transformable extends TreeNode (indirectly through Sizeable) because it\n    // needs to be aware of its _parent when calculating align adjustments.\n    class Transformable extends Sizeable.mixin(base) {\n\n        _setDefaultProperties() {\n            super._setDefaultProperties()\n\n            Object.assign(this._properties, {\n                position:   new XYZValues(0, 0, 0),\n                rotation:   new XYZValues(0, 0, 0),\n                scale:      new XYZValues(1, 1, 1),\n                origin:     new XYZValues(0.5, 0.5, 0.5),\n                align:      new XYZValues(0, 0, 0),\n                mountPoint: new XYZValues(0, 0, 0),\n                opacity:    1,\n                transform:  new window.DOMMatrix,\n            })\n        }\n\n        _setPropertyObservers() {\n            super._setPropertyObservers()\n\n            this._properties.position.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'position'))\n            this._properties.rotation.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'rotation'))\n            this._properties.scale.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'scale'))\n            this._properties.origin.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'origin'))\n            this._properties.align.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'align'))\n            this._properties.mountPoint.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'mountPoint'))\n        }\n\n        /**\n         * Set the position of the Transformable.\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis position to apply.\n         * @param {number} [newValue.y] The y-axis position to apply.\n         * @param {number} [newValue.z] The z-axis position to apply.\n         */\n        set position(newValue) {\n            this._setPropertyXYZ(Transformable, 'position', newValue)\n        }\n        get position() {\n            return this._properties.position\n        }\n\n        /**\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis rotation to apply.\n         * @param {number} [newValue.y] The y-axis rotation to apply.\n         * @param {number} [newValue.z] The z-axis rotation to apply.\n         */\n        set rotation(newValue) {\n            this._setPropertyXYZ(Transformable, 'rotation', newValue)\n        }\n        get rotation() {\n            return this._properties.rotation\n        }\n\n        /**\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis scale to apply.\n         * @param {number} [newValue.y] The y-axis scale to apply.\n         * @param {number} [newValue.z] The z-axis scale to apply.\n         */\n        set scale(newValue) {\n            this._setPropertyXYZ(Transformable, 'scale', newValue)\n        }\n        get scale() {\n            return this._properties.scale\n        }\n\n        /**\n         * Set this Node's opacity.\n         *\n         * @param {number} opacity A floating point number between 0 and 1\n         * (inclusive). 0 is fully transparent, 1 is fully opaque.\n         */\n        set opacity(newValue) {\n            if (!isRealNumber(newValue)) newValue = undefined\n            this._setPropertySingle(Transformable, 'opacity', newValue, 'number')\n        }\n        get opacity() {\n            return this._properties.opacity\n        }\n\n        /**\n         * Set the alignment of the Node. This determines at which point in this\n         * Node's parent that this Node is mounted.\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis align to apply.\n         * @param {number} [newValue.y] The y-axis align to apply.\n         * @param {number} [newValue.z] The z-axis align to apply.\n         */\n        set align(newValue) {\n            this._setPropertyXYZ(Transformable, 'align', newValue)\n        }\n        get align() {\n            return this._properties.align\n        }\n\n        /**\n         * Set the mount point of the Node.\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis mountPoint to apply.\n         * @param {number} [newValue.y] The y-axis mountPoint to apply.\n         * @param {number} [newValue.z] The z-axis mountPoint to apply.\n         */\n        set mountPoint(newValue) {\n            this._setPropertyXYZ(Transformable, 'mountPoint', newValue)\n        }\n        get mountPoint() {\n            return this._properties.mountPoint\n        }\n\n        /**\n         * Set all properties of a Transformable in one method.\n         *\n         * @param {Object} properties Properties object - see example.\n         *\n         * @example\n         * node.properties = {\n         *   position: {x:200, y:300, z:100},\n         *   rotation: {z:35},\n         *   scale: {y:2},\n         *   opacity: .9,\n         * }\n         */\n        set properties (properties = {}) {\n            super.properties = properties\n\n            if (properties.position)\n                this.position = properties.position\n\n            if (properties.rotation)\n                this.rotation = properties.rotation\n\n            if (properties.scale)\n                this.scale = properties.scale\n\n            if (properties.origin)\n                this.origin = properties.origin\n\n            if (properties.align)\n                this.align = properties.align\n\n            if (properties.mountPoint)\n                this.mountPoint = properties.mountPoint\n\n            if (properties.opacity)\n                this.opacity = properties.opacity\n        }\n        // no need for a properties getter.\n\n        /**\n         * Takes all the current component values (position, rotation, etc) and\n         * calculates a transformation DOMMatrix from them. See \"W3C Geometry\n         * Interfaces\" to learn about DOMMatrix.\n         *\n         * @method\n         * @private\n         * @memberOf Node\n         */\n        _calculateMatrix () {\n            const matrix = new window.DOMMatrix\n            const properties = this._properties\n\n            const alignAdjustment = [0,0,0]\n            if (this._parent) { // The root Scene doesn't have a parent, for example.\n                const parentSize = this._parent._calculatedSize\n                const {align} = properties\n                alignAdjustment[0] = parentSize.x * align.x\n                alignAdjustment[1] = parentSize.y * align.y\n                alignAdjustment[2] = parentSize.z * align.z\n            }\n\n            const mountPointAdjustment = [0,0,0]\n            const thisSize = this._calculatedSize\n            const {mountPoint} = properties\n            mountPointAdjustment[0] = thisSize.x * mountPoint.x\n            mountPointAdjustment[1] = thisSize.y * mountPoint.y\n            mountPointAdjustment[2] = thisSize.z * mountPoint.z\n\n            const appliedPosition = []\n            const {position} = properties\n            appliedPosition[0] = position.x + alignAdjustment[0] - mountPointAdjustment[0]\n            appliedPosition[1] = position.y + alignAdjustment[1] - mountPointAdjustment[1]\n            appliedPosition[2] = position.z + alignAdjustment[2] - mountPointAdjustment[2]\n\n            matrix.translateSelf(appliedPosition[0], appliedPosition[1], appliedPosition[2])\n\n            // origin calculation will go here:\n            // - move by negative origin before rotating.\n\n            // apply each axis rotation, in the x,y,z order.\n            const {rotation} = properties\n            matrix.rotateAxisAngleSelf(1,0,0, rotation.x)\n            matrix.rotateAxisAngleSelf(0,1,0, rotation.y)\n            matrix.rotateAxisAngleSelf(0,0,1, rotation.z)\n\n            // origin calculation will go here:\n            // - move by positive origin after rotating.\n\n            return matrix\n        }\n    }\n\n    Object.defineProperty(Transformable, Symbol.hasInstance, {\n        value: function(obj) {\n            if (this !== Transformable) return Object.getPrototypeOf(Transformable)[Symbol.hasInstance].call(this, obj)\n\n            let currentProto = obj\n\n            while(currentProto) {\n                const desc = Object.getOwnPropertyDescriptor(currentProto, \"constructor\")\n\n                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol))\n                    return true\n\n                currentProto = Object.getPrototypeOf(currentProto)\n            }\n\n            return false\n        }\n    })\n\n    Transformable[instanceofSymbol] = true\n\n    // for use by MotorHTML, convenient since HTMLElement attributes are all\n    // converted to lowercase by default, so if we don't do this then we won't be\n    // able to map attributes to Node setters as easily.\n    makeLowercaseSetterAliases(Transformable.prototype)\n\n    // So Tween.js can animate Transformable properties that are accessors.\n    // Note, this makes all accessors enumerable even though we don't need to\n    // animate them all, but it's not a big deal.\n    makeAccessorsEnumerable(Transformable.prototype)\n\n    return Transformable\n}\n\nfunction isRealNumber(num) {\n    if (\n        typeof num != 'number'\n        || Object.is(num, NaN)\n        || Object.is(num, Infinity)\n    ) return false\n    return true\n}\n\nconst Transformable = TransformableMixin(class{})\nTransformable.mixin = TransformableMixin\n\nexport {Transformable as default}\n"]}