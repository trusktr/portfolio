{"version":3,"sources":["../src/motor/Sizeable.js"],"names":["document","createElement","style","transform","Object","defineProperty","CSSStyleDeclaration","prototype","set","value","webkitTransform","get","enumerable","instanceofSymbol","SizeableMixin","Sizeable","options","_propertyFunctions","_calculatedSize","x","y","z","_properties","_setDefaultProperties","_setPropertyObservers","properties","sizeMode","absoluteSize","proportionalSize","on","triggerEvent","calculatedSize","previousSize","props","parentSize","_getParentSize","_x","_y","_z","_parent","Class","name","newValue","Array","Function","TypeError","change","has","removeRenderTask","addRenderTask","result","time","delete","type","_setPropertyXYZ","mixin","base","obj","call","currentProto","desc","hasOwnProperty","default"],"mappings":"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","file":"Sizeable.js","sourcesContent":["import { makeLowercaseSetterAliases, makeAccessorsEnumerable } from './Utility'\nimport TreeNode from './TreeNode'\nimport XYZValues from './XYZValues'\nimport Observable from './Observable'\nimport Motor from './Motor'\n\n// fallback to experimental CSS transform if browser doesn't have it (fix for Safari 9)\nif (typeof document.createElement('div').style.transform == 'undefined') {\n    Object.defineProperty(CSSStyleDeclaration.prototype, 'transform', {\n        set(value) {\n            this.webkitTransform = value\n        },\n        get() {\n            return this.webkitTransform\n        },\n        enumerable: true,\n    })\n}\n\nconst instanceofSymbol = Symbol('instanceofSymbol')\n\nconst SizeableMixin = base => {\n\n    // Sizeable extends TreeNode because Sizeable knows about its _parent when\n    // calculating proportionalSize.\n    class Sizeable extends TreeNode.mixin(Observable.mixin(base)) {\n\n        constructor(options = {}) {\n            super(options)\n\n            this._propertyFunctions = null\n            this._calculatedSize = { x:0, y:0, z:0 }\n            this._properties = {}\n            this._setDefaultProperties()\n            this._setPropertyObservers()\n            this.properties = options\n        }\n\n        _setDefaultProperties() {\n            Object.assign(this._properties, {\n                sizeMode:         new XYZValues('absolute', 'absolute', 'absolute'),\n                absoluteSize:     new XYZValues(0, 0, 0),\n                proportionalSize: new XYZValues(1, 1, 1),\n            })\n        }\n\n        _setPropertyObservers() {\n            this._properties.sizeMode.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'sizeMode'))\n            this._properties.absoluteSize.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'absoluteSize'))\n            this._properties.proportionalSize.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'proportionalSize'))\n        }\n\n        /**\n         * Set the size mode for each axis. Possible size modes are \"absolute\" and \"proportional\".\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis sizeMode to apply.\n         * @param {number} [newValue.y] The y-axis sizeMode to apply.\n         * @param {number} [newValue.z] The z-axis sizeMode to apply.\n         */\n        set sizeMode(newValue) {\n            this._setPropertyXYZ(Sizeable, 'sizeMode', newValue)\n        }\n        get sizeMode() {\n            return this._properties.sizeMode\n        }\n\n        _calcSize() {\n            const calculatedSize = this._calculatedSize\n            const {...previousSize} = calculatedSize\n            const props = this._properties\n            const parentSize = this._getParentSize()\n\n            if (props.sizeMode._x == 'absolute') {\n                calculatedSize.x = props.absoluteSize._x\n            }\n            else { // proportional\n                calculatedSize.x = parentSize.x * props.proportionalSize._x\n            }\n\n            if (props.sizeMode._y == 'absolute') {\n                calculatedSize.y = props.absoluteSize._y\n            }\n            else { // proportional\n                calculatedSize.y = parentSize.y * props.proportionalSize._y\n            }\n\n            if (props.sizeMode._z == 'absolute') {\n                calculatedSize.z = props.absoluteSize._z\n            }\n            else { // proportional\n                calculatedSize.z = parentSize.z * props.proportionalSize._z\n            }\n\n            if (\n                previousSize.x !== calculatedSize.x\n                || previousSize.y !== calculatedSize.y\n                || previousSize.z !== calculatedSize.z\n            ) {\n                this.triggerEvent('sizechange', Object.assign({}, calculatedSize))\n            }\n        }\n\n        _getParentSize() {\n            return this._parent ? this._parent._calculatedSize : {x:0,y:0,z:0}\n        }\n\n        /**\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis absoluteSize to apply.\n         * @param {number} [newValue.y] The y-axis absoluteSize to apply.\n         * @param {number} [newValue.z] The z-axis absoluteSize to apply.\n         */\n        set absoluteSize(newValue) {\n            this._setPropertyXYZ(Sizeable, 'absoluteSize', newValue)\n        }\n        get absoluteSize() {\n            return this._properties.absoluteSize\n        }\n\n        /**\n         * Get the actual size of the Node. This can be useful when size is\n         * proportional, as the actual size of the Node depends on the size of\n         * it's parent.\n         *\n         * @readonly\n         *\n         * @return {Array.number} An Oject with x, y, and z properties, each\n         * property representing the computed size of the x, y, and z axes\n         * respectively.\n         */\n        get actualSize() {\n            const {x,y,z} = this._calculatedSize\n            return {x,y,z}\n        }\n\n        /**\n         * Set the size of a Node proportional to the size of it's parent Node. The\n         * values are a real number between 0 and 1 inclusive where 0 means 0% of\n         * the parent size and 1 means 100% of the parent size.\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis proportionalSize to apply.\n         * @param {number} [newValue.y] The y-axis proportionalSize to apply.\n         * @param {number} [newValue.z] The z-axis proportionalSize to apply.\n         */\n        set proportionalSize(newValue) {\n            this._setPropertyXYZ(Sizeable, 'proportionalSize', newValue)\n        }\n        get proportionalSize() {\n            return this._properties.proportionalSize\n        }\n\n        /**\n         * Set all properties of a Sizeable in one method.\n         *\n         * @param {Object} properties Properties object - see example\n         *\n         * @example\n         * node.properties = {\n         *   sizeMode: {x:'absolute', y:'proportional', z:'absolute'},\n         *   absoluteSize: {x:300, y:100, z:200},\n         *   proportionalSize: {x:1, z:0.5}\n         * }\n         */\n        set properties (properties = {}) {\n            if (properties.sizeMode)\n                this.sizeMode = properties.sizeMode\n\n            if (properties.absoluteSize)\n                this.absoluteSize = properties.absoluteSize\n\n            if (properties.proportionalSize)\n                this.proportionalSize = properties.proportionalSize\n        }\n        // no need for a properties getter.\n\n        _setPropertyXYZ(Class, name, newValue) {\n            if (!(\n                newValue instanceof Object ||\n                newValue instanceof Array ||\n                newValue instanceof Function\n            )) {\n                throw new TypeError(`Invalid value for ${Class.name}#${name}.`)\n            }\n\n            let change = false\n\n            if (newValue instanceof Function) {\n                // remove previous task if any.\n                if (!this._propertyFunctions) this._propertyFunctions = new Map\n\n                if (this._propertyFunctions.has(name))\n                    Motor.removeRenderTask(this._propertyFunctions.get(name))\n\n                this._propertyFunctions.set(name,\n                    Motor.addRenderTask(time => {\n                        const result = newValue(\n                            this._properties[name]._x,\n                            this._properties[name]._y,\n                            this._properties[name]._z,\n                            time\n                        )\n\n                        if (result === false) {\n                            this._propertyFunctions.delete(name)\n                            return false\n                        }\n\n                        this[name] = result\n                    })\n                )\n            }\n            else if (newValue instanceof Array) {\n                if (typeof newValue[0] != 'undefined') { this._properties[name]._x = newValue[0]; change = true }\n                if (typeof newValue[1] != 'undefined') { this._properties[name]._y = newValue[1]; change = true }\n                if (typeof newValue[2] != 'undefined') { this._properties[name]._z = newValue[2]; change = true }\n            }\n            else {\n                if (typeof newValue.x != 'undefined') { this._properties[name]._x = newValue.x; change = true }\n                if (typeof newValue.y != 'undefined') { this._properties[name]._y = newValue.y; change = true }\n                if (typeof newValue.z != 'undefined') { this._properties[name]._z = newValue.z; change = true }\n            }\n\n            if (change) this.triggerEvent('propertychange', name)\n        }\n\n        _setPropertySingle(Class, name, newValue, type) {\n            if (!(typeof newValue == type || newValue instanceof Function))\n                throw new TypeError(`Invalid value for ${Class.name}#${name}.`)\n\n            if (newValue instanceof Function) {\n                // remove previous task if any.\n                Motor.addRenderTask(time => {\n                    const result = newValue(\n                        this._properties[name],\n                        time\n                    )\n\n                    if (result === false) return false\n\n                    this[name] = result\n                })\n            }\n            else {\n                this._properties[name] = newValue\n                this.triggerEvent('propertychange', name)\n            }\n        }\n    }\n\n    Object.defineProperty(Sizeable, Symbol.hasInstance, {\n        value: function(obj) {\n            if (this !== Sizeable) return Object.getPrototypeOf(Sizeable)[Symbol.hasInstance].call(this, obj)\n\n            let currentProto = obj\n\n            while (currentProto) {\n                const desc = Object.getOwnPropertyDescriptor(currentProto, \"constructor\")\n\n                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol))\n                    return true\n\n                currentProto = Object.getPrototypeOf(currentProto)\n            }\n\n            return false\n        }\n    })\n\n    Sizeable[instanceofSymbol] = true\n\n    // for use by MotorHTML, convenient since HTMLElement attributes are all\n    // converted to lowercase by default, so if we don't do this then we won't be\n    // able to map attributes to Node setters as easily.\n    makeLowercaseSetterAliases(Sizeable.prototype)\n\n    makeAccessorsEnumerable(Sizeable.prototype)\n\n    return Sizeable\n}\n\nconst Sizeable = SizeableMixin(class{})\nSizeable.mixin = SizeableMixin\n\nexport {Sizeable as default}\n"]}