'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _set2 = require('babel-runtime/helpers/set');

var _set3 = _interopRequireDefault(_set2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Utility = require('./Utility');

var _Sizeable = require('./Sizeable');

var _Sizeable2 = _interopRequireDefault(_Sizeable);

var _ImperativeBase = require('./ImperativeBase');

var _ImperativeBase2 = _interopRequireDefault(_ImperativeBase);

var _XYZValues = require('./XYZValues');

var _XYZValues2 = _interopRequireDefault(_XYZValues);

var _scene = require('../motor-html/scene');

var _scene2 = _interopRequireDefault(_scene);

var _documentReady = require('awaitbox/dom/documentReady');

var _documentReady2 = _interopRequireDefault(_documentReady);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ImperativeBase.initImperativeBase)();

// Scene is Sizeable, which is currently a subset of Transformable.

var Scene = function (_ImperativeBase$mixin) {
    (0, _inherits3.default)(Scene, _ImperativeBase$mixin);

    function Scene() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _classCallCheck3.default)(this, Scene);

        // NOTE: z size is always 0, since native DOM elements are always flat.
        var _this = (0, _possibleConstructorReturn3.default)(this, (Scene.__proto__ || (0, _getPrototypeOf2.default)(Scene)).call(this, options));

        _this._elementParentSize = { x: 0, y: 0, z: 0 };

        _this._onElementParentSizeChange = function (newSize) {
            _this._elementParentSize = newSize;
            _this._calcSize();
            _this._needsToBeRendered();
        };

        _this._calcSize();
        _this._needsToBeRendered();
        return _this;
    }

    (0, _createClass3.default)(Scene, [{
        key: '_setDefaultProperties',
        value: function _setDefaultProperties() {
            (0, _get3.default)(Scene.prototype.__proto__ || (0, _getPrototypeOf2.default)(Scene.prototype), '_setDefaultProperties', this).call(this);

            (0, _assign2.default)(this._properties, {
                sizeMode: new _XYZValues2.default('proportional', 'proportional', 'absolute')
            });
        }

        // When we set the scene's size mode, we should start polling if it has
        // proportional sizing.

    }, {
        key: '_startOrStopSizePolling',
        value: function _startOrStopSizePolling() {
            if (this._mounted && (this._properties.sizeMode.x == 'proportional' || this._properties.sizeMode.y == 'proportional' || this._properties.sizeMode.z == 'proportional')) {
                this._startSizePolling();
            } else {
                this._stopSizePolling();
            }
        }

        // observe size changes on the scene element.

    }, {
        key: '_startSizePolling',
        value: function _startSizePolling() {
            if (!this._elementManager) return;
            this._elementManager.element._startSizePolling();
            this._elementManager.element.on('parentsizechange', this._onElementParentSizeChange);
        }

        // Don't observe size changes on the scene element.

    }, {
        key: '_stopSizePolling',
        value: function _stopSizePolling() {
            if (!this._elementManager) return;
            this._elementManager.element.off('parentsizechange', this._onElementParentSizeChange);
            this._elementManager.element._stopSizePolling();
        }

        /** @override */

    }, {
        key: '_getParentSize',
        value: function _getParentSize() {
            return this._mounted ? this._elementParentSize : { x: 0, y: 0, z: 0 };
        }

        /**
         * @override
         */

    }, {
        key: '_makeElement',
        value: function _makeElement() {
            return new _scene2.default();
        }

        /**
         * Mount the scene into the given target.
         * Resolves the Scene's mountPromise, which can be use to do something once
         * the scene is mounted.
         *
         * @param {string|HTMLElement} [mountPoint=document.body] If a string selector is provided,
         * the mount point will be selected from the DOM. If an HTMLElement is
         * provided, that will be the mount point. If no mount point is provided,
         * the scene will be mounted into document.body.
         */

    }, {
        key: 'mount',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(mountPoint) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!(document.readyState == 'loading')) {
                                    _context.next = 3;
                                    break;
                                }

                                _context.next = 3;
                                return (0, _documentReady2.default)();

                            case 3:

                                // if no mountPoint was provided, just mount onto the <body> element.
                                if (mountPoint === undefined) mountPoint = document.body;

                                // if the user supplied a selector, mount there.
                                else if (typeof mountPoint === 'string') mountPoint = document.querySelector(mountPoint);

                                // if we have an actual mount point (the user may have supplied one)

                                if (mountPoint instanceof window.HTMLElement) {
                                    _context.next = 6;
                                    break;
                                }

                                throw new Error('Invalid mount point specified in Scene.mount() call. Specify a selector, or pass an actual HTMLElement.');

                            case 6:

                                if (this._mounted) this.unmount();

                                if (mountPoint !== this._elementManager.element.parentNode) mountPoint.appendChild(this._elementManager.element);

                                this._mounted = true;

                                if (this._mountPromise) this._resolveMountPromise();

                                this._elementManager.shouldRender();
                                this._startOrStopSizePolling();

                            case 12:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function mount(_x2) {
                return _ref.apply(this, arguments);
            }

            return mount;
        }()

        /**
         * Unmount the scene from it's mount point. Resets the Scene's
         * mountPromise.
         */

    }, {
        key: 'unmount',
        value: function unmount() {
            if (!this._mounted) return;

            this._elementManager.shouldNotRender();
            this._stopSizePolling();

            if (this._elementManager.element.parentNode) this._elementManager.element.parentNode.removeChild(this._elementManager.element);

            if (this._mountPromise) this._rejectMountPromise('mountcancel');
            this._resetMountPromise();
        }
    }, {
        key: 'sizeMode',
        set: function set(newValue) {
            (0, _set3.default)(Scene.prototype.__proto__ || (0, _getPrototypeOf2.default)(Scene.prototype), 'sizeMode', newValue, this);
            this._startOrStopSizePolling();
        },
        get: function get() {
            return (0, _get3.default)(Scene.prototype.__proto__ || (0, _getPrototypeOf2.default)(Scene.prototype), 'sizeMode', this);
        }
    }]);
    return Scene;
}(_ImperativeBase2.default.mixin(_Sizeable2.default));

(0, _Utility.makeAccessorsEnumerable)(Scene.prototype);

exports.default = Scene;
module.exports = exports['default'];
//# sourceMappingURL=Scene.js.map