{"version":3,"sources":["../src/motor/Observable.js"],"names":["instanceofSymbol","ObservableMixin","Observable","options","eventName","callback","_eventMap","has","set","get","push","Error","callbacks","indexOf","splice","length","delete","size","data","i","len","base","value","obj","call","currentProto","desc","hasOwnProperty","mixin","default"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,mBAAmB,sBAAO,kBAAP,CAAzB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,OAAQ;AAAA,QACtBC,UADsB;AAAA;;AAGxB,8BAA0B;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AAAA;AAAA,iJAChBA,OADgB;AAEzB;;AALuB;AAAA;AAAA,+BAOrBC,SAPqB,EAOVC,QAPU,EAOA;AACpB,oBAAI,CAAC,KAAKC,SAAV,EACI,KAAKA,SAAL,GAAiB,mBAAjB;;AAEJ,oBAAI,CAAC,KAAKA,SAAL,CAAeC,GAAf,CAAmBH,SAAnB,CAAL,EACI,KAAKE,SAAL,CAAeE,GAAf,CAAmBJ,SAAnB,EAA8B,EAA9B;;AAEJ,oBAAI,OAAOC,QAAP,IAAmB,UAAvB,EACI,KAAKC,SAAL,CAAeG,GAAf,CAAmBL,SAAnB,EAA8BM,IAA9B,CAAmCL,QAAnC,EADJ,KAGI,MAAM,IAAIM,KAAJ,CAAU,4DAAV,CAAN;AACP;AAlBuB;AAAA;AAAA,gCAoBpBP,SApBoB,EAoBTC,QApBS,EAoBC;AACrB,oBAAI,CAAC,KAAKC,SAAN,IAAmB,CAAC,KAAKA,SAAL,CAAeC,GAAf,CAAmBH,SAAnB,CAAxB,EAAuD;;AAEvD,oBAAMQ,YAAY,KAAKN,SAAL,CAAeG,GAAf,CAAmBL,SAAnB,CAAlB;;AAEA,oBAAIQ,UAAUC,OAAV,CAAkBR,QAAlB,MAAgC,CAAC,CAArC,EAAwC;;AAExCO,0BAAUE,MAAV,CAAiBF,UAAUC,OAAV,CAAkBR,QAAlB,CAAjB,EAA8C,CAA9C;;AAEA,oBAAIO,UAAUG,MAAV,KAAqB,CAAzB,EAA4B,KAAKT,SAAL,CAAeU,MAAf,CAAsBZ,SAAtB;;AAE5B,oBAAI,KAAKE,SAAL,CAAeW,IAAf,KAAwB,CAA5B,EAA+B,KAAKX,SAAL,GAAiB,IAAjB;AAClC;AAhCuB;AAAA;AAAA,yCAkCXF,SAlCW,EAkCAc,IAlCA,EAkCM;AAC1B,oBAAI,CAAC,KAAKZ,SAAN,IAAmB,CAAC,KAAKA,SAAL,CAAeC,GAAf,CAAmBH,SAAnB,CAAxB,EAAuD;;AAEvD,oBAAMQ,YAAY,KAAKN,SAAL,CAAeG,GAAf,CAAmBL,SAAnB,CAAlB;;AAEA,qBAAK,IAAIe,IAAE,CAAN,EAASC,MAAIR,UAAUG,MAA5B,EAAoCI,IAAEC,GAAtC,EAA2CD,KAAG,CAA9C,EAAiD;AAC7CP,8BAAUO,CAAV,EAAaD,IAAb;AACH;AACJ;AA1CuB;AAAA;AAAA,MACHG,IADG;;AA6C5B,kCAAsBnB,UAAtB,yBAAsD;AAClDoB,eAAO,eAASC,GAAT,EAAc;AACjB,gBAAI,SAASrB,UAAb,EAAyB,OAAO,8BAAsBA,UAAtB,yBAAsDsB,IAAtD,CAA2D,IAA3D,EAAiED,GAAjE,CAAP;;AAEzB,gBAAIE,eAAeF,GAAnB;;AAEA,mBAAME,YAAN,EAAoB;AAChB,oBAAMC,OAAO,wCAAgCD,YAAhC,EAA8C,aAA9C,CAAb;;AAEA,oBAAIC,QAAQA,KAAKJ,KAAb,IAAsBI,KAAKJ,KAAL,CAAWK,cAAX,CAA0B3B,gBAA1B,CAA1B,EACI,OAAO,IAAP;;AAEJyB,+BAAe,8BAAsBA,YAAtB,CAAf;AACH;;AAED,mBAAO,KAAP;AACH;AAhBiD,KAAtD;;AAmBAvB,eAAWF,gBAAX,IAA+B,IAA/B;;AAEA,WAAOE,UAAP;AACH,CAnED;;AAqEA,IAAMA,aAAaD;AAAA;AAAA;AAAA;;AAAA;AAAA,IAAnB;AACAC,WAAW0B,KAAX,GAAmB3B,eAAnB;;QAEsB4B,O,GAAd3B,U","file":"Observable.js","sourcesContent":["\nconst instanceofSymbol = Symbol('instanceofSymbol')\n\nconst ObservableMixin = base => {\n    class Observable extends base {\n\n        constructor(options = {}) {\n            super(options)\n        }\n\n        on(eventName, callback) {\n            if (!this._eventMap)\n                this._eventMap = new Map\n\n            if (!this._eventMap.has(eventName))\n                this._eventMap.set(eventName, [])\n\n            if (typeof callback == 'function')\n                this._eventMap.get(eventName).push(callback)\n            else\n                throw new Error('Expected a function in callback argument of Observable#on.')\n        }\n\n        off(eventName, callback) {\n            if (!this._eventMap || !this._eventMap.has(eventName)) return\n\n            const callbacks = this._eventMap.get(eventName)\n\n            if (callbacks.indexOf(callback) === -1) return\n\n            callbacks.splice(callbacks.indexOf(callback), 1)\n\n            if (callbacks.length === 0) this._eventMap.delete(eventName)\n\n            if (this._eventMap.size === 0) this._eventMap = null\n        }\n\n        triggerEvent(eventName, data) {\n            if (!this._eventMap || !this._eventMap.has(eventName)) return\n\n            const callbacks = this._eventMap.get(eventName)\n\n            for (let i=0, len=callbacks.length; i<len; i+=1) {\n                callbacks[i](data)\n            }\n        }\n    }\n\n    Object.defineProperty(Observable, Symbol.hasInstance, {\n        value: function(obj) {\n            if (this !== Observable) return Object.getPrototypeOf(Observable)[Symbol.hasInstance].call(this, obj)\n\n            let currentProto = obj\n\n            while(currentProto) {\n                const desc = Object.getOwnPropertyDescriptor(currentProto, \"constructor\")\n\n                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol))\n                    return true\n\n                currentProto = Object.getPrototypeOf(currentProto)\n            }\n\n            return false\n        }\n    })\n\n    Observable[instanceofSymbol] = true\n\n    return Observable\n}\n\nconst Observable = ObservableMixin(class{})\nObservable.mixin = ObservableMixin\n\nexport {Observable as default}\n"]}