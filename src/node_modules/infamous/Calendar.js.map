{"version":3,"sources":["src/Calendar.js"],"names":["Calendar","calendarSize","transition","size","flipSide","columnsRows","planes","_initializeTransitions","_createGrid","setTimeout","transitions","setInterval","bind","grid","options","i","plane","properties","background","push","setChildren","add","flipDiagonal","shortest","longest","forEach","item","index","column","row","flipOne","__targetRotation","rotation","get","set","Math","PI","children","transformFrom","rotateY","duration","curve","outExpo"],"mappings":"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","file":"Calendar.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Transform from 'famous/src/core/Transform';\nimport Transitionable from 'famous/src/transitions/Transitionable';\nimport Easing from 'famous/src/transitions/Easing';\n\nimport Molecule from './Molecule';\nimport Grid from './Grid';\nimport DoubleSidedPlane from './DoubleSidedPlane';\n\nimport forLength from 'army-knife/forLength';\n\n/**\n * A calendar widget for selecting a date (WIP).\n *\n * @class Calendar\n * @extends Molecule\n */\nexport class Calendar extends Molecule {\n\n    /**\n     * Create a new `Calendar` with the given Famo.us-style size array and\n     * transition. The transition is the type of animation used when switching\n     * between months.\n     *\n     * @constructor\n     * @param {Array} calendarSize A Famo.us-style width/height size array.\n     * @param {String} transition The name of the animation transition to use when switching months.\n     */\n    constructor(calendarSize, transition) {\n        super({size: calendarSize});\n\n        this.transition = transition;\n        this.flipSide = 0; // 0 means the initial front faces are showing, 1 means the initial back faces are showing.\n        this.columnsRows = [7,6];\n        this.planes = [];\n\n        this._initializeTransitions();\n        this._createGrid();\n\n        setTimeout( function() {\n            this.transitions[this.transition]();\n            setInterval(this.transitions[this.transition], 2000);\n        }.bind(this) , 800);\n    }\n\n    /**\n     * Creates the grid used for the layout of the day cells.\n     *\n     * @private\n     */\n    _createGrid() {\n        const grid = new Grid(this.columnsRows[0], this.columnsRows[1], this.options.size);\n\n        forLength(this.columnsRows[0]*this.columnsRows[1], function(i) {\n            const plane = new DoubleSidedPlane({\n                properties: {\n                    background: 'teal',\n                }\n            });\n            this.planes.push(plane);\n        }.bind(this));\n\n        grid.setChildren(this.planes);\n        this.add(grid);\n    }\n\n    /**\n     * Set up `this.transitions`, containing the available month-to-month\n     * transitions.\n     *\n     * @private\n     */\n    _initializeTransitions() {\n        this.transitions = {\n            flipDiagonal: function() {\n                this.flipSide = +!this.flipSide;\n                // determine which dimension of the grid is shorter and which is longer.\n                let shortest = 0;\n                let longest;\n                this.columnsRows.forEach(function(item, index) {\n                    if (item < this.columnsRows[shortest])\n                        shortest = index;\n                }.bind(this));\n                longest = +!shortest;\n\n                // for each diagonal of the grid, flip those cells.\n                forLength(this.columnsRows[0]+this.columnsRows[1]-1, function(column) {\n                    forLength(this.columnsRows[shortest], function(row) {\n                        if (column-row >= 0 && column-row < this.columnsRows[longest]) {\n                            const plane = this.planes[column-row + this.columnsRows[longest]*row];\n                            flipOne(plane, column);\n                        }\n                    }.bind(this));\n                }.bind(this));\n\n                function flipOne(item, column) {\n                    if (typeof item.__targetRotation == 'undefined') {\n                        item.__targetRotation = new Transitionable(0);\n                    }\n                    const rotation = new Transitionable(item.__targetRotation.get());\n                    item.__targetRotation.set(item.__targetRotation.get()+Math.PI);\n\n                    //item.get().transformFrom(function() {\n                        //return Transform.rotateY(rotation.get());\n                    //});\n                    item.children[0].get().transformFrom(function() {\n                        return Transform.rotateY(rotation.get());\n                    });\n                    item.children[1].get().transformFrom(function() {\n                        return Transform.rotateY(rotation.get()+Math.PI);\n                    });\n\n                    setTimeout(function() {\n                        rotation.set(item.__targetRotation.get(), { duration: 2000, curve: Easing.outExpo });\n                    }, 0+50*column);\n                }\n            }.bind(this)\n        };\n    }\n}\nexport default Calendar;\n"]}