{"version":3,"sources":["node_modules/pixify/node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/d-path-parser/parser.js","src/SVG.js","index.js"],"names":[],"mappingszKA;;;;;;;;;;;;AAEA;AACA;AACA,IAAM,eAAe,SAAS,aAAT,CAAuB,KAAvB,CAArB;;AAEA;;;;;;;;IAOqB;;;AACjB;;;AAGA,iBAAa,GAAb,EAAkB;AAAA;;AAAA,qDACd,yBADc;;AAEd,cAAK,IAAL,CAAU,GAAV;AACA,cAAK,WAAL,CAAiB,IAAI,QAArB;AAHc;AAIjB;;AAED;;;;;;;;;kBAOA,mCAAa,UAA2B;AAAA,YAAjB,OAAiB,uEAAP,KAAO;;AACpC,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACtC,gBAAM,QAAQ,SAAS,CAAT,CAAd;AACA,iBAAK,IAAL,CAAU,KAAV,EAAiB,OAAjB;AACA,oBAAQ,MAAM,QAAN,CAAe,WAAf,EAAR;AACI,qBAAK,MAAL;AAAa;AACT,6BAAK,OAAL,CAAa,KAAb;AACA;AACH;AACD,qBAAK,QAAL;AACA,qBAAK,SAAL;AAAgB;AACZ,6BAAK,SAAL,CAAe,KAAf;AACA;AACH;AACD,qBAAK,MAAL;AAAa;AACT,6BAAK,OAAL,CAAa,KAAb;AACA;AACH;AACD,qBAAK,SAAL;AAAgB;AACZ,6BAAK,OAAL,CAAa,KAAb,EAAoB,IAApB;AACA;AACH;AACD,qBAAK,UAAL;AAAiB;AACb,6BAAK,OAAL,CAAa,KAAb;AACA;AACH;AACD,qBAAK,GAAL;AAAU;AACN;AACH;AACD;AAAS;AACL;AACA,gCAAQ,IAAR,CAAa,sCAAb,EAAqD,MAAM,QAA3D;AACA;AACA;AACH;AA9BL;AAgCA,iBAAK,WAAL,CAAiB,MAAM,QAAvB,EAAiC,IAAjC;AACH;AACJ;;AAED;;;;;;;kBAKA,+BAAW,KAAK;AACZ,YAAI,IAAI,CAAJ,MAAW,GAAf,EAAoB;AACJ;AACZ,kBAAM,IAAI,MAAJ,CAAW,CAAX,CAAN;;AAEY;AACZ,gBAAI,IAAI,MAAJ,KAAe,CAAnB,EAAsB;AAClB,sBAAM,IAAI,OAAJ,CAAY,cAAZ,EAA4B,MAA5B,CAAN;AACH;AACD,mBAAO,SAAS,GAAT,EAAc,EAAd,CAAP;AACH,SATD,MASO;AACH,yBAAa,KAAb,CAAmB,KAAnB,GAA2B,GAA3B;AACA,gBAAM,MAAM,OAAO,gBAAP,CAAwB,SAAS,IAAT,CAAc,WAAd,CAA0B,YAA1B,CAAxB,EAAiE,KAAjE,CACP,KADO,CACD,MADC,EAEP,GAFO,CAEH,UAAU,CAAV,EAAa;AACd,uBAAO,SAAS,CAAT,EAAY,EAAZ,CAAP;AACH,aAJO,CAAZ;AAKA,qBAAS,IAAT,CAAc,WAAd,CAA0B,YAA1B;AACA,mBAAO,CAAC,IAAI,CAAJ,KAAU,EAAX,KAAkB,IAAI,CAAJ,KAAU,CAA5B,IAAiC,IAAI,CAAJ,CAAxC;AACH;AACJ;;AAED;;;;;;;;kBAMA,+BAAW,MAAM;;AAEb,YAAI,aAAa,GAAjB;AACA,YAAI,YAAY,GAAhB;AACA,YAAM,YAAY,KAAK,QAAL,KAAkB,QAApC;AACA,YAAI,SAAJ,EAAe;AACX,0BAAc,GAAd;AACA,yBAAa,GAAb;AACH;AACD,YAAM,QAAQ,WAAW,KAAK,YAAL,CAAkB,SAAlB,CAAX,CAAd;AACA,YAAM,SAAS,WAAW,KAAK,YAAL,CAAkB,UAAlB,CAAX,CAAf;AACA,YAAM,KAAK,KAAK,YAAL,CAAkB,IAAlB,CAAX;AACA,YAAM,KAAK,KAAK,YAAL,CAAkB,IAAlB,CAAX;AACA,YAAI,IAAI,CAAR;AACA,YAAI,IAAI,CAAR;AACA,YAAI,OAAO,IAAX,EAAiB;AACb,gBAAI,WAAW,EAAX,CAAJ;AACH;AACD,YAAI,OAAO,IAAX,EAAiB;AACb,gBAAI,WAAW,EAAX,CAAJ;AACH;AACD,YAAI,CAAC,SAAL,EAAgB;AACZ,iBAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB;AACH,SAFD,MAGK;AACD,iBAAK,WAAL,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAvB,EAA8B,MAA9B;AACH;AACJ;;AAED;;;;;;;;kBAMA,2BAAS,MAAM;AACX,YAAM,IAAI,WAAW,KAAK,YAAL,CAAkB,GAAlB,CAAX,CAAV;AACA,YAAM,IAAI,WAAW,KAAK,YAAL,CAAkB,GAAlB,CAAX,CAAV;AACA,YAAM,QAAQ,WAAW,KAAK,YAAL,CAAkB,OAAlB,CAAX,CAAd;AACA,YAAM,SAAS,WAAW,KAAK,YAAL,CAAkB,QAAlB,CAAX,CAAf;AACA,YAAM,KAAK,WAAW,KAAK,YAAL,CAAkB,IAAlB,CAAX,CAAX;AACA,YAAI,EAAJ,EAAQ;AACJ,iBAAK,eAAL,CACI,CADJ,EAEI,CAFJ,EAGI,KAHJ,EAII,MAJJ,EAKI,EALJ;AAOH,SARD,MAQO;AACH,iBAAK,QAAL,CACI,CADJ,EAEI,CAFJ,EAGI,KAHJ,EAII,MAJJ;AAMH;AACJ;;AAED;;;;;;;;;kBAOA,6BAAU,MAAM;AACZ,YAAM,QAAQ,KAAK,YAAL,CAAkB,OAAlB,CAAd;AACA,YAAM,SAAS;AACX,kBAAM,KAAK,YAAL,CAAkB,MAAlB,CADK;AAEX,qBAAS,KAAK,YAAL,CAAkB,SAAlB,CAFE;AAGX,oBAAQ,KAAK,YAAL,CAAkB,QAAlB,CAHG;AAIX,yBAAa,KAAK,YAAL,CAAkB,cAAlB;AAJF,SAAf;AAMA,YAAI,UAAU,IAAd,EAAoB;AAChB,kBAAM,KAAN,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,gBAAQ;AAAA,kCACP,KAAK,KAAL,CAAW,GAAX,CADO;AAAA,oBACtB,IADsB;AAAA,oBAChB,KADgB;;AAE7B,uBAAO,KAAK,IAAL,EAAP,IAAsB,MAAM,IAAN,EAAtB;AACH,aAHD;AAIA,gBAAI,OAAO,cAAP,CAAJ,EAA4B;AACxB,uBAAO,WAAP,GAAqB,OAAO,cAAP,CAArB;AACA,uBAAO,OAAO,cAAP,CAAP;AACH;AACJ;AACD,eAAO,MAAP;AACH;;AAED;;;;;;;;kBAMA,2BAAS,MAAM,OAAO;;AAElB,YAAM,SAAS,KAAK,YAAL,CAAkB,QAAlB,EACV,KADU,CACJ,OADI,EAEV,GAFU,CAEN;AAAA,mBAAK,SAAS,CAAT,CAAL;AAAA,SAFM,CAAf;;AAIA,aAAK,WAAL,CAAiB,MAAjB;;AAEA,YAAI,KAAJ,EAAW;AACP,iBAAK,SAAL;AACH;AACJ;;AAED;;;;;;;;;kBAOA,qBAAM,MAAM,SAAS;AAAA,wBAE4B,KAAK,QAAL,CAAc,IAAd,CAF5B;AAAA,YAEV,IAFU,aAEV,IAFU;AAAA,YAEJ,OAFI,aAEJ,OAFI;AAAA,YAEK,MAFL,aAEK,MAFL;AAAA,YAEa,WAFb,aAEa,WAFb;;AAGjB,YAAM,mBAAmB,WAAW,IAAX,GAAkB,CAAlB,GAAsB,CAA/C;AACA,YAAM,YAAY,gBAAgB,IAAhB,GAAuB,WAAW,WAAX,CAAvB,GAAiD,gBAAnE;AACA,YAAM,YAAY,WAAW,IAAX,GAAkB,KAAK,SAAL,CAAe,MAAf,CAAlB,GAA2C,KAAK,SAAlE;AACA,YAAI,IAAJ,EAAU;AACN,gBAAI,SAAS,MAAb,EAAqB;AACjB,qBAAK,SAAL,CAAe,CAAf,EAAkB,CAAlB;AACH,aAFD,MAEO;AACH,qBAAK,SAAL,CACI,KAAK,SAAL,CAAe,IAAf,CADJ,EAEI,YAAY,IAAZ,GAAmB,WAAW,OAAX,CAAnB,GAAyC,CAF7C;AAIH;AACJ,SATD,MASO,IAAI,CAAC,OAAL,EAAc;AACjB,iBAAK,SAAL,CAAe,CAAf;AACH;AACD,aAAK,SAAL,CACI,SADJ,EAEI,SAFJ;;AAKA;AACA,YAAI,KAAK,YAAL,CAAkB,iBAAlB,CAAJ,EAA0C;AACtC,oBAAQ,IAAR,CAAa,yDAAb;AACH;AACD,YAAI,KAAK,YAAL,CAAkB,gBAAlB,CAAJ,EAAyC;AACrC,oBAAQ,IAAR,CAAa,wDAAb;AACH;AACD,YAAI,KAAK,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AAChC,oBAAQ,IAAR,CAAa,mDAAb;AACH;AACD;AACH;;AAED;;;;;;;kBAKA,2BAAS,MAAM;AACX,YAAM,IAAI,KAAK,YAAL,CAAkB,GAAlB,CAAV;AACA,YAAI,UAAJ;AAAA,YAAO,UAAP;AACA,YAAM,WAAW,2BAAW,CAAX,CAAjB;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACtC,gBAAM,UAAU,SAAS,CAAT,CAAhB;AACA,oBAAQ,QAAQ,IAAhB;AACI,qBAAK,GAAL;AAAU;AACN,6BAAK,MAAL,CACI,KAAK,QAAQ,GAAR,CAAY,CADrB,EAEI,KAAK,QAAQ,GAAR,CAAY,CAFrB;AAIA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,6BAAK,MAAL,CACI,IAAI,QAAQ,GAAR,CAAY,CADpB,EAEI,IAAI,QAAQ,GAAR,CAAY,CAFpB;AAIA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,6BAAK,MAAL,CAAY,IAAI,QAAQ,KAAxB,EAA+B,CAA/B;AACA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,6BAAK,MAAL,CAAY,KAAK,QAAQ,KAAzB,EAAgC,CAAhC;AACA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,6BAAK,MAAL,CAAY,CAAZ,EAAe,IAAI,QAAQ,KAA3B;AACA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,6BAAK,MAAL,CAAY,CAAZ,EAAe,KAAK,QAAQ,KAA5B;AACA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,6BAAK,SAAL;AACA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,6BAAK,MAAL,CACI,IAAI,QAAQ,GAAR,CAAY,CADpB,EAEI,IAAI,QAAQ,GAAR,CAAY,CAFpB;AAIA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,6BAAK,MAAL,CACI,KAAK,QAAQ,GAAR,CAAY,CADrB,EAEI,KAAK,QAAQ,GAAR,CAAY,CAFrB;AAIA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,4BAAM,QAAQ,CAAd;AACA,4BAAM,QAAQ,CAAd;AACA,6BAAK,aAAL,CACI,QAAQ,QAAQ,GAAR,CAAY,CADxB,EAEI,QAAQ,QAAQ,GAAR,CAAY,CAFxB,EAGI,QAAQ,QAAQ,GAAR,CAAY,CAHxB,EAII,QAAQ,QAAQ,GAAR,CAAY,CAJxB,EAKI,IAAI,QAAQ,GAAR,CAAY,CALpB,EAMI,IAAI,QAAQ,GAAR,CAAY,CANpB;AAQA;AACH;AACD,qBAAK,GAAL;AAAU;AACN,4BAAM,SAAQ,CAAd;AACA,4BAAM,SAAQ,CAAd;AACA,6BAAK,aAAL,CACI,SAAQ,QAAQ,GAAR,CAAY,CADxB,EAEI,SAAQ,QAAQ,GAAR,CAAY,CAFxB,EAGI,SAAQ,QAAQ,GAAR,CAAY,CAHxB,EAII,SAAQ,QAAQ,GAAR,CAAY,CAJxB,EAKI,KAAK,QAAQ,GAAR,CAAY,CALrB,EAMI,KAAK,QAAQ,GAAR,CAAY,CANrB;AAQA;AACH;AACD,qBAAK,GAAL;AACA,qBAAK,GAAL;AAAU;AACN,4BAAM,UAAQ,CAAd;AACA,4BAAM,UAAQ,CAAd;AACA,6BAAK,gBAAL,CACI,UAAQ,QAAQ,EAAR,CAAW,CADvB,EAEI,UAAQ,QAAQ,EAAR,CAAW,CAFvB,EAGI,KAAK,QAAQ,GAAR,CAAY,CAHrB,EAII,KAAK,QAAQ,GAAR,CAAY,CAJrB;AAMA;AACH;AACD,qBAAK,GAAL;AACA,qBAAK,GAAL;AAAU;AACN,4BAAM,UAAQ,CAAd;AACA,4BAAM,UAAQ,CAAd;AACA,6BAAK,gBAAL,CACI,UAAQ,QAAQ,EAAR,CAAW,CADvB,EAEI,UAAQ,QAAQ,EAAR,CAAW,CAFvB,EAGI,IAAI,QAAQ,GAAR,CAAY,CAHpB,EAII,IAAI,QAAQ,GAAR,CAAY,CAJpB;AAMA;AACH;AACD;AAAS;AACL;AACA,gCAAQ,IAAR,CAAa,wCAAb,EAAuD,QAAQ,IAA/D,EAAqE,OAArE;AACA;AACA;AACH;AAxGL;AA0GH;AACJ;;;EArW4B,KAAK;;kBAAjB;;;;;;;ACbrB;;;;;;AAEA;AACA,IAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAC7B,UAAM,mBAAN;AACH;AACD;AAHA,KAIK,IAAI,CAAC,KAAK,GAAV,EAAe;AAChB;AACA,eAAO,cAAP,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC;AAC/B,eAD+B,iBACzB;AACF;AACH;AAH8B,SAAnC;AAKH","file":"pixi-svg.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * d-path-parser - v1.0.0\n * by Massimo Artizzu (MaxArt2501)\n *\n * https://github.com/MaxArt2501/d-path-parser\n *\n * Licensed under the MIT License\n * See LICENSE for details\n */\n\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === \"object\") {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.dPathParse = factory();\n    }\n})(this, function() {\n\"use strict\";\n\nreturn function parse(d) {\n    var re = {\n        command: /\\s*([achlmqstvz])/gi,\n        number: /\\s*([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/gi,\n        comma: /\\s*(?:(,)|\\s)/g,\n        flag: /\\s*([01])/g\n    };\n    var matchers = {\n        \"number\": function(must) {\n            return +get(\"number\", must);\n        },\n        \"coordinate pair\": function(must) {\n            var x = get(\"number\", must);\n            if (x === null && !must) return null;\n            get(\"comma\");\n            var y = get(\"number\", true);\n            return { x: +x, y: +y };\n        },\n        \"arc definition\": function(must) {\n            var radii = matchers[\"coordinate pair\"](must);\n            if (!radii && !must) return null;\n            get(\"comma\");\n            var rotation = +get(\"number\", true);\n            get(\"comma\", true);\n            var large = !!+get(\"flag\", true);\n            get(\"comma\");\n            var clockwise = !!+get(\"flag\", true);\n            get(\"comma\");\n            var end = matchers[\"coordinate pair\"](true);\n            return {\n                radii: radii,\n                rotation: rotation,\n                large: large,\n                clockwise: clockwise,\n                end: end\n            };\n        }\n    }\n    var index = 0;\n    var commands = [];\n\n    while (index < d.length) {\n        var cmd = get(\"command\");\n        var upcmd = cmd.toUpperCase();\n        var relative = cmd !== upcmd;\n        var sequence;\n        switch (upcmd) {\n            case \"M\":\n                sequence = getSequence(\"coordinate pair\").map(function(coords, i) {\n                    if (i === 1) cmd = relative ? \"l\" : \"L\";\n                    return makeCommand({ end: coords });\n                });\n                break;\n            case \"L\":\n            case \"T\":\n                sequence = getSequence(\"coordinate pair\").map(function(coords) {\n                    return makeCommand({ end: coords });\n                });\n                break;\n            case \"C\":\n                sequence = getSequence(\"coordinate pair\");\n                if (sequence.length % 3)\n                    throw Error(\"Expected coordinate pair triplet at position \" + index);\n\n                sequence = sequence.reduce(function(seq, coords, i) {\n                    var rest = i % 3;\n                    if (!rest) {\n                        seq.push(makeCommand({ cp1: coords }));\n                    } else {\n                        var last = seq[seq.length - 1];\n                        last[rest === 1 ? \"cp2\" : \"end\"] = coords;\n                    }\n                    return seq;\n                }, []);\n\n                break;\n            case \"Q\":\n            case \"S\":\n                sequence = getSequence(\"coordinate pair\");\n                if (sequence.length & 1)\n                    throw Error(\"Expected coordinate pair couple at position \" + index);\n\n                sequence = sequence.reduce(function(seq, coords, i) {\n                    var odd = i & 1;\n                    if (!odd) {\n                        seq.push(makeCommand({ cp: coords }));\n                    } else {\n                        var last = seq[seq.length - 1];\n                        last.end = coords;\n                    }\n                    return seq;\n                }, []);\n\n                break;\n            case \"H\":\n            case \"V\":\n                sequence = getSequence(\"number\").map(function(value) {\n                    return makeCommand({ value: value });\n                });\n                break;\n            case \"A\":\n                sequence = getSequence(\"arc definition\").map(makeCommand);\n                break;\n            case \"Z\":\n                sequence = [ { code: \"Z\" } ];\n                break;\n        }\n        commands.push.apply(commands, sequence);\n    }\n\n    return commands;\n\n    function makeCommand(obj) {\n        obj.code = cmd;\n        obj.relative = relative;\n\n        return obj;\n    }\n    function get(what, must) {\n        re[what].lastIndex = index;\n        var res = re[what].exec(d);\n        if (!res || res.index !== index) {\n            if (!must) return null;\n            throw Error(\"Expected \" + what + \" at position \" + index);\n        }\n\n        index = re[what].lastIndex;\n\n        return res[1];\n    }\n    function getSequence(what) {\n        var sequence = [];\n        var matched;\n        var must = true;\n        while (matched = matchers[what](must)) {\n            sequence.push(matched);\n            must = !!get(\"comma\");\n        }\n\n        return sequence;\n    }\n};\n});\n","import dPathParse from 'd-path-parser';\n\n// <div> element to measure string colors like \"black\"\n// and convert to hex colors\nconst measureColor = document.createElement('div');\n\n/**\n * Scalable Graphics drawn from SVG image document.\n * @class SVG\n * @extends PIXI.Graphics\n * @memberof PIXI\n * @param {SVGSVGElement} svg - SVG Element `<svg>`\n */\nexport default class SVG extends PIXI.Graphics {\n    /**\n     * Constructor\n     */\n    constructor (svg) {\n        super();\n        this.fill(svg);\n        this.svgChildren(svg.children);\n    }\n\n    /**\n     * Create a PIXI Graphic from SVG element\n     * @private\n     * @method PIXI.SVG#svgChildren\n     * @param {Array<*>} children - Collection of SVG nodes\n     * @param {Boolean} [inherit=false] Whether to inherit fill settings.\n     */\n    svgChildren (children, inherit = false) {\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            this.fill(child, inherit);\n            switch (child.nodeName.toLowerCase()) {\n                case 'path': {\n                    this.svgPath(child);\n                    break;\n                }\n                case 'circle':\n                case 'ellipse': {\n                    this.svgCircle(child);\n                    break;\n                }\n                case 'rect': {\n                    this.svgRect(child);\n                    break;\n                }\n                case 'polygon': {\n                    this.svgPoly(child, true);\n                    break;\n                }\n                case 'polyline': {\n                    this.svgPoly(child);\n                    break;\n                }\n                case 'g': {\n                    break;\n                }\n                default: {\n                    // @if DEBUG\n                    console.info('[SVGUtils] <%s> elements unsupported', child.nodeName);\n                    // @endif\n                    break;\n                }\n            }\n            this.svgChildren(child.children, true);\n        }\n    }\n\n    /**\n     * Convert the Hexidecimal string (e.g., \"#fff\") to uint\n     * @private\n     * @method PIXI.SVG#hexToUint\n     */\n    hexToUint (hex) {\n        if (hex[0] === '#') {\n                        // Remove the hash\n            hex = hex.substr(1);\n\n                        // Convert shortcolors fc9 to ffcc99\n            if (hex.length === 3) {\n                hex = hex.replace(/([a-f0-9])/ig, '$1$1');\n            }\n            return parseInt(hex, 16);\n        } else {\n            measureColor.style.color = hex;\n            const rgb = window.getComputedStyle(document.body.appendChild(measureColor)).color\n                .match(/\\d+/g)\n                .map(function (a) {\n                    return parseInt(a, 10);\n                });\n            document.body.removeChild(measureColor);\n            return (rgb[0] << 16) + (rgb[1] << 8) + rgb[2];\n        }\n    }\n\n    /**\n     * Render a <ellipse> element or <circle> element\n     * @private\n     * @method PIXI.SVG#internalEllipse\n     * @param {SVGCircleElement} node\n     */\n    svgCircle (node) {\n\n        let heightProp = 'r';\n        let widthProp = 'r';\n        const isEllipse = node.nodeName === 'elipse';\n        if (isEllipse) {\n            heightProp += 'x';\n            widthProp += 'y';\n        }\n        const width = parseFloat(node.getAttribute(widthProp));\n        const height = parseFloat(node.getAttribute(heightProp));\n        const cx = node.getAttribute('cx');\n        const cy = node.getAttribute('cy');\n        let x = 0;\n        let y = 0;\n        if (cx !== null) {\n            x = parseFloat(cx);\n        }\n        if (cy !== null) {\n            y = parseFloat(cy);\n        }\n        if (!isEllipse) {\n            this.drawCircle(x, y, width);\n        }\n        else {\n            this.drawEllipse(x, y, width, height);\n        }\n    }\n\n    /**\n     * Render a <rect> element\n     * @private\n     * @method PIXI.SVG#svgRect\n     * @param {SVGRectElement} node\n     */\n    svgRect (node) {\n        const x = parseFloat(node.getAttribute('x'));\n        const y = parseFloat(node.getAttribute('y'));\n        const width = parseFloat(node.getAttribute('width'));\n        const height = parseFloat(node.getAttribute('height'));\n        const rx = parseFloat(node.getAttribute('rx'));\n        if (rx) {\n            this.drawRoundedRect(\n                x,\n                y,\n                width,\n                height,\n                rx\n            );\n        } else {\n            this.drawRect(\n                x,\n                y,\n                width,\n                height\n            );\n        }\n    }\n\n    /**\n     * Get the style property and parse options.\n     * @private\n     * @method PIXI.SVG#svgStyle\n     * @param {SVGElement} node\n     * @return {Object} Style attributes\n     */\n    svgStyle (node) {\n        const style = node.getAttribute('style');\n        const result = {\n            fill: node.getAttribute('fill'),\n            opacity: node.getAttribute('opacity'),\n            stroke: node.getAttribute('stroke'),\n            strokeWidth: node.getAttribute('stroke-width')\n        };\n        if (style !== null) {\n            style.split(';').forEach(prop => {\n                const [name, value] = prop.split(':');\n                result[name.trim()] = value.trim();\n            });\n            if (result['stroke-width']) {\n                result.strokeWidth = result['stroke-width'];\n                delete result['stroke-width'];\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Render a polyline element.\n     * @private\n     * @method PIXI.SVG#svgPoly\n     * @param {SVGPolylineElement} node\n     */\n    svgPoly (node, close) {\n\n        const points = node.getAttribute('points')\n            .split(/[ ,]/g)\n            .map(p => parseInt(p));\n\n        this.drawPolygon(points);\n\n        if (close) {\n            this.closePath();\n        }\n    }\n\n    /**\n     * Set the fill and stroke style.\n     * @private\n     * @method PIXI.SVG#fill\n     * @param {SVGElement} node\n     * @param {Boolean} inherit\n     */\n    fill (node, inherit) {\n\n        const {fill, opacity, stroke, strokeWidth} = this.svgStyle(node);\n        const defaultLineWidth = stroke !== null ? 1 : 0;\n        const lineWidth = strokeWidth !== null ? parseFloat(strokeWidth) : defaultLineWidth;\n        const lineColor = stroke !== null ? this.hexToUint(stroke) : this.lineColor;\n        if (fill) {\n            if (fill === 'none') {\n                this.beginFill(0, 0);\n            } else {\n                this.beginFill(\n                    this.hexToUint(fill),\n                    opacity !== null ? parseFloat(opacity) : 1\n                );\n            }\n        } else if (!inherit) {\n            this.beginFill(0);\n        }\n        this.lineStyle(\n            lineWidth,\n            lineColor\n        );\n\n        // @if DEBUG\n        if (node.getAttribute('stroke-linejoin')) {\n            console.info('[SVGUtils] \"stroke-linejoin\" attribute is not supported');\n        }\n        if (node.getAttribute('stroke-linecap')) {\n            console.info('[SVGUtils] \"stroke-linecap\" attribute is not supported');\n        }\n        if (node.getAttribute('fill-rule')) {\n            console.info('[SVGUtils] \"fill-rule\" attribute is not supported');\n        }\n        // @endif\n    }\n\n    /**\n     * Render a <path> d element\n     * @method PIXI.SVG#svgPath\n     * @param {SVGPathElement} node\n     */\n    svgPath (node) {\n        const d = node.getAttribute('d');\n        let x, y;\n        const commands = dPathParse(d);\n        for (var i = 0; i < commands.length; i++) {\n            const command = commands[i];\n            switch (command.code) {\n                case 'm': {\n                    this.moveTo(\n                        x += command.end.x,\n                        y += command.end.y\n                    );\n                    break;\n                }\n                case 'M': {\n                    this.moveTo(\n                        x = command.end.x,\n                        y = command.end.y\n                    );\n                    break;\n                }\n                case 'H': {\n                    this.lineTo(x = command.value, y);\n                    break;\n                }\n                case 'h': {\n                    this.lineTo(x += command.value, y);\n                    break;\n                }\n                case 'V': {\n                    this.lineTo(x, y = command.value);\n                    break;\n                }\n                case 'v': {\n                    this.lineTo(x, y += command.value);\n                    break;\n                }\n                case 'Z': {\n                    this.closePath();\n                    break;\n                }\n                case 'L': {\n                    this.lineTo(\n                        x = command.end.x,\n                        y = command.end.y\n                    );\n                    break;\n                }\n                case 'l': {\n                    this.lineTo(\n                        x += command.end.x,\n                        y += command.end.y\n                    );\n                    break;\n                }\n                case 'C': {\n                    const currX = x;\n                    const currY = y;\n                    this.bezierCurveTo(\n                        currX + command.cp1.x,\n                        currY + command.cp1.y,\n                        currX + command.cp2.x,\n                        currY + command.cp2.y,\n                        x = command.end.x,\n                        y = command.end.y\n                    );\n                    break;\n                }\n                case 'c': {\n                    const currX = x;\n                    const currY = y;\n                    this.bezierCurveTo(\n                        currX + command.cp1.x,\n                        currY + command.cp1.y,\n                        currX + command.cp2.x,\n                        currY + command.cp2.y,\n                        x += command.end.x,\n                        y += command.end.y\n                    );\n                    break;\n                }\n                case 's':\n                case 'q': {\n                    const currX = x;\n                    const currY = y;\n                    this.quadraticCurveTo(\n                        currX + command.cp.x,\n                        currY + command.cp.y,\n                        x += command.end.x,\n                        y += command.end.y\n                    );\n                    break;\n                }\n                case 'S':\n                case 'Q': {\n                    const currX = x;\n                    const currY = y;\n                    this.quadraticCurveTo(\n                        currX + command.cp.x,\n                        currY + command.cp.y,\n                        x = command.end.x,\n                        y = command.end.y\n                    );\n                    break;\n                }\n                default: {\n                    // @if DEBUG\n                    console.info('[SVGUtils] Draw command not supported:', command.code, command);\n                    // @endif\n                    break;\n                }\n            }\n        }\n    }\n}\n","import SVG from './SVG';\n\n// Check that PIXI exists\nif (typeof PIXI === 'undefined') {\n    throw 'pixi.js not found';\n}\n// Don't define twice\nelse if (!PIXI.SVG) {\n    // Assign to global pixi object\n    Object.defineProperty(PIXI, 'SVG', {\n        get() {\n            return SVG;\n        }\n    });\n}\n\nexport default SVG;\n"],"sourceRoot":"."}