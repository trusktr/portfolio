{"version":3,"sources":["src/utilities.js"],"names":[],"mappings":"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","file":"utilities.js","sourcesContent":["\n// A reusable array, to avoid allocating new arrays during multiplication.\n// in column-major order:\nconst scratch = [\n    /*m11*/0, /*m12*/0, /*m13*/0, /*m14*/0,\n    /*m21*/0, /*m22*/0, /*m23*/0, /*m24*/0,\n    /*m31*/0, /*m32*/0, /*m33*/0, /*m34*/0,\n    /*m41*/0, /*m42*/0, /*m43*/0, /*m44*/0,\n]\n\nexport\nfunction multiplyAndApply(A, B, target) {\n\n    //XXX: Are the following calculations faster hard coded (current), or as a loop?\n\n    scratch[0]  = (A.m11 * B.m11) + (A.m21 * B.m12) + (A.m31 * B.m13) + (A.m41 * B.m14)\n    scratch[4]  = (A.m11 * B.m21) + (A.m21 * B.m22) + (A.m31 * B.m23) + (A.m41 * B.m24)\n    scratch[8]  = (A.m11 * B.m31) + (A.m21 * B.m32) + (A.m31 * B.m33) + (A.m41 * B.m34)\n    scratch[12] = (A.m11 * B.m41) + (A.m21 * B.m42) + (A.m31 * B.m43) + (A.m41 * B.m44)\n\n    scratch[1]  = (A.m12 * B.m11) + (A.m22 * B.m12) + (A.m32 * B.m13) + (A.m42 * B.m14)\n    scratch[5]  = (A.m12 * B.m21) + (A.m22 * B.m22) + (A.m32 * B.m23) + (A.m42 * B.m24)\n    scratch[9]  = (A.m12 * B.m31) + (A.m22 * B.m32) + (A.m32 * B.m33) + (A.m42 * B.m34)\n    scratch[13] = (A.m12 * B.m41) + (A.m22 * B.m42) + (A.m32 * B.m43) + (A.m42 * B.m44)\n\n    scratch[2]  = (A.m13 * B.m11) + (A.m23 * B.m12) + (A.m33 * B.m13) + (A.m43 * B.m14)\n    scratch[6]  = (A.m13 * B.m21) + (A.m23 * B.m22) + (A.m33 * B.m23) + (A.m43 * B.m24)\n    scratch[10] = (A.m13 * B.m31) + (A.m23 * B.m32) + (A.m33 * B.m33) + (A.m43 * B.m34)\n    scratch[14] = (A.m13 * B.m41) + (A.m23 * B.m42) + (A.m33 * B.m43) + (A.m43 * B.m44)\n\n    scratch[3]  = (A.m14 * B.m11) + (A.m24 * B.m12) + (A.m34 * B.m13) + (A.m44 * B.m14)\n    scratch[7]  = (A.m14 * B.m21) + (A.m24 * B.m22) + (A.m34 * B.m23) + (A.m44 * B.m24)\n    scratch[11] = (A.m14 * B.m31) + (A.m24 * B.m32) + (A.m34 * B.m33) + (A.m44 * B.m34)\n    scratch[15] = (A.m14 * B.m41) + (A.m24 * B.m42) + (A.m34 * B.m43) + (A.m44 * B.m44)\n\n    applyArrayValuesToDOMMatrix(scratch, target)\n}\n\nexport\nfunction applyArrayValuesToDOMMatrix(array, matrix) {\n    const length = array.length\n\n    if (length === 6) {\n        matrix.m11 = array[0]\n        matrix.m12 = array[1]\n        matrix.m21 = array[2]\n        matrix.m22 = array[3]\n        matrix.m41 = array[4]\n        matrix.m42 = array[5]\n    }\n    else if (length === 16) {\n        matrix.m11 = array[0]\n        matrix.m12 = array[1]\n        matrix.m13 = array[2]\n        matrix.m14 = array[3]\n        matrix.m21 = array[4]\n        matrix.m22 = array[5]\n        matrix.m23 = array[6]\n        matrix.m24 = array[7]\n        matrix.m31 = array[8]\n        matrix.m32 = array[9]\n        matrix.m33 = array[10]\n        matrix.m34 = array[11]\n        matrix.m41 = array[12]\n        matrix.m42 = array[13]\n        matrix.m43 = array[14]\n        matrix.m44 = array[15]\n    }\n}\n\nexport\nfunction rotateAxisAngleArray(x, y, z, angle) {\n    const {sin, cos, pow} = Math\n\n    const halfAngle = degreesToRadians(angle/2)\n\n    // TODO: should we provide a 6-item array here to signify 2D when the\n    // rotation is about the Z axis (for example when calling rotateSelf)?\n    // TODO: Performance can be improved by first detecting when x, y, or z of\n    // the axis are zero or 1, and using a pre-simplified version of the\n    // folowing math based on that condition.\n    // TODO: Performance can be improved by using different equations (use trig\n    // identities to find alternate formulas).\n    return [\n        1-2*(y*y + z*z)*pow(sin(halfAngle), 2),                           2*(x*y*pow(sin(halfAngle), 2) + z*sin(halfAngle)*cos(halfAngle)), 2*(x*z*pow(sin(halfAngle), 2) - y*sin(halfAngle)*cos(halfAngle)), 0,\n        2*(x*y*pow(sin(halfAngle), 2) - z*sin(halfAngle)*cos(halfAngle)), 1-2*(x*x + z*z)*pow(sin(halfAngle), 2),                           2*(y*z*pow(sin(halfAngle), 2) + x*sin(halfAngle)*cos(halfAngle)), 0,\n        2*(x*z*pow(sin(halfAngle), 2) + y*sin(halfAngle)*cos(halfAngle)), 2*(y*z*pow(sin(halfAngle), 2) - x*sin(halfAngle)*cos(halfAngle)), 1-2*(x*x + y*y)*pow(sin(halfAngle), 2),                           0,\n        0,                                                                0,                                                                0,                                                                1,\n    ]\n}\n\nfunction degreesToRadians(degrees) {\n    return Math.PI/180 * degrees\n}\n"]}