'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var privatesMap = undefined;
var _ = function _(o) {
    if (!privatesMap) {
        privatesMap = new WeakMap();
        var privates = {};
        privatesMap.set(o, privates);
        return privates;
    } else {
        var privates = privatesMap.get(o);

        if (privates === undefined) {
            privates = {};
            privatesMap.set(o, privates);
        }

        return privates;
    }
};

var DOMPointReadOnly = (function () {
    function DOMPointReadOnly(x, y, z, w) {
        _classCallCheck(this, DOMPointReadOnly);

        if (arguments.length === 1) {
            if (!isDOMPointInit(x)) throw new TypeError('Expected an object with x, y, z, and w properties');

            _(this).x = x.x;
            _(this).y = x.y;
            _(this).z = x.z;
            _(this).w = x.w;
        } else if (arguments.length === 4) {
            _(this).x = x || 0;
            _(this).y = y || 0;
            _(this).z = z || 0;
            _(this).w = w || 0;
        } else {
            throw new TypeError('Expected 1 or 4 arguments');
        }
    }

    _createClass(DOMPointReadOnly, [{
        key: 'matrixTransform',
        value: function matrixTransform(matrix) {
            var result = new this.constructor(this);
            // TODO
            //const x
            //const y
            //const z
            //const w

            return result;
        }
    }, {
        key: 'x',
        get: function get() {
            return _(this).x;
        }
    }, {
        key: 'y',
        get: function get() {
            return _(this).y;
        }
    }, {
        key: 'z',
        get: function get() {
            return _(this).z;
        }
    }, {
        key: 'w',
        get: function get() {
            return _(this).w;
        }
    }], [{
        key: 'fromPoint',
        value: function fromPoint(other) {
            return new this(other);
        }
    }]);

    return DOMPointReadOnly;
})();

exports.DOMPointReadOnly = DOMPointReadOnly;

var DOMPoint = (function (_DOMPointReadOnly) {
    _inherits(DOMPoint, _DOMPointReadOnly);

    function DOMPoint() {
        _classCallCheck(this, DOMPoint);

        _get(Object.getPrototypeOf(DOMPoint.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(DOMPoint, [{
        key: 'x',
        set: function set(value) {
            _(this).x = value;
        }
    }, {
        key: 'y',
        set: function set(value) {
            _(this).y = value;
        }
    }, {
        key: 'z',
        set: function set(value) {
            _(this).z = value;
        }
    }, {
        key: 'w',
        set: function set(value) {
            _(this).w = value;
        }
    }]);

    return DOMPoint;
})(DOMPointReadOnly);

exports.DOMPoint = DOMPoint;
exports['default'] = DOMPoint;

function isDOMPointInit(o) {
    if (typeof o != 'object') return false;

    if ('x' in o && 'y' in o && 'z' in o && 'w' in o) return true;

    return false;
}
//# sourceMappingURL=DOMPoint.js.map