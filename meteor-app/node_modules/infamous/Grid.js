'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Grid = undefined;

var _Modifier = require('famous/src/core/Modifier');

var _Modifier2 = _interopRequireDefault(_Modifier);

var _Transform = require('famous/src/core/Transform');

var _Transform2 = _interopRequireDefault(_Transform);

var _Molecule = require('./Molecule');

var _Molecule2 = _interopRequireDefault(_Molecule);

var _forLength = require('army-knife/forLength');

var _forLength2 = _interopRequireDefault(_forLength);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A scenegraph tree with a variable number of leaf node Modifiers (the grid
 * cells) that are arranged in a grid. Add any [famous/src/core/RenderNode](#famous/src/core/RenderNode)-compatible
 * item to each leafnode of the grid.
 *
 * TODO: Use Molecule instead of Modifier for the grid cells.
 * TODO: Add an options parameter, that the Molecule constructor will handle.
 *
 * @class Grid
 * @extends Molecule
 */
/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

var Grid = exports.Grid = function (Molecule) {
    function Grid(columns, rows, size) {
        Molecule.call(this, { size: size });

        this.columns = columns;
        this.rows = rows;
        this.cellNodes = [];

        if (typeof this.options.size === 'undefined') {
            this.setOptions({ size: [undefined, undefined] });
        }

        (0, _forLength2.default)(this.columns * this.rows, this._createGridCell.bind(this));
    }

    if (Molecule) Grid.__proto__ = Molecule;
    Grid.prototype = Object.create(Molecule && Molecule.prototype);
    Grid.prototype.constructor = Grid;

    /**
     * Creates a grid cell at the given index.
     *
     * @private
     * @param {Number} index The integer index of the grid cell.
     */
    Grid.prototype._createGridCell = function _createGridCell(index) {
        const column = index % this.columns;
        const row = Math.floor(index / this.columns);

        let cellSize = null;
        if (typeof this.options.size[0] != 'undefined' && typeof this.options.size[1] != 'undefined') {
            cellSize = [];
            cellSize[0] = this.options.size[0] / this.columns;
            cellSize[1] = this.options.size[1] / this.rows;
        }

        const mod = new _Modifier2.default({
            align: [0, 0],
            origin: [0, 0],
            size: cellSize ? [cellSize[0], cellSize[1]] : [undefined, undefined],
            transform: _Transform2.default.translate(column * cellSize[0], row * cellSize[1], 0)
        });
        const mod2 = new _Modifier2.default({
            //transform: Transform.rotateY(Math.PI/10),
            align: [0.5, 0.5],
            origin: [0.5, 0.5]
        });
        // FIXME: ^^^ Why do I need an extra Modifier to align stuff in the middle of the grid cells?????
        this.cellNodes.push(this.add(mod).add(mod2));
    };

    /**
     * Sets the items to be layed out in the grid.
     *
     * @param {Array} children An array of [famous/src/core/RenderNode](#famous/src/core/RenderNode)-compatible items.
     */
    Grid.prototype.setChildren = function setChildren(children) {
        (0, _forLength2.default)(this.columns * this.rows, function (index) {
            //this.cellNodes[index].set(null); // TODO: how do we erase previous children?
            this.cellNodes[index].add(children[index]);
        }.bind(this));
        return this;
    };

    return Grid;
}(_Molecule2.default);
exports.default = Grid;
//# sourceMappingURL=Grid.js.map