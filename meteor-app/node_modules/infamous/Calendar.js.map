{"version":3,"file":"Calendar.js","sources":["../src/Calendar.js"],"sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Transform from 'famous/src/core/Transform';\nimport Transitionable from 'famous/src/transitions/Transitionable';\nimport Easing from 'famous/src/transitions/Easing';\n\nimport Molecule from './Molecule';\nimport Grid from './Grid';\nimport DoubleSidedPlane from './DoubleSidedPlane';\n\nimport forLength from 'army-knife/forLength';\n\n/**\n * A calendar widget for selecting a date (WIP).\n *\n * @class Calendar\n * @extends Molecule\n */\nexport class Calendar extends Molecule {\n\n    /**\n     * Create a new `Calendar` with the given Famo.us-style size array and\n     * transition. The transition is the type of animation used when switching\n     * between months.\n     *\n     * @constructor\n     * @param {Array} calendarSize A Famo.us-style width/height size array.\n     * @param {String} transition The name of the animation transition to use when switching months.\n     */\n    constructor(calendarSize, transition) {\n        super({size: calendarSize});\n\n        this.transition = transition;\n        this.flipSide = 0; // 0 means the initial front faces are showing, 1 means the initial back faces are showing.\n        this.columnsRows = [7,6];\n        this.planes = [];\n\n        this._initializeTransitions();\n        this._createGrid();\n\n        setTimeout( function() {\n            this.transitions[this.transition]();\n            setInterval(this.transitions[this.transition], 2000);\n        }.bind(this) , 800);\n    }\n\n    /**\n     * Creates the grid used for the layout of the day cells.\n     *\n     * @private\n     */\n    _createGrid() {\n        const grid = new Grid(this.columnsRows[0], this.columnsRows[1], this.options.size);\n\n        forLength(this.columnsRows[0]*this.columnsRows[1], function(i) {\n            const plane = new DoubleSidedPlane({\n                properties: {\n                    background: 'teal',\n                }\n            });\n            this.planes.push(plane);\n        }.bind(this));\n\n        grid.setChildren(this.planes);\n        this.add(grid);\n    }\n\n    /**\n     * Set up `this.transitions`, containing the available month-to-month\n     * transitions.\n     *\n     * @private\n     */\n    _initializeTransitions() {\n        this.transitions = {\n            flipDiagonal: function() {\n                this.flipSide = +!this.flipSide;\n                // determine which dimension of the grid is shorter and which is longer.\n                let shortest = 0;\n                let longest;\n                this.columnsRows.forEach(function(item, index) {\n                    if (item < this.columnsRows[shortest])\n                        shortest = index;\n                }.bind(this));\n                longest = +!shortest;\n\n                // for each diagonal of the grid, flip those cells.\n                forLength(this.columnsRows[0]+this.columnsRows[1]-1, function(column) {\n                    forLength(this.columnsRows[shortest], function(row) {\n                        if (column-row >= 0 && column-row < this.columnsRows[longest]) {\n                            const plane = this.planes[column-row + this.columnsRows[longest]*row];\n                            flipOne(plane, column);\n                        }\n                    }.bind(this));\n                }.bind(this));\n\n                function flipOne(item, column) {\n                    if (typeof item.__targetRotation == 'undefined') {\n                        item.__targetRotation = new Transitionable(0);\n                    }\n                    const rotation = new Transitionable(item.__targetRotation.get());\n                    item.__targetRotation.set(item.__targetRotation.get()+Math.PI);\n\n                    //item.get().transformFrom(function() {\n                        //return Transform.rotateY(rotation.get());\n                    //});\n                    item.children[0].get().transformFrom(function() {\n                        return Transform.rotateY(rotation.get());\n                    });\n                    item.children[1].get().transformFrom(function() {\n                        return Transform.rotateY(rotation.get()+Math.PI);\n                    });\n\n                    setTimeout(function() {\n                        rotation.set(item.__targetRotation.get(), { duration: 2000, curve: Easing.outExpo });\n                    }, 0+50*column);\n                }\n            }.bind(this)\n        };\n    }\n}\nexport default Calendar;\n"],"names":[],"mappings":"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"}