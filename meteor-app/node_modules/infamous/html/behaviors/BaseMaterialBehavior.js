'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _BaseMeshBehavior2 = require('./BaseMeshBehavior');

var _BaseMeshBehavior3 = _interopRequireDefault(_BaseMeshBehavior2);

var _three = require('three');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// base class for geometry behaviors

var BaseMaterialBehavior = function (_BaseMeshBehavior) {
    (0, _inherits3.default)(BaseMaterialBehavior, _BaseMeshBehavior);

    function BaseMaterialBehavior() {
        (0, _classCallCheck3.default)(this, BaseMaterialBehavior);

        return (0, _possibleConstructorReturn3.default)(this, (BaseMaterialBehavior.__proto__ || (0, _getPrototypeOf2.default)(BaseMaterialBehavior)).apply(this, arguments));
    }

    (0, _createClass3.default)(BaseMaterialBehavior, [{
        key: 'attributeChangedCallback',

        // TODO: generic type system for attributes.
        value: function attributeChangedCallback(element, attr, oldVal, newVal) {
            return new Promise(function ($return, $error) {
                var material, opacity;
                return (0, _get3.default)(BaseMaterialBehavior.prototype.__proto__ || (0, _getPrototypeOf2.default)(BaseMaterialBehavior.prototype), 'attributeChangedCallback', this).call(this, element).then(function ($await_1) {
                    try {
                        if (!$await_1) {
                            return $return();
                        }

                        if (attr == 'color') {
                            this.processColorValue(newVal, element.threeObject3d.material);
                            element._needsToBeRendered();
                        }

                        // Note, Node elements also react to this, and apply it to the DOM
                        // elements.
                        // TODO: it'd be nice to implement a sort of opacity that multiplies
                        // down the tree. We need something good enough for now.  We'll make
                        // the plain "opacity" attribute be the multiplicative hierarchical
                        // opacity, while material-opacity could be just for the material.
                        // Material opacity would be multiplied to the hierarchical opacity.
                        else if (attr == 'material-opacity') {
                                material = element.threeObject3d.material;

                                this.processNumberValue('opacity', newVal, material);
                                opacity = material.opacity;

                                if (opacity < 1) {
                                    material.transparent = true;
                                } else {
                                    material.transparent = false;
                                }

                                element._needsToBeRendered();
                            }

                        // we can make a lot more attributes as needed...

                        return $return();
                    } catch ($boundEx) {
                        return $error($boundEx);
                    }
                }.bind(this), $error);
            }.bind(this));
        }
    }], [{
        key: 'type',
        get: function () {
            return 'material';
        }
    }, {
        key: 'observedAttributes',
        get: function () {
            return ['color', 'material-opacity'];
        }
    }]);

    return BaseMaterialBehavior;
}(_BaseMeshBehavior3.default);

exports.default = BaseMaterialBehavior;