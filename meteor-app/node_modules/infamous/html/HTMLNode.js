'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _HTMLNode = require('./HTMLNode.style');

var _HTMLNode2 = _interopRequireDefault(_HTMLNode);

var _Transformable = require('../core/Transformable');

var _Transformable2 = _interopRequireDefault(_Transformable);

var _Sizeable = require('../core/Sizeable');

var _Sizeable2 = _interopRequireDefault(_Sizeable);

var _DeclarativeBase2 = require('./DeclarativeBase');

var _DeclarativeBase3 = _interopRequireDefault(_DeclarativeBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _DeclarativeBase2.initDeclarativeBase)();

var HTMLNode = function (_DeclarativeBase) {
    (0, _inherits3.default)(HTMLNode, _DeclarativeBase);

    function HTMLNode() {
        (0, _classCallCheck3.default)(this, HTMLNode);

        return (0, _possibleConstructorReturn3.default)(this, (HTMLNode.__proto__ || (0, _getPrototypeOf2.default)(HTMLNode)).apply(this, arguments));
    }

    (0, _createClass3.default)(HTMLNode, [{
        key: 'construct',
        value: function construct() {
            (0, _get3.default)(HTMLNode.prototype.__proto__ || (0, _getPrototypeOf2.default)(HTMLNode.prototype), 'construct', this).call(this);
        }
    }, {
        key: 'getStyles',
        value: function getStyles() {
            return _HTMLNode2.default;
        }

        // TODO: get these from somewhere dynamically, and do same for
        // proxyGettersSetters and _updateNodeProperty

    }, {
        key: 'attributeChangedCallback',
        value: function attributeChangedCallback() {
            var args = [],
                len = arguments.length;
            while (len--) args[len] = arguments[len];

            (ref = (0, _get3.default)(HTMLNode.prototype.__proto__ || (0, _getPrototypeOf2.default)(HTMLNode.prototype), 'attributeChangedCallback', this)).call.apply(ref, [this].concat(args));
            (ref$1 = this)._updateNodeProperty.apply(ref$1, args);
            var ref;
            var ref$1;
        }
    }, {
        key: '_updateNodeProperty',
        value: function _updateNodeProperty(attribute, oldValue, newValue) {
            // attributes on our HTML elements are the same name as those on
            // the Node class (the setters).
            if (newValue !== oldValue) {
                if (attribute.match(/opacity/i)) {
                    this[attribute] = window.parseFloat(newValue);
                } else if (attribute.match(/sizeMode/i)) {
                    this[attribute] = parseStringArray(newValue);
                } else if (attribute.match(/rotation/i) || attribute.match(/scale/i) || attribute.match(/position/i) || attribute.match(/size/i) || attribute.match(/align/i) || attribute.match(/mountPoint/i) || attribute.match(/origin/i) || attribute.match(/skew/i)) {
                    this[attribute] = parseNumberArray(newValue);
                } else {
                    /* nothing, ignore other attributes */
                }
            }
        }
    }], [{
        key: 'observedAttributes',
        get: function () {
            return ['sizeMode', 'size', 'align', 'mountPoint', 'rotation', 'position', 'scale', 'origin', 'skew', 'opacity'].map(function (a) {
                return a.toLowerCase();
            });
        }
    }]);

    return HTMLNode;
}(_DeclarativeBase3.default);

// This associates the Transformable getters/setters with the HTML-API classes,
// so that the same getters/setters can be called from HTML side of the API.


(0, _DeclarativeBase2.proxyGettersSetters)(_Transformable2.default, HTMLNode);
(0, _DeclarativeBase2.proxyGettersSetters)(_Sizeable2.default, HTMLNode);

function parseNumberArray(str) {
    checkIsNumberArrayString(str);
    var numbers = str.trim().split(/(?:\s*,\s*)|(?:\s+)/g);
    var length = numbers.length;
    if (length > 0) {
        numbers[0] = window.parseFloat(numbers[0]);
    }
    if (length > 1) {
        numbers[1] = window.parseFloat(numbers[1]);
    }
    if (length > 2) {
        numbers[2] = window.parseFloat(numbers[2]);
    }
    return numbers;
}

function parseStringArray(str) {
    checkIsSizeArrayString(str);
    var strings = str.trim().toLowerCase().split(/(?:\s*,\s*)|(?:\s+)/g);
    var length = strings.length;
    if (length > 0) {
        strings[0] = strings[0];
    }
    if (length > 1) {
        strings[1] = strings[1];
    }
    if (length > 2) {
        strings[2] = strings[2];
    }
    return strings;
}

function checkIsNumberArrayString(str) {
    if (!str.match(/^\s*(((\s*(-|\+)?((\.\d+)|(\d+\.\d+)|(\d+)|(\d+(\.\d+)?e(-|\+)?(\d+)))\s*,){0,2}(\s*(-|\+)?((\.\d+)|(\d+\.\d+)|(\d+)|(\d+(\.\d+)?e(-|\+)?(\d+)))))|((\s*(-|\+)?((\.\d+)|(\d+\.\d+)|(\d+)|(\d+(\.\d+)?e(-|\+)?(\d+)))\s){0,2}(\s*(-|\+)?((\.\d+)|(\d+\.\d+)|(\d+)|(\d+(\.\d+)?e(-|\+)?(\d+))))))\s*$/g)) {
        throw new Error("Attribute must be a comma- or space-separated sequence of up to three numbers, for example \"1 2.5 3\". Yours was \"" + str + "\".");
    }
}

function checkIsSizeArrayString(str) {
    if (!str.match(/^\s*(((\s*([a-zA-Z]+)\s*,){0,2}(\s*([a-zA-Z]+)))|((\s*([a-zA-Z]+)\s*){1,3}))\s*$/g)) {
        throw new Error("Attribute must be a comma- or space-separated sequence of up to three strings, for example \"literal proportional\". Yours was \"" + str + "\".");
    }
}

exports.default = HTMLNode;