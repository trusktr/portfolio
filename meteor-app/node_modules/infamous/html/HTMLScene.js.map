{"version":3,"file":"HTMLScene.js","sources":["../../src/html/HTMLScene.js"],"sourcesContent":["\nimport styles from './HTMLScene.style'\nimport Motor from '../core/Motor'\nimport Scene from '../core/Scene'\nimport Observable from '../core/Observable'\nimport Sizeable from '../core/Sizeable'\nimport getWebGlRenderer from '../core/WebGLRenderer'\nimport DeclarativeBase, {initDeclarativeBase, proxyGettersSetters} from './DeclarativeBase'\nimport sleep from 'awaitbox/timers/sleep'\n\n//import * as PIXI from 'pixi.js' // also sets the PIXI global.\n//import SVG from 'pixi-svg' // uses the PIXI global, won't work if you don't import the main `pixi.js module`.\nimport Two from 'two.js/build/two'\n\ninitDeclarativeBase()\n\nconst privates = new WeakMap()\nconst _ = instance => {\n    if (!privates.get(instance)) privates.set(instance, {})\n    return privates.get(instance)\n}\n\nclass HTMLScene extends Observable.mixin(DeclarativeBase) {\n    static define(name) {\n        customElements.define(name || 'i-scene', HTMLScene)\n    }\n\n    constructor() {\n        super()\n\n        this._sizePollTask = null\n        this._parentSize = {x:0, y:0, z:0}\n\n        // After the imperativeCounterpart is available it needs to register\n        // mount into DOM. This is only for MotorHTMLScenes because their\n        // imperativeCounterparts are not added to a parent Node.\n        // MotorHTMLNodes get their parent connection from their parent in\n        // childConnectedCallback.\n        this._imperativeCounterpartPromise\n            .then(() => {\n                if (this.imperativeCounterpart._mounted) return\n\n                if (this.parentNode)\n                    this.imperativeCounterpart.mount(this.parentNode)\n            })\n\n        // For now, use the same program (with shaders) for all objects.\n        // Basically it has position, frag colors, point light, directional\n        // light, and ambient light.\n        // TODO: maybe call this in `init()`, and destroy webgl stuff in\n        // `deinit()`.\n        // TODO: The user might enable this by setting the attribute later, so\n        // we can't simply rely on having it in constructor, we need a\n        // getter/setter like node properties.\n        this.initWebGl()\n    }\n\n    // TODO: we need to deinit webgl too.\n    initWebGl() {\n        // TODO: this needs to be cancelable too, search other codes for\n        // \"mountcancel\" to see.\n        this.mountPromise.then(() => {\n            this.webglEnabled = !!this.getAttribute('webglenabled')\n            if (!this.webglEnabled) return\n            this.webGlRendererState = {}\n            getWebGlRenderer().initGl(this)\n        })\n    }\n    //async initWebGl() {\n        //// TODO: this needs to be cancelable too, search other codes for\n        //// \"mountcancel\" to see.\n        //await this.mountPromise\n        //this.webglEnabled = !!this.getAttribute('webglenabled')\n        //if (!this.webglEnabled) return\n        //this.webGlRendererState = {}\n        //getWebGlRenderer().initGl(this)\n    //}\n\n    _startSizePolling() {\n        // NOTE Polling is currently required because there's no other way to do this\n        // reliably, not even with MutationObserver. ResizeObserver hasn't\n        // landed in browsers yet.\n        if (!this._sizePollTask)\n            this._sizePollTask = Motor.addRenderTask(this._checkSize.bind(this))\n    }\n\n    // NOTE, the Z dimension of a scene doesn't matter, it's a flat plane, so\n    // we haven't taken that into consideration here.\n    _checkSize() {\n\n        // The scene has a parent by the time this is called (see\n        // src/core/Scene#mount where _startSizePolling is called)\n        const parent = this.parentNode\n        const parentSize = this._parentSize\n        const style = getComputedStyle(parent)\n        const width = parseFloat(style.width)\n        const height = parseFloat(style.height)\n\n        // if we have a size change, trigger parentsizechange\n        if (parentSize.x != width || parentSize.y != height) {\n            parentSize.x = width\n            parentSize.y = height\n\n            this.triggerEvent('parentsizechange', Object.assign({}, parentSize))\n        }\n    }\n\n    _makeImperativeCounterpart() {\n        return new Scene({\n            _motorHtmlCounterpart: this\n        })\n    }\n\n    /** @override */\n    getStyles() {\n        return styles\n    }\n\n    deinit() {\n        super.deinit()\n\n        this.imperativeCounterpart.unmount()\n    }\n\n    _stopSizePolling() {\n        Motor.removeRenderTask(this._sizePollTask)\n        this._sizePollTask = null\n    }\n}\n\n// This associates the Transformable getters/setters with the HTML-API classes,\n// so that the same getters/setters can be called from HTML side of the API.\nproxyGettersSetters(Sizeable, HTMLScene)\n\nexport {HTMLScene as default}\n"],"names":[],"mappings":"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"}