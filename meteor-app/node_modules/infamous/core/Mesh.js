'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Node2 = require('./Node');

var _Node3 = _interopRequireDefault(_Node2);

var _three = require('three');

require('../html/behaviors/BasicMaterialBehavior');

require('../html/behaviors/PhongMaterialBehavior');

require('../html/behaviors/DOMNodeMaterialBehavior');

require('../html/behaviors/BoxGeometryBehavior');

require('../html/behaviors/SphereGeometryBehavior');

require('../html/behaviors/PlaneGeometryBehavior');

require('../html/behaviors/DOMNodeGeometryBehavior');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO:
// - API for registering new behaviors as they pertain to our API, built on top
//   of element-behaviors.
// - Ability specify default initial behaviors. Make this generic, or on top of
//   element-behaviors?
// - generic ability to specify custom element attribute types, as an addon to
//   Custom Elements. We can use the same mechanism to specify types for behaviors too?

var Mesh = function (_Node) {
    (0, _inherits3.default)(Mesh, _Node);

    function Mesh() {
        (0, _classCallCheck3.default)(this, Mesh);

        return (0, _possibleConstructorReturn3.default)(this, (Mesh.__proto__ || (0, _getPrototypeOf2.default)(Mesh)).apply(this, arguments));
    }

    (0, _createClass3.default)(Mesh, [{
        key: 'makeThreeObject3d',
        value: function makeThreeObject3d() {
            var mesh = new _three.Mesh();
            mesh.castShadow = true;
            mesh.receiveShadow = true;
            return mesh;
        }
    }, {
        key: 'attributeChangedCallback',
        value: function attributeChangedCallback(attr, oldVal, newVal) {
            (0, _get3.default)(Mesh.prototype.__proto__ || (0, _getPrototypeOf2.default)(Mesh.prototype), 'attributeChangedCallback', this).call(this, attr, oldVal, newVal);

            if (attr == 'castshadow' || attr == 'cast-shadow') {

                if (newVal == 'false' || newVal == null) {
                    this.threeObject3d.castShadow = false;
                } else {
                    this.threeObject3d.castShadow = true;
                }

                this._needsToBeRendered();
            } else if (attr == 'receiveshadow' || attr == 'receive-shadow') {

                if (newVal == 'false' || newVal == null) {
                    this.threeObject3d.receiveShadow = false;
                } else {
                    this.threeObject3d.receiveShadow = true;
                }

                this._needsToBeRendered();
            }
        }
    }], [{
        key: 'defaultElementName',
        get: function () {
            return 'i-mesh';
        }
    }, {
        key: '_Class',
        get: function () {
            return Mesh;
        }

        // TODO NAMING: It would be neat to be able to return an array of classes
        // as well, so that it can be agnostic of the naming. Either way should
        // work.

    }, {
        key: 'defaultBehaviors',
        get: function () {
            return {
                'box-geometry': function (initialBehaviors) {
                    return !initialBehaviors.some(function (b) {
                        return b.endsWith('-geometry');
                    });
                },
                'phong-material': function (initialBehaviors) {
                    return !initialBehaviors.some(function (b) {
                        return b.endsWith('-material');
                    });
                }
            };
        }
    }, {
        key: 'observedAttributes',
        get: function () {

            return (0, _get3.default)(Mesh.__proto__ || (0, _getPrototypeOf2.default)(Mesh), 'observedAttributes', this).concat(['castshadow', 'cast-shadow', 'receiveshadow', 'receive-shadow']);
        }
    }]);

    return Mesh;
}(_Node3.default);

// register behaviors that can be used with this class.
// TODO: maybe useDefaultNames() should register these, otherwise the user can
// choose names for better flexibility. See TODO NAMING below.
exports.default = Mesh;