{"version":3,"file":"WebGLRenderer.js","sources":["../../src/core/WebGLRenderer.js"],"sourcesContent":["import {\n    createWebGLContext,\n    //removeWebGLContext,\n    setGlResolution,\n    v3,\n    m4,\n    vertShaderSource,\n    fragShaderSource,\n    createShader,\n    createProgram,\n    Cube,\n    Quad,\n    FourSidedPyramid,\n    IsoscelesTriangle,\n    SymmetricTrapezoid,\n} from './webglUtils'\n\nconst updateResolution = state => {\n    const resolution = [\n        parseFloat(getComputedStyle(state.gl.canvas).width) * window.devicePixelRatio,\n        parseFloat(getComputedStyle(state.gl.canvas).height) * window.devicePixelRatio,\n        1000,\n    ]\n\n    setGlResolution(state.gl, ...resolution)\n    state.projectionMatrix = m4.perspective(45, resolution[0] / resolution[1], 1, 2000)\n}\n\nclass WebGlRenderer {\n    /**\n     * Creates the WebGL program for the given scene.\n     */\n    initGl(scene) {\n        const gl = createWebGLContext(scene)\n        const state = scene.webGlRendererState\n        state.gl = gl\n\n        if (!gl) { console.log('You need WebGL.') }\n\n        const vertShader = createShader(gl, gl.VERTEX_SHADER, vertShaderSource)\n        const fragShader = createShader(gl, gl.FRAGMENT_SHADER, fragShaderSource)\n        const program = createProgram(gl, vertShader, fragShader)\n        gl.useProgram(program)\n\n\n        state.colorsBuffer = gl.createBuffer()\n        state.colorAttributeLocation = gl.getAttribLocation(program, 'a_color')\n        gl.enableVertexAttribArray(state.colorAttributeLocation)\n\n        state.vertexBuffer = gl.createBuffer()\n        state.vertexAttributeLocation = gl.getAttribLocation(program, \"a_vertexPosition\")\n        gl.enableVertexAttribArray(state.vertexAttributeLocation)\n\n        state.normalsBuffer = gl.createBuffer()\n        state.normalAttributeLocation = gl.getAttribLocation(program, 'a_normal')\n        gl.enableVertexAttribArray(state.normalAttributeLocation)\n\n        state.textureCoordinatesBuffer = gl.createBuffer()\n        state.textureCoordinateLocation = gl.getAttribLocation(program, 'a_textureCoordinate')\n\n        // cull_face doesn't work, because I've drawn my vertices in the wrong\n        // order. They should be clockwise to be front facing (I seem to have done\n        // them counter-clockwise). See \"CULL_FACE\" at\n        // https://webglfundamentals.org/webgl/lessons/webgl-3d-orthographic.html\n        //gl.enable(gl.CULL_FACE)\n\n        // enables depth sorting, so pixels aren't drawn in order of appearance, but order only if they are visible (on top of other pixels).\n        gl.enable(gl.DEPTH_TEST)\n\n        // enable alpha blending (transparency)\n        // XXX: For blending (transparency) to work, we have to disable depth testing.\n        // TODO: Maybe we have to selectively enable depth testing and disable\n        // blending, or vice versa, depending on the object we want to draw...\n        // ...Or perhaps we must draw things in a certain order, from back to front,\n        // so we can have depth testing AND blending at the same time.\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE)\n        gl.enable(gl.BLEND)\n        //gl.disable(gl.DEPTH_TEST)\n\n        state.projectionMatrix = m4.identity\n\n        updateResolution(state)\n        scene.on('parentsizechange', () => updateResolution(state))\n\n        state.worldViewProjectionMatrixLocation = gl.getUniformLocation(program, 'u_worldViewProjectionMatrix')\n        //const worldInverseTransposeMatrixLocation = gl.getUniformLocation(program, 'u_worldInverseTransposeMatrix')\n        state.worldMatrixLocation = gl.getUniformLocation(program, 'u_worldMatrix')\n        //const reverseLightDirectionLocation = gl.getUniformLocation(program, 'reverseLightDirection')\n        //gl.uniform3fv(reverseLightDirectionLocation, v3.normalize([0.5, 0.7, 1]))\n        state.lightWorldPositionLocation = gl.getUniformLocation(program, 'u_lightWorldPosition')\n        state.cameraWorldPositionLocation = gl.getUniformLocation(program, 'u_cameraWorldPosition')\n        const shininessLocation = gl.getUniformLocation(program, 'u_shininess')\n        const lightColorLocation = gl.getUniformLocation(program, 'u_lightColor')\n        const specularColorLocation = gl.getUniformLocation(program, 'u_specularColor')\n        state.textureLocation = gl.getUniformLocation(program, 'u_texture')\n        state.hasTextureLocation = gl.getUniformLocation(program, 'u_hasTexture')\n\n        let shininess = 200\n        gl.uniform1f(shininessLocation, shininess)\n\n        const red = [1, 0.6, 0.6]\n        const white = [1, 1, 1]\n\n        let lightColor = white\n        gl.uniform3fv(lightColorLocation, v3.normalize(lightColor))\n\n        let specularColor = white\n        gl.uniform3fv(specularColorLocation, v3.normalize(specularColor))\n\n\n        state.lightAnimParam = 0\n        state.lightWorldPosition = [20,30,50]\n        state.cameraAngle = 0\n        state.cameraRadius   = 200\n    }\n\n    drawScene(scene) {\n        const state = scene.webGlRendererState\n        const {gl} = state\n\n        // TODO: light does not affect the back side of polygons?...\n        state.lightAnimParam += 0.05\n        state.lightWorldPosition = [\n            300*Math.sin(state.lightAnimParam),\n            300*Math.sin(state.lightAnimParam*2),\n\n            Math.abs(300*Math.cos(state.lightAnimParam))\n            //300\n        ]\n\n        gl.uniform3fv(state.lightWorldPositionLocation, state.lightWorldPosition)\n\n        let backgroundColor = scene.getAttribute('background')\n\n        if (typeof backgroundColor == 'string')\n            backgroundColor = backgroundColor.split(' ').map(rgbPart => parseFloat(rgbPart))\n        else\n            backgroundColor = [0, 0, 0, 0]\n\n        gl.clearColor(...backgroundColor)\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT) // why do we need to do this?\n\n        //state.cameraAngle++\n        let cameraMatrix  = m4.identity\n        cameraMatrix      = m4.multiply(cameraMatrix, m4.yRotation(state.cameraAngle))\n        cameraMatrix      = m4.multiply(cameraMatrix, m4.translation(0, 0, state.cameraRadius * 1.5))\n        const viewMatrix  = m4.inverse(cameraMatrix)\n\n        state.viewProjectionMatrix = m4.multiply(state.projectionMatrix, viewMatrix)\n\n        const cameraWorldPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]]\n        gl.uniform3fv(state.cameraWorldPositionLocation, cameraWorldPosition)\n\n        // TODO: we need to use the traversal that takes into consideration ShadowDOM.\n        const children = scene.imperativeCounterpart._children\n        for (let i=0, l=children.length; i<l; i+=1) {\n            this.drawNodeAndRecurse(state, children[i])\n        }\n    }\n\n    drawNodeAndRecurse(state, node) {\n        const {gl} = state\n\n        const meshAttr = node.element.getAttribute('mesh')\n\n        if (meshAttr) {\n            const size = node._calculatedSize\n\n            const svgElement = Array.from(node.element.children)\n                .find(child => child instanceof SVGSVGElement)\n\n            const hasTexture = !!svgElement\n\n            if (meshAttr == 'cube') {\n                if (!(node.__shape instanceof Cube))\n                    node.__shape = new Cube(0, 0, size.x)\n                // TODO else, like quad or symtrap\n            }\n            else if (meshAttr == 'quad') {\n                if (!(node.__shape instanceof Quad))\n                    node.__shape = new Quad(size.x, size.y)\n                else {\n                    node.__shape.width = size.x\n                    node.__shape.height = size.y\n                    node.__shape._calcVerts()\n                }\n\n                if (hasTexture) {\n\n                    // TODO we would create one per Geometry (and eventually multiple per\n                    // geometry), but for now just one texture for all quads to get it working.\n                    // TODO Make the texture only once, not each tick.\n                    if (!node.__texture) {\n\n                        // XXX this will eventually be set with a texture map feature\n                        // TODO: for now, we should at least set default\n                        // coordinates for each geometry, even if that's not\n                        // ideal; it's more ideal than nothing.\n                        node.__shape.textureCoordinates = new Float32Array([\n                            0, 0,\n                            1, 0,\n                            1, 1,\n                            1, 1,\n                            0, 1,\n                            0, 0,\n                        ])\n\n                        node.__texture = gl.createTexture()\n                    }\n\n                    ///// SVG TEXTURE FROM TWO.JS {\n                    if (!node.__two) {\n                        node.__two = new Two({\n                            type: Two.Types.webgl,\n                            fullscreen: false,\n                            autostart: false,\n                        })\n\n                        node.__two.interpret(svgElement)\n                    }\n\n                    node.__two.update()\n\n                    const image = node.__two.renderer.domElement\n                    const isPowerOf2 = value => (value & (value - 1)) == 0\n\n                    // copy the pixi canvas image to the texture.\n                    gl.bindTexture(gl.TEXTURE_2D, node.__texture)\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image)\n\n                    // TODO: unbind from buffers and textures when done\n                    // using them, to prevent modification from outside\n\n                    // Mip maps can only be generated on images whose width and height are a power of 2.\n                    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\n                        gl.generateMipmap(gl.TEXTURE_2D)\n                        // TODO make filters configurable?\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\n\n                        // Using just NEAREST or LINEAR only can increase performance, for example.\n                        //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                        //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n                    }\n                    else {\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n                        // TODO make filters configurable?\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n                    }\n                    ///// }\n\n                    ///// SVG TEXTURE FROM PIXI-SVG {\n                    //if (!node.__pixiRenderer) {\n                        //node.__pixiRenderer = PIXI.autoDetectRenderer({\n\n                            //width: node._calculatedSize.x * window.devicePixelRatio,\n                            //height: node._calculatedSize.y * window.devicePixelRatio,\n                            ////width: 300 * window.devicePixelRatio,\n                            ////height: 300 * window.devicePixelRatio,\n\n                            //resolution: window.devicePixelRatio,\n                        //});\n\n                        //node.__pixiStage = new PIXI.Container()\n                        //window.stage = node.__pixiStage\n                    //}\n\n                    //node.__pixiStage.removeChild(node.__svgGraphic)\n\n                    //node.__svgGraphic = new SVG(svgElement)\n\n                    //node.__pixiStage.addChild(node.__svgGraphic)\n\n                    //node.__pixiRenderer.render(node.__pixiStage);\n\n                    //const image = node.__pixiRenderer.view\n                    //const isPowerOf2 = value => (value & (value - 1)) == 0\n\n                    //// copy the pixi canvas image to the texture.\n                    //gl.bindTexture(gl.TEXTURE_2D, node.__texture)\n                    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image)\n\n                    //// TODO: unbind from buffers and textures when done\n                    //// using them, to prevent modification from outside\n\n                    //// Mip maps can only be generated on images whose width and height are a power of 2.\n                    //if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\n                        //gl.generateMipmap(gl.TEXTURE_2D)\n                        //// TODO make filters configurable?\n                        //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                        //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\n\n                        //// Using just NEAREST or LINEAR only can increase performance, for example.\n                        ////gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                        ////gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n                    //}\n                    //else {\n                        //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n                        //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n                        //// TODO make filters configurable?\n                        //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                        //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n                    //}\n\n                    ///// }\n\n                    ///// PRE-DEFINED TEXTURE FROM IMAGE {\n\n                    //// set a temporary solid color texture for the meantime\n                    //// while the following texture loads.\n                    //gl.bindTexture(gl.TEXTURE_2D, node.__texture)\n                    //// Fill the texture with a 1x1 blue pixel to start with.\n                    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]))\n                    //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                    //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n                    //const image = new Image\n                    //const isPowerOf2 = value => (value & (value - 1)) == 0\n                    //image.addEventListener('load', () => {\n                        //// Now that the image has loaded copy it to the texture.\n                        //gl.bindTexture(gl.TEXTURE_2D, node.__texture)\n                        //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image)\n\n                        //// TODO: unbind from buffers and textures when done\n                        //// using them, to prevent modification from outside\n\n                        //// Mip maps can only be generated on images whose width and height are a power of 2.\n                        //if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\n                            //gl.generateMipmap(gl.TEXTURE_2D)\n                            //// TODO make filters configurable?\n                            //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                            //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\n\n                            //// Using just NEAREST or LINEAR only can increase performance, for example.\n                            ////gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                            ////gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n                        //}\n                        //else {\n                            //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n                            //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n                            //// TODO make filters configurable?\n                            //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n                            //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n                        //}\n                    //})\n                    //image.src = imageUrl // imageUrl should be a data URL\n                    //// }\n                }\n            }\n            else if (meshAttr == 'isotriangle') {\n                if (!(node.__shape instanceof IsoscelesTriangle))\n                    node.__shape = new IsoscelesTriangle(size.x, size.y)\n                // TODO else, like quad or symtrap\n            }\n            else if (meshAttr == 'pyramid4') {\n                if (!(node.__shape instanceof FourSidedPyramid))\n                    node.__shape = new FourSidedPyramid(size.x, size.y)\n                // TODO else, like quad or symtrap\n            }\n            else if (meshAttr == 'symtrap') {\n                if (!(node.__shape instanceof SymmetricTrapezoid))\n                    node.__shape = new SymmetricTrapezoid(size.x/2, size.x, size.y)\n                else {\n                    node.__shape.baseWidth = size.x/2\n                    node.__shape.topWidth = size.x\n                    node.__shape.height = size.y\n                    node.__shape._calcVerts()\n                }\n            }\n            //else node.__shape = null\n            else {\n                if (!(node.__shape instanceof Quad))\n                    node.__shape = new Quad(size.x, size.y)\n                else {\n                    node.__shape.width = size.x\n                    node.__shape.height = size.y\n                    node.__shape._calcVerts()\n                }\n                // TODO this will eventually be set with a texture map feature\n                if (hasTexture) {\n                    node.__shape.textureCoordinates = new Float32Array([\n                        0, 0,\n                        1, 0,\n                        1, 1,\n                        1, 1,\n                        0, 1,\n                        0, 0,\n                    ])\n                }\n            }\n\n            if (node.__shape) {\n                // COLORS /////////////////////////////////\n                node.__shape.color = node.element.getAttribute('color')\n\n                gl.bindBuffer(gl.ARRAY_BUFFER, state.colorsBuffer)\n                gl.bufferData(gl.ARRAY_BUFFER, node.__shape._colors, gl.STATIC_DRAW)\n\n                // Tell the attribute how to get data out of vertexBuffer (ARRAY_BUFFER)\n                const colorSize = 4          // components per iteration\n                const colorType = gl.FLOAT\n                const normalizeColorData = false // don't normalize the data\n                const colorStride = 0        // 0 = move forward colorSize * sizeof(colorType) each iteration to get the next vertex\n                const colorOffset = 0        // start at the beginning of the buffer\n                gl.vertexAttribPointer(\n                    state.colorAttributeLocation, colorSize, colorType, normalizeColorData, colorStride, colorOffset)\n\n                // VERTICES /////////////////////////////////\n                gl.bindBuffer(gl.ARRAY_BUFFER, state.vertexBuffer)\n                gl.bufferData(gl.ARRAY_BUFFER, node.__shape.verts, gl.STATIC_DRAW)\n\n                // Tell the attribute how to get data out of vertexBuffer (ARRAY_BUFFER)\n                const vertexSize = 3          // components per iteration\n                const type = gl.FLOAT\n                const normalizeVertexData = false // don't normalize the data\n                const stride = 0        // 0 = move forward vertexSize * sizeof(type) each iteration to get the next vertex\n                const offset = 0        // start at the beginning of the buffer\n                gl.vertexAttribPointer(\n                    state.vertexAttributeLocation, vertexSize, type, normalizeVertexData, stride, offset)\n\n                // NORMALS /////////////////////////////////\n                gl.bindBuffer(gl.ARRAY_BUFFER, state.normalsBuffer)\n                gl.bufferData(gl.ARRAY_BUFFER, node.__shape.normals, gl.STATIC_DRAW)\n\n                // Tell the attribute how to get data out of vertexBuffer (ARRAY_BUFFER)\n                const normalSize = 3          // components per iteration\n                const normalType = gl.FLOAT\n                const normalizeNormalsData = false // don't normalize the data\n                const normalStride = 0        // 0 = move forward normalSize * sizeof(normalType) each iteration to get the next vertex\n                const normalOffset = 0        // start at the beginning of the buffer\n                gl.vertexAttribPointer(\n                    state.normalAttributeLocation, normalSize, normalType, normalizeNormalsData, normalStride, normalOffset)\n\n                // TEXTURE COORDINATES /////////////////////////////////\n                if (hasTexture) {\n                    gl.uniform1i(state.hasTextureLocation, +true)\n\n                    gl.bindBuffer(gl.ARRAY_BUFFER, state.textureCoordinatesBuffer)\n                    gl.bufferData(gl.ARRAY_BUFFER, node.__shape.textureCoordinates, gl.STATIC_DRAW)\n\n                    // Tell the attribute how to get data out of vertexBuffer (ARRAY_BUFFER)\n                    const textureCoordinateSize = 2          // components per iteration\n                    const textureCoordinateType = gl.FLOAT\n                    const normalizeTextureCoordinateData = false // don't normalize the data\n                    const textureCoordinateStride = 0        // 0 = move forward textureCoordinateSize * sizeof(textureCoordinateType) each iteration to get the next vertex\n                    const textureCoordinateOffset = 0        // start at the beginning of the buffer\n                    gl.enableVertexAttribArray(state.textureCoordinateLocation)\n                    gl.vertexAttribPointer(\n                        state.textureCoordinateLocation, textureCoordinateSize, textureCoordinateType, normalizeTextureCoordinateData, textureCoordinateStride, textureCoordinateOffset)\n\n                    // Tell the shader to use texture unit 0 for u_texture\n                    // TODO: Get index of the node's texture, but right now there's only one texture.\n                    gl.uniform1i(state.textureLocation, 0)\n                }\n                else {\n                    gl.uniform1i(state.hasTextureLocation, +false)\n                    gl.disableVertexAttribArray(state.textureCoordinateLocation)\n                }\n\n                // TRANFORMS /////////////////////////////////\n                gl.uniformMatrix4fv(state.worldMatrixLocation, false, node._worldMatrix.toFloat32Array())\n\n                // for correct lighting normals\n                // TODO: waiting for transpose() method on DOMMatrix\n                //const worldInverseTransposeMatrix = m4.transpose(m4.inverse(node._worldMatrix))\n                //gl.uniformMatrix4fv(worldInverseTransposeMatrixLocation, false, worldInverseTransposeMatrix)\n\n                const worldViewProjectionMatrix = m4.multiply(state.viewProjectionMatrix, node._worldMatrix.toFloat32Array())\n                gl.uniformMatrix4fv(state.worldViewProjectionMatrixLocation, false, worldViewProjectionMatrix)\n\n                const count = node.__shape.verts.length / 3\n                gl.drawArrays(gl.TRIANGLES, offset, count)\n            }\n        }\n\n        const children = node._children\n        for (let i=0, l=children.length; i<l; i+=1) {\n            this.drawNodeAndRecurse(state, children[i])\n        }\n    }\n}\n\nlet instance = null\n\nexport default\nfunction getWebGlRenderer() {\n    if (instance) return instance\n    else return instance = new WebGlRenderer\n}\n"],"names":["this"],"mappings":"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"}