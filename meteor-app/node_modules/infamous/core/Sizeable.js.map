{"version":3,"file":"Sizeable.js","sources":["../../src/core/Sizeable.js"],"sourcesContent":["import { makeLowercaseSetterAliases } from './Utility'\nimport TreeNode from './TreeNode'\nimport XYZValues from './XYZValues'\nimport Observable from './Observable'\nimport Motor from './Motor'\n\n// fallback to experimental CSS transform if browser doesn't have it (fix for Safari 9)\nif (typeof document.createElement('div').style.transform == 'undefined') {\n    Object.defineProperty(CSSStyleDeclaration.prototype, 'transform', {\n        set(value) {\n            this.webkitTransform = value\n        },\n        get() {\n            return this.webkitTransform\n        },\n        enumerable: true,\n    })\n}\n\nconst instanceofSymbol = Symbol('instanceofSymbol')\n\nconst SizeableMixin = base => {\n\n    // Sizeable extends TreeNode because Sizeable knows about its _parent when\n    // calculating proportionalSize. Also Transformable knows about it's parent\n    // in order to calculate it's world matrix based on it's parent's.\n    class Sizeable extends TreeNode.mixin(Observable.mixin(base)) {\n\n        constructor(options = {}) {\n            super(options)\n\n            this._propertyFunctions = null\n            this._calculatedSize = { x:0, y:0, z:0 }\n            this._properties = {}\n            this._setDefaultProperties()\n            this._setPropertyObservers()\n            this.properties = options\n        }\n\n        _setDefaultProperties() {\n            Object.assign(this._properties, {\n                sizeMode:         new XYZValues('absolute', 'absolute', 'absolute'),\n                absoluteSize:     new XYZValues(0, 0, 0),\n                proportionalSize: new XYZValues(1, 1, 1),\n            })\n        }\n\n        _setPropertyObservers() {\n            this._properties.sizeMode.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'sizeMode'))\n            this._properties.absoluteSize.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'absoluteSize'))\n            this._properties.proportionalSize.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'proportionalSize'))\n        }\n\n        _calcSize() {\n            const calculatedSize = this._calculatedSize\n            const previousSize = {...calculatedSize}\n            const props = this._properties\n            const parentSize = this._getParentSize()\n\n            if (props.sizeMode._x == 'absolute') {\n                calculatedSize.x = props.absoluteSize._x\n            }\n            else { // proportional\n                calculatedSize.x = parentSize.x * props.proportionalSize._x\n            }\n\n            if (props.sizeMode._y == 'absolute') {\n                calculatedSize.y = props.absoluteSize._y\n            }\n            else { // proportional\n                calculatedSize.y = parentSize.y * props.proportionalSize._y\n            }\n\n            if (props.sizeMode._z == 'absolute') {\n                calculatedSize.z = props.absoluteSize._z\n            }\n            else { // proportional\n                calculatedSize.z = parentSize.z * props.proportionalSize._z\n            }\n\n            if (\n                previousSize.x !== calculatedSize.x\n                || previousSize.y !== calculatedSize.y\n                || previousSize.z !== calculatedSize.z\n            ) {\n                this.triggerEvent('sizechange', {...calculatedSize})\n            }\n        }\n\n        _getParentSize() {\n            return this._parent ? this._parent._calculatedSize : {x:0,y:0,z:0}\n        }\n\n        _setPropertyXYZ(Class, name, newValue) {\n            if (!(\n                newValue instanceof Object ||\n                newValue instanceof Array ||\n                newValue instanceof Function\n            )) {\n                throw new TypeError(`Invalid value for ${Class.name}#${name}.`)\n            }\n\n            let change = false\n\n            if (newValue instanceof Function) {\n                // remove previous task if any.\n                if (!this._propertyFunctions) this._propertyFunctions = new Map\n\n                if (this._propertyFunctions.has(name))\n                    Motor.removeRenderTask(this._propertyFunctions.get(name))\n\n                this._propertyFunctions.set(name,\n                    Motor.addRenderTask(time => {\n                        const result = newValue(\n                            this._properties[name]._x,\n                            this._properties[name]._y,\n                            this._properties[name]._z,\n                            time\n                        )\n\n                        if (result === false) {\n                            this._propertyFunctions.delete(name)\n                            return false\n                        }\n\n                        this[name] = result\n                    })\n                )\n            }\n            else if (newValue instanceof Array) {\n                if (typeof newValue[0] != 'undefined') { this._properties[name]._x = newValue[0]; change = true }\n                if (typeof newValue[1] != 'undefined') { this._properties[name]._y = newValue[1]; change = true }\n                if (typeof newValue[2] != 'undefined') { this._properties[name]._z = newValue[2]; change = true }\n            }\n            else {\n                if (typeof newValue.x != 'undefined') { this._properties[name]._x = newValue.x; change = true }\n                if (typeof newValue.y != 'undefined') { this._properties[name]._y = newValue.y; change = true }\n                if (typeof newValue.z != 'undefined') { this._properties[name]._z = newValue.z; change = true }\n            }\n\n            if (change) this.triggerEvent('propertychange', name)\n        }\n\n        _setPropertySingle(Class, name, newValue, type) {\n            if (!(typeof newValue == type || newValue instanceof Function))\n                throw new TypeError(`Invalid value for ${Class.name}#${name}.`)\n\n            if (newValue instanceof Function) {\n                // remove previous task if any.\n                Motor.addRenderTask(time => {\n                    const result = newValue(\n                        this._properties[name],\n                        time\n                    )\n\n                    if (result === false) return false\n\n                    this[name] = result\n                })\n            }\n            else {\n                this._properties[name] = newValue\n                this.triggerEvent('propertychange', name)\n            }\n        }\n\n        _render() {\n            // nothing yet, but needed because ImperativeBase calls\n            // `super._render()`, which will call either Transformable's\n            // _render or Sizeable's _render for Node and Scene classes,\n            // respectively.\n        }\n    }\n\n    // We set accessors manually because Buble doesn't make them configurable\n    // as per spec. Additionally we're maing these ones enumerable.\n    Object.defineProperties(Sizeable.prototype, {\n\n        /**\n         * Set the size mode for each axis. Possible size modes are \"absolute\" and \"proportional\".\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis sizeMode to apply.\n         * @param {number} [newValue.y] The y-axis sizeMode to apply.\n         * @param {number} [newValue.z] The z-axis sizeMode to apply.\n         */\n        sizeMode: {\n            set(newValue) {\n                this._setPropertyXYZ(Sizeable, 'sizeMode', newValue)\n            },\n            get() {\n                return this._properties.sizeMode\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis absoluteSize to apply.\n         * @param {number} [newValue.y] The y-axis absoluteSize to apply.\n         * @param {number} [newValue.z] The z-axis absoluteSize to apply.\n         */\n        absoluteSize: {\n            set(newValue) {\n                this._setPropertyXYZ(Sizeable, 'absoluteSize', newValue)\n            },\n            get() {\n                return this._properties.absoluteSize\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * Get the actual size of the Node. This can be useful when size is\n         * proportional, as the actual size of the Node depends on the size of\n         * it's parent.\n         *\n         * @readonly\n         *\n         * @return {Array.number} An Oject with x, y, and z properties, each\n         * property representing the computed size of the x, y, and z axes\n         * respectively.\n         */\n        actualSize: {\n            get() {\n                const {x,y,z} = this._calculatedSize\n                return {x,y,z}\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * Set the size of a Node proportional to the size of it's parent Node. The\n         * values are a real number between 0 and 1 inclusive where 0 means 0% of\n         * the parent size and 1 means 100% of the parent size.\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis proportionalSize to apply.\n         * @param {number} [newValue.y] The y-axis proportionalSize to apply.\n         * @param {number} [newValue.z] The z-axis proportionalSize to apply.\n         */\n        proportionalSize: {\n            set(newValue) {\n                this._setPropertyXYZ(Sizeable, 'proportionalSize', newValue)\n            },\n            get() {\n                return this._properties.proportionalSize\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * Set all properties of a Sizeable in one method.\n         *\n         * @param {Object} properties Properties object - see example\n         *\n         * @example\n         * node.properties = {\n         *   sizeMode: {x:'absolute', y:'proportional', z:'absolute'},\n         *   absoluteSize: {x:300, y:100, z:200},\n         *   proportionalSize: {x:1, z:0.5}\n         * }\n         */\n        properties: {\n            set(properties = {}) {\n                if (properties.sizeMode)\n                    this.sizeMode = properties.sizeMode\n\n                if (properties.absoluteSize)\n                    this.absoluteSize = properties.absoluteSize\n\n                if (properties.proportionalSize)\n                    this.proportionalSize = properties.proportionalSize\n            },\n            // no need for a properties getter.\n            configurable: true,\n        },\n    })\n\n    // for use by MotorHTML, convenient since HTMLElement attributes are all\n    // converted to lowercase by default, so if we don't do this then we won't be\n    // able to map attributes to Node setters as easily.\n    makeLowercaseSetterAliases(Sizeable.prototype)\n\n    Object.defineProperty(Sizeable, Symbol.hasInstance, {\n        value: function(obj) {\n            if (this !== Sizeable) return Object.getPrototypeOf(Sizeable)[Symbol.hasInstance].call(this, obj)\n\n            let currentProto = obj\n\n            while (currentProto) {\n                const desc = Object.getOwnPropertyDescriptor(currentProto, \"constructor\")\n\n                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol))\n                    return true\n\n                currentProto = Object.getPrototypeOf(currentProto)\n            }\n\n            return false\n        }\n    })\n\n    Sizeable[instanceofSymbol] = true\n\n    return Sizeable\n}\n\nconst Sizeable = SizeableMixin(class{})\nSizeable.mixin = SizeableMixin\n\nexport {Sizeable as default}\n"],"names":["super","this"],"mappings":";;;;;;;AAAA,AAAS,AAA0B,AAAQ,AAAW;;AACtD,AAAO,AAAQ,AAAM,AAAY;;;;AACjC,AAAO,AAAS,AAAM,AAAa;;;;AACnC,AAAO,AAAU,AAAM,AAAc;;;;AACrC,AAAO,AAAK,AAAM,AAAS;;;;;;;AAG3B,IAAI,OAAO,AAAQ,SAAC,AAAa,cAAC,AAAK,AAAC,OAAC,AAAK,MAAC,AAAS,aAAI,AAAW,aAAE;AACrE,AAAM,WAAC,AAAc,eAAC,AAAmB,oBAAC,AAAS,WAAE,AAAW;AAC5D,AAAG,sBAAA,IAAC,AAAK,OAAE;AACP,AAAI,iBAAC,AAAe,kBAAG,AAAK;AAC/B;AACD,AAAG,sBAAA,MAAG;AACF,mBAAO,AAAI,KAAC,AAAe;AAC9B;AACD,AAAU,oBAAE,AAAI,AACnB,AAAC;AARgE;AASrE;;AAED,MAAM,AAAgB,mBAAG,AAAM,OAAC,AAAkB,AAAC;;AAEnD,MAAM,AAAa,gBAAG,UAAA,AAAI,MAAC,AAAG;;;;;AAK1B,QAAM,AAAQ,AAA+C;AAAC,AAE1D,iBAAW,SAAC,AAAY,SAAL,AAAO;oCAAP,UAAG,AAAE,AAAG;;AACvB,AAAK,uBAAA,KAAC,MAAA,AAAO,AAAC;;AAEd,AAAI,iBAAC,AAAkB,qBAAG,AAAI;AAC9B,AAAI,iBAAC,AAAe,kBAAG,EAAE,AAAC,GAAC,AAAC,GAAE,AAAC,GAAC,AAAC,GAAE,AAAC,GAAC,AAAC,AAAE;AACxC,AAAI,iBAAC,AAAW,cAAG,AAAE;AACrB,AAAI,iBAAC,AAAqB,AAAE;AAC5B,AAAI,iBAAC,AAAqB,AAAE;AAC5B,AAAI,iBAAC,AAAU,aAAG,AAAO;AAC5B;;;;yCAAA;;AAED,2BAAA,AAAqB,iCAAA,wBAAG;AACpB,AAAM,mBAAC,AAAM,OAAC,AAAI,KAAC,AAAW;AAC1B,AAAQ,0BAAU,AAAI,AAAS,wBAAC,AAAU,YAAE,AAAU,YAAE,AAAU,AAAC;AACnE,AAAY,8BAAM,AAAI,AAAS,wBAAC,AAAC,GAAE,AAAC,GAAE,AAAC,AAAC;AACxC,AAAgB,kCAAE,AAAI,AAAS,wBAAC,AAAC,GAAE,AAAC,GAAE,AAAC,AAAC,AAC3C,AAAC;AAJ8B;AAKnC;;AAED,2BAAA,AAAqB,iCAAA,wBAAG,AAAC;yBAAA;;AACrB,AAAI,iBAAC,AAAW,YAAC,AAAQ,SAAC,AAAE,GAAC,AAAc,gBACvC,YAAG,AAAG;uBAAA,AAAI,OAAC,AAAY,aAAC,AAAgB,kBAAE,AAAU,AAAC;AAAA,AAAC;AAC1D,AAAI,iBAAC,AAAW,YAAC,AAAY,aAAC,AAAE,GAAC,AAAc,gBAC3C,YAAG,AAAG;uBAAA,AAAI,OAAC,AAAY,aAAC,AAAgB,kBAAE,AAAc,AAAC;AAAA,AAAC;AAC9D,AAAI,iBAAC,AAAW,YAAC,AAAgB,iBAAC,AAAE,GAAC,AAAc,gBAC/C,YAAG,AAAG;uBAAA,AAAI,OAAC,AAAY,aAAC,AAAgB,kBAAE,AAAkB,AAAC;AAAA,AAAC;AACrE;;AAED,2BAAA,AAAS,qBAAA,YAAG;AACR,kBAAM,AAAc,iBAAG,AAAI,KAAC,AAAe;AAC3C,kBAAM,AAAY,eAAG,kBAAC,AAAG,AAAc,AAAC;AACxC,kBAAM,AAAK,QAAG,AAAI,KAAC,AAAW;AAC9B,kBAAM,AAAU,aAAG,AAAI,KAAC,AAAc,AAAE;;AAExC,gBAAI,AAAK,MAAC,AAAQ,SAAC,AAAE,MAAI,AAAU,YAAE;AACjC,AAAc,+BAAC,AAAC,IAAG,AAAK,MAAC,AAAY,aAAC,AAAE;AAC3C,mBACI;;AACD,AAAc,+BAAC,AAAC,IAAG,AAAU,WAAC,AAAC,IAAG,AAAK,MAAC,AAAgB,iBAAC,AAAE;AAC9D;;AAED,gBAAI,AAAK,MAAC,AAAQ,SAAC,AAAE,MAAI,AAAU,YAAE;AACjC,AAAc,+BAAC,AAAC,IAAG,AAAK,MAAC,AAAY,aAAC,AAAE;AAC3C,mBACI;;AACD,AAAc,+BAAC,AAAC,IAAG,AAAU,WAAC,AAAC,IAAG,AAAK,MAAC,AAAgB,iBAAC,AAAE;AAC9D;;AAED,gBAAI,AAAK,MAAC,AAAQ,SAAC,AAAE,MAAI,AAAU,YAAE;AACjC,AAAc,+BAAC,AAAC,IAAG,AAAK,MAAC,AAAY,aAAC,AAAE;AAC3C,mBACI;;AACD,AAAc,+BAAC,AAAC,IAAG,AAAU,WAAC,AAAC,IAAG,AAAK,MAAC,AAAgB,iBAAC,AAAE;AAC9D;;AAED,gBACI,AAAY,aAAC,AAAC,MAAK,AAAc,eAAC,AAAC,KAChC,AAAY,aAAC,AAAC,MAAK,AAAc,eAAC,AAAC,KACnC,AAAY,aAAC,AAAC,MAAK,AAAc,eAAC,AAAC,GACxC;AACE,AAAI,qBAAC,AAAY,aAAC,AAAY,cAAE,kBAAC,AAAG,AAAc,AAAC,AAAC;AACvD;AACJ;;AAED,2BAAA,AAAc,0BAAA,iBAAG;AACb,mBAAO,AAAI,KAAC,AAAO,UAAG,AAAI,KAAC,AAAO,QAAC,AAAe,kBAAG,EAAC,AAAC,GAAC,AAAC,GAAC,AAAC,GAAC,AAAC,GAAC,AAAC,GAAC,AAAC,AAAC;AACrE;;AAED,2BAAA,AAAe,2BAAA,gBAAC,AAAK,OAAE,AAAI,MAAE,AAAQ,UAAE,AAAC;yBAAA;;AACpC,gBAAI,AAAC,EACD,AAAQ,oBAAY,AAAM,UAC1B,AAAQ,oBAAY,AAAK,SACzB,AAAQ,oBAAY,AAAQ,AAC/B,WAAE;AACC,sBAAM,IAAI,AAAS,AAAC,UAAA,AAAmB,uBAAE,AAAK,MAAC,AAAI,OAAE,MAAE,AAAI,OAAE,AAAC,AAAC;AAClE;;AAED,gBAAI,AAAM,SAAG,AAAK;;AAElB,gBAAI,AAAQ,oBAAY,AAAQ,UAAE;;AAE9B,oBAAI,CAAC,AAAI,KAAC,AAAkB,oBAAE;AAAA,AAAI,yBAAC,AAAkB,qBAAG,IAAI,AAAG;AAAA;;AAE/D,oBAAI,AAAI,KAAC,AAAkB,mBAAC,AAAG,IAAC,AAAI,AAAC,OACjC;AAAA,AAAK,oCAAC,AAAgB,iBAAC,AAAI,KAAC,AAAkB,mBAAC,AAAG,IAAC,AAAI,AAAC,AAAC;AAAA;;AAE7D,AAAI,qBAAC,AAAkB,mBAAC,AAAG,IAAC,AAAI,sBACtB,AAAa,cAAC,UAAA,AAAI,MAAC,AAAG;AACxB,0BAAM,AAAM,SAAG,AAAQ,SACnB,AAAI,OAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,IACzB,AAAI,OAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,IACzB,AAAI,OAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,IACzB,AAAI,AACP;;AAED,wBAAI,AAAM,WAAK,AAAK,OAAE;AAClB,AAAI,+BAAC,AAAkB,mBAAC,AAAM,OAAC,AAAI,AAAC;AACpC,+BAAO,AAAK;AACf;;AAED,AAAI,2BAAC,AAAI,AAAC,QAAG,AAAM;AACtB,AAAC,AACL,iBAfG,AAAK;AAgBZ,uBACQ,AAAQ,oBAAY,AAAK,OAAE;AAChC,oBAAI,OAAO,AAAQ,SAAC,AAAC,AAAC,MAAI,AAAW,aAAE;AAAE,AAAI,yBAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,KAAG,AAAQ,SAAC,AAAC,AAAC,AAAC,GAAC,AAAM,SAAG,AAAI;AAAE;AACjG,oBAAI,OAAO,AAAQ,SAAC,AAAC,AAAC,MAAI,AAAW,aAAE;AAAE,AAAI,yBAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,KAAG,AAAQ,SAAC,AAAC,AAAC,AAAC,GAAC,AAAM,SAAG,AAAI;AAAE;AACjG,oBAAI,OAAO,AAAQ,SAAC,AAAC,AAAC,MAAI,AAAW,aAAE;AAAE,AAAI,yBAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,KAAG,AAAQ,SAAC,AAAC,AAAC,AAAC,GAAC,AAAM,SAAG,AAAI;AAAE;AACpG,aAJI,MAKA;AACD,oBAAI,OAAO,AAAQ,SAAC,AAAC,KAAI,AAAW,aAAE;AAAE,AAAI,yBAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,KAAG,AAAQ,SAAC,AAAC,AAAC,EAAC,AAAM,SAAG,AAAI;AAAE;AAC/F,oBAAI,OAAO,AAAQ,SAAC,AAAC,KAAI,AAAW,aAAE;AAAE,AAAI,yBAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,KAAG,AAAQ,SAAC,AAAC,AAAC,EAAC,AAAM,SAAG,AAAI;AAAE;AAC/F,oBAAI,OAAO,AAAQ,SAAC,AAAC,KAAI,AAAW,aAAE;AAAE,AAAI,yBAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAE,KAAG,AAAQ,SAAC,AAAC,AAAC,EAAC,AAAM,SAAG,AAAI;AAAE;AAClG;;AAED,gBAAI,AAAM,QAAE;AAAA,AAAI,qBAAC,AAAY,aAAC,AAAgB,kBAAE,AAAI,AAAC;AAAA;AACxD;;AAED,2BAAA,AAAkB,8BAAA,mBAAC,AAAK,OAAE,AAAI,MAAE,AAAQ,UAAE,AAAI,MAAE,AAAC;yBAAA;;AAC7C,gBAAI,AAAC,EAAC,OAAO,AAAQ,YAAI,AAAI,QAAI,AAAQ,oBAAY,AAAQ,AAAC,WAC1D;AAAA,sBAAM,IAAI,AAAS,AAAC,UAAA,AAAmB,uBAAE,AAAK,MAAC,AAAI,OAAE,MAAE,AAAI,OAAE,AAAC,AAAC;AAAA;;AAEnE,gBAAI,AAAQ,oBAAY,AAAQ,UAAE;;AAE9B,AAAK,gCAAC,AAAa,cAAC,UAAA,AAAI,MAAC,AAAG;AACxB,0BAAM,AAAM,SAAG,AAAQ,SACnB,AAAI,OAAC,AAAW,YAAC,AAAI,AAAC,OACtB,AAAI,AACP;;AAED,wBAAI,AAAM,WAAK,AAAK,OAAE;AAAA,+BAAO,AAAK;AAAA;;AAElC,AAAI,2BAAC,AAAI,AAAC,QAAG,AAAM;AACtB,AAAC;AACL,mBACI;AACD,AAAI,qBAAC,AAAW,YAAC,AAAI,AAAC,QAAG,AAAQ;AACjC,AAAI,qBAAC,AAAY,aAAC,AAAgB,kBAAE,AAAI,AAAC;AAC5C;AACJ;;AAED,2BAAA,AAAO,mBAAA,UAAG;;;;;AAKT,AACJ;;;MArJsB,AAAQ,mBAAC,AAAK,MAAC,AAAU,qBAAC,AAAK,MAAC,AAAI,AAAC,AAqJ3D;;;;AAID,AAAM,WAAC,AAAgB,iBAAC,AAAQ,SAAC,AAAS;;;;;;;;;;AAUtC,AAAQ;AACJ,AAAG,0BAAA,IAAC,AAAQ,UAAE;AACV,AAAI,qBAAC,AAAe,gBAAC,AAAQ,UAAE,AAAU,YAAE,AAAQ,AAAC;AACvD;AACD,AAAG,0BAAA,MAAG;AACF,uBAAO,AAAI,KAAC,AAAW,YAAC,AAAQ;AACnC;AACD,AAAY,0BAAE,AAAI;AAClB,AAAU,wBAAE,AAAI,AACnB;AATS;;;;;;;;AAiBV,AAAY;AACR,AAAG,0BAAA,IAAC,AAAQ,UAAE;AACV,AAAI,qBAAC,AAAe,gBAAC,AAAQ,UAAE,AAAc,gBAAE,AAAQ,AAAC;AAC3D;AACD,AAAG,0BAAA,MAAG;AACF,uBAAO,AAAI,KAAC,AAAW,YAAC,AAAY;AACvC;AACD,AAAY,0BAAE,AAAI;AAClB,AAAU,wBAAE,AAAI,AACnB;AATa;;;;;;;;;;;;;AAsBd,AAAU;AACN,AAAG,0BAAA,MAAG;AACF,AAAa,oBAAA,MAAG,AAAI,KAAC,AAAe;AAA7B,oBAAA,AAAC;AAAC,oBAAA,AAAC;AAAC,oBAAA,AAAC,QAAN,AAAE,AAAE,AAAE,AAAwB;AACpC,uBAAO,EAAC,GAAA,AAAC,GAAC,GAAA,AAAC,GAAC,GAAA,AAAC,AAAC;AACjB;AACD,AAAY,0BAAE,AAAI;AAClB,AAAU,wBAAE,AAAI,AACnB;AAPW;;;;;;;;;;;;AAmBZ,AAAgB;AACZ,AAAG,0BAAA,IAAC,AAAQ,UAAE;AACV,AAAI,qBAAC,AAAe,gBAAC,AAAQ,UAAE,AAAkB,oBAAE,AAAQ,AAAC;AAC/D;AACD,AAAG,0BAAA,MAAG;AACF,uBAAO,AAAI,KAAC,AAAW,YAAC,AAAgB;AAC3C;AACD,AAAY,0BAAE,AAAI;AAClB,AAAU,wBAAE,AAAI,AACnB;AATiB;;;;;;;;;;;;;;AAuBlB,AAAU;AACN,AAAG,0BAAA,IAAC,AAAe,YAAL,AAAO;2CAAP,aAAG,AAAE,AAAG;;AAClB,oBAAI,AAAU,WAAC,AAAQ,UACnB;AAAA,AAAI,yBAAC,AAAQ,WAAG,AAAU,WAAC,AAAQ;AAAA;;AAEvC,oBAAI,AAAU,WAAC,AAAY,cACvB;AAAA,AAAI,yBAAC,AAAY,eAAG,AAAU,WAAC,AAAY;AAAA;;AAE/C,oBAAI,AAAU,WAAC,AAAgB,kBAC3B;AAAA,AAAI,yBAAC,AAAgB,mBAAG,AAAU,WAAC,AAAgB;AAAA;AAC1D;;AAED,AAAY,0BAAE,AAAI,AACrB,AACJ,AAAC;AAdc;AA3F4B;;;;;AA8G5C,AAA0B,6CAAC,AAAQ,SAAC,AAAS,AAAC;;AAE9C,AAAM,WAAC,AAAc,eAAC,AAAQ,UAAE,AAAM,OAAC,AAAW;AAC9C,AAAK,eAAE,UAAS,AAAG,KAAE;AACjB,gBAAI,AAAI,SAAK,AAAQ,UAAE;AAAA,uBAAO,AAAM,OAAC,AAAc,eAAC,AAAQ,AAAC,UAAC,AAAM,OAAC,AAAW,AAAC,aAAC,AAAI,KAAC,AAAI,MAAE,AAAG,AAAC;AAAA;;AAEjG,gBAAI,AAAY,eAAG,AAAG;;AAEtB,mBAAO,AAAY,cAAE;AACjB,sBAAM,AAAI,OAAG,AAAM,OAAC,AAAwB,yBAAC,AAAY,cAAE,AAAa,AAAC;;AAEzE,oBAAI,AAAI,QAAI,AAAI,KAAC,AAAK,SAAI,AAAI,KAAC,AAAK,MAAC,AAAc,eAAC,AAAgB,AAAC,mBACjE;AAAA,2BAAO,AAAI;AAAA;;AAEf,AAAY,+BAAG,AAAM,OAAC,AAAc,eAAC,AAAY,AAAC;AACrD;;AAED,mBAAO,AAAK;AACf,AACJ,AAAC;AAjBkD;;AAmBpD,AAAQ,aAAC,AAAgB,AAAC,oBAAG,AAAI;;AAEjC,WAAO,AAAQ;AAClB;;AAED,MAAM,AAAQ;AAAsB,0BAAA,AAAE;;;AAAA,AAAC,GAAtB,AAAa,AAAC;AAC/B,AAAQ,SAAC,AAAK,QAAG,AAAa,AAE9B;;QAAoB,AAAO,AAAC,UAApB,AAAQ"}