'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ValueProcessor;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _three = require('three');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var twoOrMoreSpaces = /\s\s+/g;

function ValueProcessor(Base) {
    Base = Base || function () {
        function _class() {
            (0, _classCallCheck3.default)(this, _class);
        }

        return _class;
    }();

    return function (_Base) {
        (0, _inherits3.default)(ValueProcessor, _Base);

        function ValueProcessor() {
            (0, _classCallCheck3.default)(this, ValueProcessor);

            return (0, _possibleConstructorReturn3.default)(this, (ValueProcessor.__proto__ || (0, _getPrototypeOf2.default)(ValueProcessor)).apply(this, arguments));
        }

        (0, _createClass3.default)(ValueProcessor, [{
            key: 'processColorValue',
            value: function processColorValue(value, context, prop) {
                context = context || this.threeObject3d;
                prop = prop || 'color';
                context[prop] = new _three.Color(value);
            }
        }, {
            key: 'processNumberValue',
            value: function processNumberValue(prop, value, context) {
                context = context || this.threeObject3d;
                var number = parseFloat(value);

                if (isNaN(number)) {

                    console.warn(("The value for the \"" + prop + "\" attribute should be a number. It\n                    is passed to window.parseFloat. Your value (\"" + value + "\")\n                    cannot be parsed into a number (it becomes NaN).").replace(twoOrMoreSpaces, ' '));
                }

                context[prop] = number;
            }
        }]);

        return ValueProcessor;
    }(Base);
}