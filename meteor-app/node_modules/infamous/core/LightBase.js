'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Node = require('./Node');

var _Node2 = _interopRequireDefault(_Node);

var _ValueProcessor2 = require('./ValueProcessor');

var _ValueProcessor3 = _interopRequireDefault(_ValueProcessor2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// base class for light elements.

var LightBase = function (_ValueProcessor) {
    (0, _inherits3.default)(LightBase, _ValueProcessor);

    function LightBase() {
        (0, _classCallCheck3.default)(this, LightBase);

        return (0, _possibleConstructorReturn3.default)(this, (LightBase.__proto__ || (0, _getPrototypeOf2.default)(LightBase)).apply(this, arguments));
    }

    (0, _createClass3.default)(LightBase, [{
        key: 'construct',
        value: function construct(options) {
            if (options === void 0) options = {};

            (0, _get3.default)(LightBase.prototype.__proto__ || (0, _getPrototypeOf2.default)(LightBase.prototype), 'construct', this).call(this, options);
        }
    }, {
        key: 'attributeChangedCallback',
        value: function attributeChangedCallback(attr, oldVal, newVal) {
            (0, _get3.default)(LightBase.prototype.__proto__ || (0, _getPrototypeOf2.default)(LightBase.prototype), 'attributeChangedCallback', this).call(this, attr, oldVal, newVal);

            // TODO belongs in Light base class
            if (attr == 'color') {
                this.processColorValue(newVal);
                this._needsToBeRendered();
            } else if (attr == 'intensity') {
                this.processNumberValue(attr, newVal);
                this._needsToBeRendered();
            }
        }
    }], [{
        key: 'observedAttributes',
        get: function () {
            return (0, _get3.default)(LightBase.__proto__ || (0, _getPrototypeOf2.default)(LightBase), 'observedAttributes', this).concat(['color', 'intensity']);
        }
    }]);

    return LightBase;
}((0, _ValueProcessor3.default)(_Node2.default));

exports.default = LightBase;