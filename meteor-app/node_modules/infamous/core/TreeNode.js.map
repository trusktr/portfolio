{"version":3,"file":"TreeNode.js","sources":["../../src/core/TreeNode.js"],"sourcesContent":["const instanceofSymbol = Symbol('instanceofSymbol')\n\nconst TreeNodeMixin = base => {\n    class TreeNode extends base {\n\n        constructor(options = {}) {\n            super(options)\n            this._parent = null // default to no parent.\n            this._children = [];\n        }\n\n        /**\n         * this._parent is protected (node's can access other node._parent).\n         * The user should use the addChild methods, which automatically handles\n         * setting a parent.\n         *\n         * @readonly\n         */\n        get parent() {\n            return this._parent\n        }\n\n        /**\n         * @readonly\n         */\n        get children() {\n            // return a new array, so that the user modifying it doesn't affect\n            // this node's actual children.\n            return [...this._children]\n        }\n\n        /**\n         * Add a child node to this TreeNode.\n         *\n         * @param {TreeNode} childNode The child node to add.\n         */\n        addChild (childNode) {\n\n            if (! (childNode instanceof TreeNode))\n                throw new TypeError('TreeNode.addChild expects the childNode argument to be a TreeNode instance.')\n\n            if (childNode._parent === this)\n                throw new ReferenceError('childNode is already a child of this parent.')\n\n            if (childNode._parent)\n                childNode._parent.removeChild(childNode)\n\n            childNode._parent = this;\n\n            this._children.push(childNode);\n\n            return this\n        }\n\n        /**\n         * Add all the child nodes in the given array to this node.\n         *\n         * @param {Array.TreeNode} nodes The nodes to add.\n         */\n        addChildren(nodes) {\n            nodes.forEach(node => this.addChild(node))\n            return this\n        }\n\n        /**\n         * Remove a child node from this node.\n         *\n         * @param {TreeNode} childNode The node to remove.\n         */\n        removeChild(childNode) {\n            if (! (childNode instanceof TreeNode))\n                throw new Error(`\n                    TreeNode.removeChild expects the childNode argument to be an\n                    instance of TreeNode. There should only be TreeNodes in the\n                    tree.\n                `)\n\n            if (childNode._parent !== this)\n                throw new ReferenceError('childNode is not a child of this parent.')\n\n            childNode._parent = null\n            this._children.splice(this._children.indexOf(childNode), 1);\n\n            return this\n        }\n\n        /**\n         * Remove all the child nodes in the given array from this node.\n         *\n         * @param {Array.TreeNode} nodes The nodes to remove.\n         */\n        removeChildren(nodes) {\n            nodes.forEach(node => this.removeChild(node))\n            return this\n        }\n\n        /**\n         * Shortcut to remove all children.\n         */\n        removeAllChildren() {\n            this.removeChildren(this._children)\n            return this\n        }\n\n        /**\n         * @readonly\n         * @return {number} How many children this TreeNode has.\n         */\n        get childCount() {\n            return this._children.length\n        }\n    }\n\n    Object.defineProperty(TreeNode, Symbol.hasInstance, {\n        value: function(obj) {\n            if (this !== TreeNode) return Object.getPrototypeOf(TreeNode)[Symbol.hasInstance].call(this, obj)\n\n            let currentProto = obj\n\n            while(currentProto) {\n                const desc = Object.getOwnPropertyDescriptor(currentProto, \"constructor\")\n\n                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol))\n                    return true\n\n                currentProto = Object.getPrototypeOf(currentProto)\n            }\n\n            return false\n        }\n    })\n\n    TreeNode[instanceofSymbol] = true\n\n    return TreeNode\n}\n\nconst TreeNode = TreeNodeMixin(class{})\nTreeNode.mixin = TreeNodeMixin\n\nexport {TreeNode as default}\n"],"names":["super","this"],"mappings":"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"}