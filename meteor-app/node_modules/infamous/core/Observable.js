'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _hasInstance = require('babel-runtime/core-js/symbol/has-instance');

var _hasInstance2 = _interopRequireDefault(_hasInstance);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var instanceofSymbol = (0, _symbol2.default)('instanceofSymbol');

var ObservableMixin = function (base) {
    var Observable = function (_base) {
        (0, _inherits3.default)(Observable, _base);

        function Observable() {
            (0, _classCallCheck3.default)(this, Observable);

            return (0, _possibleConstructorReturn3.default)(this, (Observable.__proto__ || (0, _getPrototypeOf2.default)(Observable)).apply(this, arguments));
        }

        (0, _createClass3.default)(Observable, [{
            key: 'construct',
            value: function construct() {
                var args = [],
                    len = arguments.length;
                while (len--) args[len] = arguments[len];

                (ref = (0, _get3.default)(Observable.prototype.__proto__ || (0, _getPrototypeOf2.default)(Observable.prototype), 'construct', this)).call.apply(ref, [this].concat(args));
                var ref;
            }
        }, {
            key: 'on',
            value: function on(eventName, callback) {
                if (!this._eventMap) {
                    this._eventMap = new _map2.default();
                }

                if (!this._eventMap.has(eventName)) {
                    this._eventMap.set(eventName, []);
                }

                if (typeof callback == 'function') {
                    this._eventMap.get(eventName).push(callback);
                } else {
                    throw new Error('Expected a function in callback argument of Observable#on.');
                }
            }
        }, {
            key: 'off',
            value: function off(eventName, callback) {
                if (!this._eventMap || !this._eventMap.has(eventName)) {
                    return;
                }

                var callbacks = this._eventMap.get(eventName);

                if (callbacks.indexOf(callback) === -1) {
                    return;
                }

                callbacks.splice(callbacks.indexOf(callback), 1);

                if (callbacks.length === 0) {
                    this._eventMap.delete(eventName);
                }

                if (this._eventMap.size === 0) {
                    this._eventMap = null;
                }
            }
        }, {
            key: 'trigger',
            value: function trigger(eventName, data) {
                if (!this._eventMap || !this._eventMap.has(eventName)) {
                    return;
                }

                var callbacks = this._eventMap.get(eventName);

                for (var i = 0, len = callbacks.length; i < len; i += 1) {
                    callbacks[i](data);
                }
            }
        }, {
            key: 'triggerEvent',
            value: function triggerEvent() {
                var args = [],
                    len = arguments.length;
                while (len--) args[len] = arguments[len];

                return (ref = this).trigger.apply(ref, args);
                var ref;
            }
        }]);

        return Observable;
    }(base);

    (0, _defineProperty2.default)(Observable, _hasInstance2.default, {
        value: function (obj) {
            if (this !== Observable) {
                return (0, _getPrototypeOf2.default)(Observable)[_hasInstance2.default].call(this, obj);
            }

            var currentProto = obj;

            while (currentProto) {
                var desc = (0, _getOwnPropertyDescriptor2.default)(currentProto, "constructor");

                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol)) {
                    return true;
                }

                currentProto = (0, _getPrototypeOf2.default)(currentProto);
            }

            return false;
        }
    });

    Observable[instanceofSymbol] = true;

    return Observable;
};

var Observable = ObservableMixin(function () {
    function _class() {
        (0, _classCallCheck3.default)(this, _class);
    }

    return _class;
}());
Observable.mixin = ObservableMixin;

exports.default = Observable;