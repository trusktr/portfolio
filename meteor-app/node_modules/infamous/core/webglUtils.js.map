{"version":3,"file":"webglUtils.js","sources":["../../src/core/webglUtils.js"],"sourcesContent":["// TODO:\n//  - Finish lookAt from the camera tutorial.\n\nlet targetContextMap = new WeakMap\n\nexport\nfunction createWebGLContext(target, version) {\n    const canvas = createCanvas('100%', '100%')\n    const gl = getGl(canvas, version)\n\n    if (gl) {\n        if (targetContextMap.has(target)) removeWebGLContext(target)\n        target.appendChild(canvas)\n        targetContextMap.set(target, gl)\n    }\n\n    return gl\n}\n\nexport\nfunction removeWebGLContext(target) {\n    const gl = targetContextMap.get(target)\n    target.removeChild(gl.canvas)\n}\n\nfunction createCanvas(width, height) {\n    const canvas = document.createElement('canvas')\n    setCanvasCSSSize(canvas, width, height)\n    return canvas\n}\n\nfunction setCanvasCSSSize(canvas, width, height) {\n    canvas.style.width = width\n    canvas.style.height = height\n}\n\nexport\nfunction setGlResolution(gl, width, height) {\n    setCanvasRenderSize(gl.canvas, width, height)\n    gl.viewport(0, 0, width, height)\n}\n\nfunction setCanvasRenderSize(canvas, width, height) {\n    canvas.width = width\n    canvas.height = height\n}\n\nfunction getGl(canvasOrSelector, version) {\n    let canvas\n\n    if (canvasOrSelector instanceof HTMLCanvasElement)\n        canvas = canvasOrSelector\n\n    if (!canvas)\n        canvas = document.querySelector(canvasOrSelector)\n\n    if (!(canvas instanceof HTMLCanvasElement)) return false\n\n    if (version == 1 || version == undefined) version = ''\n    else if (version == 2) version = '2'\n    else throw new Error('Invalid WebGL version.')\n\n    return canvas.getContext('webgl'+version)\n}\n\nexport\nfunction createShader(gl, type, source) {\n    // Create a vertex shader object\n    const shader = gl.createShader(type)\n\n    // Attach vertex shader source code\n    gl.shaderSource(shader, source)\n\n    // Compile the vertex shader\n    gl.compileShader(shader)\n\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n\n    if (success) return shader\n\n    const error = new Error(\"*** Error compiling shader '\" + shader + \"':\" + gl.getShaderInfoLog(shader))\n    gl.deleteShader(shader)\n    throw error\n}\n\nexport\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    // Create a shader program object to store\n    // the combined shader program\n    const program = gl.createProgram()\n\n    // Attach a vertex shader\n    gl.attachShader(program, vertexShader)\n\n    // Attach a fragment shader\n    gl.attachShader(program, fragmentShader)\n\n    // Link both programs\n    gl.linkProgram(program)\n\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS)\n    if (success) {\n        return program\n    }\n\n    console.log(' --- Error making program. GL Program Info Log:', gl.getProgramInfoLog(program))\n    gl.deleteProgram(program)\n}\n\nexport\nconst v3 = {\n    cross(a, b) {\n        return [\n            a[1] * b[2] - a[2] * b[1],\n            a[2] * b[0] - a[0] * b[2],\n            a[0] * b[1] - a[1] * b[0],\n        ]\n    },\n\n    subtract(a, b) {\n        return [a[0] - b[0], a[1] - b[1], a[2] - b[2]]\n    },\n\n    add(a, b) {\n        return [a[0] + b[0], a[1] + b[1], a[2] + b[2]]\n    },\n\n    normalize(v) {\n        const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2])\n        // make sure we don't divide by 0.\n        if (length > 0.00001) {\n            return [v[0] / length, v[1] / length, v[2] / length]\n        } else {\n            return [0, 0, 0]\n        }\n    },\n}\n\nclass Geometry {\n    constructor(...args) {\n        this._init(...args)\n    }\n\n    _init() {\n        this.verts = null // Float32Array\n        this.normals = null // Float32Array\n        this._colors = null // Float32Array\n        this._color = null\n\n        this._calcVerts()\n        this.color = [ 0.5, 0.5, 0.5 ]\n    }\n\n    // TODO handle CSS color strings with tinycolor2 from NPM\n    // @param {Array.number} value - array of four color values r, g, b, and a.\n    // TODO: don't use accept values for color alpha, use node's opacity.\n    set color(value) {\n        if (!value) return\n\n        this._color = value\n        let color = null\n\n        if (typeof value == 'string')\n            color = value.trim().split(' ').map(rgbPart => parseFloat(rgbPart))\n        else color = value\n\n        // length of _colors array, considering it is four numbers per color,\n        // for each vertex.\n        // TODO: use a uniform instead of attributes that are all the same\n        // value.\n        const l = this.verts.length\n        const _colorsLength = l + l/3\n\n        const _colors = this._colors = new Float32Array(_colorsLength)\n\n        for (let i=0; i<_colorsLength; i+=4) { // 4 color parts per vertex\n            _colors[i+0]  = color[0] // r\n            _colors[i+1]  = color[1] // g\n            _colors[i+2]  = color[2] // b\n            _colors[i+3]  = typeof color[3] == 'undefined' ? 1 : color[3] // a\n        }\n    }\n    get color() {\n        return this._color\n    }\n}\n\nexport\nclass IsoscelesTriangle extends Geometry {\n    _init(width, height) {\n        this.width = width // number\n        this.height = height // number\n\n        super._init()\n    }\n\n    _calcVerts() {\n        const {width, height} = this\n\n        const verts = this.verts = new Float32Array([\n            -width/2, 0, 0,\n            width/2, 0, 0,\n            0, height, 0,\n        ])\n\n        const normal = [0,0,1] // pointing along Z\n        const normals = this.normals = new Float32Array(verts.length)\n\n        for (let i=0, l=verts.length; i<l; i+=3) { // 3 numbers per vertex\n            normals[i+0] = normal[0]\n            normals[i+1] = normal[1]\n            normals[i+2] = normal[2]\n        }\n    }\n}\n\nexport\nclass SymmetricTrapezoid extends Geometry { // extends from TwoDeePolygon, which has same normals code.\n    _init(baseWidth, topWidth, height) {\n        this.baseWidth = baseWidth // number\n        this.topWidth = topWidth // number\n        this.height = height // number\n\n        super._init()\n    }\n\n    _calcVerts() {\n        const {baseWidth, topWidth, height} = this\n\n        const verts = this.verts = new Float32Array([\n            -baseWidth/2, 0, 0,\n            baseWidth/2, 0, 0,\n            topWidth/2, height, 0,\n            topWidth/2, height, 0,\n            -topWidth/2, height, 0,\n            -baseWidth/2, 0, 0,\n        ])\n\n        const normal = [0,0,1] // pointing along Z\n        const normals = this.normals = new Float32Array(verts.length)\n\n        for (let i=0, l=verts.length; i<l; i+=3) { // 3 numbers per vertex\n            normals[i+0] = normal[0]\n            normals[i+1] = normal[1]\n            normals[i+2] = normal[2]\n        }\n    }\n}\n\nexport\nclass Quad extends Geometry {\n    _init(width, height) {\n        this.width = width // number\n        this.height = height // number\n\n        super._init()\n    }\n\n    _calcVerts() {\n        const {width, height} = this\n\n        const verts = this.verts = new Float32Array([\n            -width/2, -height/2, 0,\n            width/2, -height/2, 0,\n            width/2, height/2, 0,\n            width/2, height/2, 0,\n            -width/2, height/2, 0,\n            -width/2, -height/2, 0,\n        ])\n\n        const normal = [0,0,1] // pointing along Z\n        const normals = this.normals = new Float32Array(verts.length)\n\n        for (let i=0, l=verts.length; i<l; i+=3) { // 3 numbers per vertex\n            normals[i+0] = normal[0]\n            normals[i+1] = normal[1]\n            normals[i+2] = normal[2]\n        }\n    }\n}\n\nexport\nclass Cube extends Geometry {\n    _init(x, y, width) {\n        // the top front left corner\n        this.x = x // number\n        this.y = y // number\n        this.width = width // number\n\n        super._init()\n    }\n\n    _calcVerts() {\n        const {x,y, width} = this\n\n        const x2 = x + width\n        const y2 = y + width\n\n        const verts = this.verts = new Float32Array([\n            // front face\n            x, y, 0,\n            x2, y, 0,\n            x2, y2, 0,\n            x2, y2, 0,\n            x, y2, 0,\n            x, y, 0,\n\n            // left face\n            x, y, 0,\n            x, y, -width,\n            x, y2, -width,\n            x, y2, -width,\n            x, y2, 0,\n            x, y, 0,\n\n            // right face\n            x2, y, 0,\n            x2, y, -width,\n            x2, y2, -width,\n            x2, y2, -width,\n            x2, y2, 0,\n            x2, y, 0,\n\n            // back face\n            x, y, -width,\n            x2, y, -width,\n            x2, y2, -width,\n            x2, y2, -width,\n            x, y2, -width,\n            x, y, -width,\n\n            // top face\n            x, y, 0,\n            x, y, -width,\n            x2, y, -width,\n            x2, y, -width,\n            x2, y, 0,\n            x, y, 0,\n\n            // bottom face\n            x, y2, 0,\n            x, y2, -width,\n            x2, y2, -width,\n            x2, y2, -width,\n            x2, y2, 0,\n            x, y2, 0,\n        ])\n\n        const faceNormals = [\n            [0,0,1, ], // front face\n            [-1,0,0, ], // left face\n            [1,0,0,], // right face\n            [0,0,-1,], // back face\n            [0,-1,0, ], // top face\n            [0,1,0,], // bottom face\n        ]\n\n        const normals = this.normals = new Float32Array(verts.length)\n\n        for (let side=0, i=0, l=verts.length; i<l; i+=6*3, side+=1) { // 6 vertices per side, 3 numbers per vertex normal\n\n            // first vertex\n            normals[i+0]  = faceNormals[side][0]\n            normals[i+1]  = faceNormals[side][1]\n            normals[i+2]  = faceNormals[side][2]\n\n            // second vertex\n            normals[i+3]  = faceNormals[side][0]\n            normals[i+4]  = faceNormals[side][1]\n            normals[i+5]  = faceNormals[side][2]\n\n            // third vertex\n            normals[i+6]  = faceNormals[side][0]\n            normals[i+7]  = faceNormals[side][1]\n            normals[i+8]  = faceNormals[side][2]\n\n            // fourth vertex\n            normals[i+9]  = faceNormals[side][0]\n            normals[i+10] = faceNormals[side][1]\n            normals[i+11] = faceNormals[side][2]\n\n            // fifth vertex\n            normals[i+12] = faceNormals[side][0]\n            normals[i+13] = faceNormals[side][1]\n            normals[i+14] = faceNormals[side][2]\n\n            // sixth vertex\n            normals[i+15] = faceNormals[side][0]\n            normals[i+16] = faceNormals[side][1]\n            normals[i+17] = faceNormals[side][2]\n        }\n    }\n}\n\nexport\nclass ThreeSidedPyramid extends Geometry {\n    _init(base, height) {\n        this.base = base\n        this.height = height\n\n        super._init()\n    }\n\n    _calcVerts() {\n        const {base, height} = this\n\n        // base is hypotenuse in following calculations\n\n        // TODO: this can be replaced with a loop that can make any-sided\n        // pyramid.\n        const verts = this.verts = new Float32Array([\n            // base\n            0, 0, 0, // bottom front left\n            base, 0, 0, // bottom front right\n            base/2, 0, -Math.sin(degToRad(60)) * base, // bottom back\n\n            // front\n            base, 0, 0, // bottom front right\n            0, 0, 0, // bottom front left\n            base/2, height, ((Math.sin(degToRad(60)) * base) / (base/2)) * (base/2), // tip top\n\n            // back left\n            0, 0, 0, // bottom front left\n            base/2, 0, -Math.sin(degToRad(60)) * base, // bottom back\n            base/2, height, ((Math.sin(degToRad(60)) * base) / (base/2)) * (base/2), // tip top\n\n            // back right\n            base/2, 0, -Math.sin(degToRad(60)) * base, // bottom back\n            base, 0, 0, // bottom front right\n            base/2, height, ((Math.sin(degToRad(60)) * base) / (base/2)) * (base/2), // tip top\n        ])\n\n        // TODO: normals\n    }\n}\n\nexport\nclass FourSidedPyramid extends Geometry {\n    //_init(base, height) {\n        //this.base = base\n        //this.height = height\n\n        //super._init()\n    //}\n\n    //_calcVerts() {\n        //const {base, height} = this\n\n        //// base is hypotenuse in following calculations\n\n        //// TODO: this can be replaced with a loop that can make any-sided\n        //// pyramid.\n        //const verts = this.verts = new Float32Array([\n            //// base\n            //0, 0, 0, // bottom front left\n            //base, 0, 0, // bottom front right\n            //base, 0, -base, // bottom back right\n            //base, 0, -base, // bottom back right\n            //0, 0, -base, // bottom back left\n            //0, 0, 0, // bottom front left\n\n            //// front\n            //0, 0, 0, // bottom front left\n            //base, 0, 0, // bottom front right\n            //base/2, height, -base/2, // tip top\n\n            //// right\n            //base, 0, 0, // bottom front right\n            //base, 0, -base, // bottom back right\n            //base/2, height, -base/2, // tip top\n\n            //// back\n            //base, 0, -base, // bottom back right\n            //0, 0, -base, // bottom back left\n            //base/2, height, -base/2, // tip top\n\n            //// left\n            //0, 0, -base, // bottom back left\n            //0, 0, 0, // bottom front left\n            //base/2, height, -base/2, // tip top\n        //])\n\n        //const faceNormals = [\n            //// bottom\n            //[0, -1, 0],\n\n            //// front\n            //v3.cross(\n                //[base, 0, 0], // bottom front right\n                //[base/2, height, -base/2] // tip top\n            //),\n\n            //// right\n            //v3.cross(\n                //[base, 0, -base], // bottom back right\n                //[-base/2, height, -base/2] // tip top (-x)\n            //),\n\n            //// left\n            //v3.cross(\n                //[-base, 0, 0], // bottom front right (-x)\n                //[-base/2, height, base/2] // tip top (-x, +z)\n            //),\n\n            //// right\n            //v3.cross(\n                //[0, 0, base], // bottom back left (+z)\n                //[base/2, height, base/2] // tip top (+z)\n            //),\n        //]\n\n        //const normals = this.normals = new Float32Array(verts.length)\n\n        //// bottom (6 verts)\n        //for (let side=0, i=0, l=6*3; i<l; i+=6*3, side+=1) { // 6 vertices per side, 3 numbers per vertex normal\n\n            //// first vertex\n            //normals[i+0]  = faceNormals[side][0]\n            //normals[i+1]  = faceNormals[side][1]\n            //normals[i+2]  = faceNormals[side][2]\n\n            //// second vertex\n            //normals[i+3]  = faceNormals[side][0]\n            //normals[i+4]  = faceNormals[side][1]\n            //normals[i+5]  = faceNormals[side][2]\n\n            //// third vertex\n            //normals[i+6]  = faceNormals[side][0]\n            //normals[i+7]  = faceNormals[side][1]\n            //normals[i+8]  = faceNormals[side][2]\n\n            //// fourth vertex\n            //normals[i+9]  = faceNormals[side][0]\n            //normals[i+10] = faceNormals[side][1]\n            //normals[i+11] = faceNormals[side][2]\n\n            //// fifth vertex\n            //normals[i+12] = faceNormals[side][0]\n            //normals[i+13] = faceNormals[side][1]\n            //normals[i+14] = faceNormals[side][2]\n\n            //// sixth vertex\n            //normals[i+15] = faceNormals[side][0]\n            //normals[i+16] = faceNormals[side][1]\n            //normals[i+17] = faceNormals[side][2]\n        //}\n\n        //// sides (3 verts each)\n        //for (let side=0+1, i=0, l=verts.length - 6*3; i<l; i+=3*3, side+=1) { // 3 vertices per side, 3 numbers per vertex normal\n\n            //// first vertex\n            //normals[i+0]  = faceNormals[side][0]\n            //normals[i+1]  = faceNormals[side][1]\n            //normals[i+2]  = faceNormals[side][2]\n\n            //// second vertex\n            //normals[i+3]  = faceNormals[side][0]\n            //normals[i+4]  = faceNormals[side][1]\n            //normals[i+5]  = faceNormals[side][2]\n\n            //// third vertex\n            //normals[i+6]  = faceNormals[side][0]\n            //normals[i+7]  = faceNormals[side][1]\n            //normals[i+8]  = faceNormals[side][2]\n        //}\n    //}\n\n    _init() {\n        super._init()\n    }\n\n    _calcVerts() {\n        this.verts = new Float32Array([\n            -100 ,0.087303 ,-100\n            ,100 ,0.087303 ,-100\n            ,100 ,0.087303 ,100\n            ,-100 ,0.087303 ,100\n            ,100 ,0.087303 ,100\n            ,100 ,0.087303 ,-100\n            ,0 ,200.087 ,0\n            ,100 ,0.087303 ,-100\n            ,-100 ,0.087303 ,-100\n            ,0 ,200.087 ,0\n            ,-100 ,0.087303 ,-100\n            ,-100 ,0.087303 ,100\n            ,0 ,200.087 ,0\n            ,-100 ,0.087303 ,100\n            ,100 ,0.087303 ,100\n            ,0 ,200.087 ,0\n        ])\n\n        this.normals = new Float32Array([\n            0 ,-1 ,0\n            ,0 ,-1 ,0\n            ,0 ,-1 ,0\n            ,0 ,-1 ,0\n            ,0.894427 ,0.447214 ,0\n            ,0.894427 ,0.447214 ,0\n            ,0.894427 ,0.447214 ,0\n            ,0 ,0.447214 ,-0.894427\n            ,0 ,0.447214 ,-0.894427\n            ,0 ,0.447214 ,-0.894427\n            ,-0.894427 ,0.447214 ,0\n            ,-0.894427 ,0.447214 ,0\n            ,-0.894427 ,0.447214 ,0\n            ,0 ,0.447214 ,0.894427\n            ,0 ,0.447214 ,0.894427\n            ,0 ,0.447214 ,0.894427\n        ])\n    }\n}\n\nexport\nconst m3 = {\n    identity: Object.freeze([\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n    ]),\n\n    translation(tx, ty) {\n        return [\n            1, 0, 0,\n            0, 1, 0,\n            tx, ty, 1,\n        ]\n    },\n\n    rotation(angleInRadians) {\n        const c = Math.cos(angleInRadians)\n        const s = Math.sin(angleInRadians)\n        return [\n            c,-s, 0,\n            s, c, 0,\n            0, 0, 1,\n        ]\n    },\n\n    scaling(sx, sy) {\n        return [\n            sx, 0, 0,\n            0, sy, 0,\n            0, 0, 1,\n        ]\n    },\n\n    // Note: This matrix flips the Y axis so that 0 is at the top.\n    projection(width, height) {\n        // longer version, multiple matrices\n        let matrix = m3.identity\n        matrix = m3.multiply(m3.scaling(1/width, 1/height), matrix) // get the portion of clip space\n        matrix = m3.multiply(m3.scaling(2, 2), matrix) // convert to clip space units\n        matrix = m3.multiply(m3.translation(-1, -1), matrix) // Move from the center to bottom left\n        matrix = m3.multiply(m3.scaling(1, -1), matrix) // move to the top left like DOM\n        return matrix\n\n        // shorter version, manual result of the longer version\n        //return [\n            //2 / width,        0,           0,\n                //0,       -2 / height,      0,\n               //-1,            1,           1\n        //]\n    },\n\n    multiply(a, b) {\n        const a00 = a[0]\n        const a01 = a[1]\n        const a02 = a[2]\n        const a10 = a[3]\n        const a11 = a[4]\n        const a12 = a[5]\n        const a20 = a[6]\n        const a21 = a[7]\n        const a22 = a[8]\n        const b00 = b[0]\n        const b01 = b[1]\n        const b02 = b[2]\n        const b10 = b[3]\n        const b11 = b[4]\n        const b12 = b[5]\n        const b20 = b[6]\n        const b21 = b[7]\n        const b22 = b[8]\n\n        return [\n            b00 * a00 + b01 * a10 + b02 * a20,\n            b00 * a01 + b01 * a11 + b02 * a21,\n            b00 * a02 + b01 * a12 + b02 * a22,\n            b10 * a00 + b11 * a10 + b12 * a20,\n            b10 * a01 + b11 * a11 + b12 * a21,\n            b10 * a02 + b11 * a12 + b12 * a22,\n            b20 * a00 + b21 * a10 + b22 * a20,\n            b20 * a01 + b21 * a11 + b22 * a21,\n            b20 * a02 + b21 * a12 + b22 * a22,\n        ]\n    },\n}\n\nexport\nconst m4 = {\n    identity: Object.freeze([\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1,\n    ]),\n\n    translation(tx, ty, tz) {\n        return [\n            1,  0,  0,  0,\n            0,  1,  0,  0,\n            0,  0,  1,  0,\n            tx, ty, tz, 1,\n        ]\n    },\n\n    xRotation(degrees) {\n        const radians = degToRad(degrees)\n        const c = Math.cos(radians)\n        const s = Math.sin(radians)\n        return [\n            1,  0, 0, 0,\n            0,  c, s, 0,\n            0, -s, c, 0,\n            0,  0, 0, 1,\n        ]\n    },\n\n    yRotation(degrees) {\n        const radians = degToRad(degrees)\n        const c = Math.cos(radians)\n        const s = Math.sin(radians)\n        return [\n            c, 0, -s, 0,\n            0, 1,  0, 0,\n            s, 0,  c, 0,\n            0, 0,  0, 1,\n        ]\n    },\n\n    zRotation(degrees) {\n        const radians = degToRad(degrees)\n        const c = Math.cos(radians)\n        const s = Math.sin(radians)\n        return [\n            c,-s, 0, 0,\n            s, c, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1,\n        ]\n    },\n\n    scaling(sx, sy, sz) {\n        return [\n            sx, 0,  0,  0,\n            0,  sy, 0,  0,\n            0,  0,  sz, 0,\n            0,  0,  0,  1,\n        ]\n    },\n\n    inverse(m) {\n        const m00 = m[0 * 4 + 0]\n        const m01 = m[0 * 4 + 1]\n        const m02 = m[0 * 4 + 2]\n        const m03 = m[0 * 4 + 3]\n        const m10 = m[1 * 4 + 0]\n        const m11 = m[1 * 4 + 1]\n        const m12 = m[1 * 4 + 2]\n        const m13 = m[1 * 4 + 3]\n        const m20 = m[2 * 4 + 0]\n        const m21 = m[2 * 4 + 1]\n        const m22 = m[2 * 4 + 2]\n        const m23 = m[2 * 4 + 3]\n        const m30 = m[3 * 4 + 0]\n        const m31 = m[3 * 4 + 1]\n        const m32 = m[3 * 4 + 2]\n        const m33 = m[3 * 4 + 3]\n        const tmp_0  = m22 * m33\n        const tmp_1  = m32 * m23\n        const tmp_2  = m12 * m33\n        const tmp_3  = m32 * m13\n        const tmp_4  = m12 * m23\n        const tmp_5  = m22 * m13\n        const tmp_6  = m02 * m33\n        const tmp_7  = m32 * m03\n        const tmp_8  = m02 * m23\n        const tmp_9  = m22 * m03\n        const tmp_10 = m02 * m13\n        const tmp_11 = m12 * m03\n        const tmp_12 = m20 * m31\n        const tmp_13 = m30 * m21\n        const tmp_14 = m10 * m31\n        const tmp_15 = m30 * m11\n        const tmp_16 = m10 * m21\n        const tmp_17 = m20 * m11\n        const tmp_18 = m00 * m31\n        const tmp_19 = m30 * m01\n        const tmp_20 = m00 * m21\n        const tmp_21 = m20 * m01\n        const tmp_22 = m00 * m11\n        const tmp_23 = m10 * m01\n\n        const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31)\n        const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31)\n        const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31)\n        const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21)\n\n        const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3)\n\n        return [\n            d * t0,\n            d * t1,\n            d * t2,\n            d * t3,\n            d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n                (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30)),\n            d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n                (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30)),\n            d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n                (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30)),\n            d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n                (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20)),\n            d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n                (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33)),\n            d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n                (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33)),\n            d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n                (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33)),\n            d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n                (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23)),\n            d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n                (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22)),\n            d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n                (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02)),\n            d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n                (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12)),\n            d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n                (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02))\n        ]\n    },\n\n    transpose(m) {\n        return [\n            m[0], m[4], m[8], m[12],\n            m[1], m[5], m[9], m[13],\n            m[2], m[6], m[10], m[14],\n            m[3], m[7], m[11], m[15],\n        ]\n    },\n\n\n    // Note: This matrix flips the Y axis so that 0 is at the top.\n    projection(width, height, depth) {\n        // longer version, multiple matrices\n        //let matrix = m4.identity\n        //matrix = m4.multiply(m4.scaling(1/width, 1/height, 1/depth), matrix) // get the portion of clip space\n        //matrix = m4.multiply(m4.scaling(2, 2, 2), matrix) // convert to clip space units\n        //matrix = m4.multiply(m4.translation(-1, -1, 0), matrix) // Move from the center to bottom left\n        //matrix = m4.multiply(m4.scaling(1, -1, 1), matrix) // move to the top left like DOM\n        //return matrix\n\n        // shorter version, manual result of the longer version\n        return [\n            2 / width, 0,           0,         0,\n            0,         -2 / height, 0,         0,\n            0,         0,           2 / depth, 0,\n            -1,        1,           0,         1,\n        ]\n    },\n\n    // Note: This matrix flips the Y axis so that 0 is at the top.\n    orthographic(left, right, top, bottom, near, far) {\n        return [\n            2 / (right - left), 0, 0, 0,\n            0, 2 / (top - bottom), 0, 0,\n            0, 0, 2 / (near - far), 0,\n\n            (left + right) / (left - right),\n            (bottom + top) / (bottom - top),\n            (near + far) / (near - far),\n            1,\n        ]\n    },\n\n    perspective(fieldOfViewInDegrees, aspect, near, far) {\n        const fieldOfViewInRadians = degToRad(fieldOfViewInDegrees)\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians)\n        const rangeInv = 1.0 / (near - far)\n\n        return [\n            f / aspect, 0, 0, 0,\n            0, f, 0, 0,\n            0, 0, (near + far) * rangeInv, -1,\n            0, 0, near * far * rangeInv * 2, 0\n        ]\n    },\n\n    lookAt(cameraPosition, target, up) {\n        const zAxis = v3.normalize(v3.subtract(cameraPosition, target));\n        const xAxis = v3.cross(up, zAxis);\n        const yAxis = v3.cross(zAxis, xAxis);\n\n        return [\n            xAxis[0], xAxis[1], xAxis[2], 0,\n            yAxis[0], yAxis[1], yAxis[2], 0,\n            zAxis[0], zAxis[1], zAxis[2], 0,\n            cameraPosition[0], cameraPosition[1], cameraPosition[2], 1,\n        ];\n    },\n\n    multiply(a, b) {\n        const a00 = a[0 * 4 + 0]\n        const a01 = a[0 * 4 + 1]\n        const a02 = a[0 * 4 + 2]\n        const a03 = a[0 * 4 + 3]\n        const a10 = a[1 * 4 + 0]\n        const a11 = a[1 * 4 + 1]\n        const a12 = a[1 * 4 + 2]\n        const a13 = a[1 * 4 + 3]\n        const a20 = a[2 * 4 + 0]\n        const a21 = a[2 * 4 + 1]\n        const a22 = a[2 * 4 + 2]\n        const a23 = a[2 * 4 + 3]\n        const a30 = a[3 * 4 + 0]\n        const a31 = a[3 * 4 + 1]\n        const a32 = a[3 * 4 + 2]\n        const a33 = a[3 * 4 + 3]\n        const b00 = b[0 * 4 + 0]\n        const b01 = b[0 * 4 + 1]\n        const b02 = b[0 * 4 + 2]\n        const b03 = b[0 * 4 + 3]\n        const b10 = b[1 * 4 + 0]\n        const b11 = b[1 * 4 + 1]\n        const b12 = b[1 * 4 + 2]\n        const b13 = b[1 * 4 + 3]\n        const b20 = b[2 * 4 + 0]\n        const b21 = b[2 * 4 + 1]\n        const b22 = b[2 * 4 + 2]\n        const b23 = b[2 * 4 + 3]\n        const b30 = b[3 * 4 + 0]\n        const b31 = b[3 * 4 + 1]\n        const b32 = b[3 * 4 + 2]\n        const b33 = b[3 * 4 + 3]\n\n        return [\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\n        ]\n    },\n}\n\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180\n}\n\nexport\nconst vertShaderSource = `\n    attribute vec4 a_vertexPosition;\n    uniform mat4 u_worldViewProjectionMatrix;\n\n    // TODO: awaiting on transpose() method for DOMMatrix\n    //uniform mat4 u_worldInverseTransposeMatrix; // used for correct lighting normals\n\n    attribute vec4 a_color;\n    varying vec4 v_fragColor;\n\n    attribute vec3 a_normal;\n    varying vec3 v_vertNormal;\n\n    uniform mat4 u_worldMatrix;\n\n    uniform vec3 u_lightWorldPosition;\n    varying vec3 v_surfaceToLightVector;\n\n    uniform vec3 u_cameraWorldPosition;\n    varying vec3 v_surfaceToCameraVector;\n\n    attribute vec2 a_textureCoordinate;\n    varying vec2 v_textureCoordinate;\n\n    void main() {\n        vec3 surfaceWorldPosition = (u_worldMatrix * a_vertexPosition).xyz;\n\n        // compute the vector of the surface to the pointLight\n        // and pass it to the fragment shader\n        v_surfaceToLightVector = u_lightWorldPosition - surfaceWorldPosition;\n\n        // compute the vector of the surface to the camera\n        // and pass it to the fragment shader\n        v_surfaceToCameraVector = u_cameraWorldPosition - surfaceWorldPosition;\n\n        gl_Position = u_worldViewProjectionMatrix * a_vertexPosition;\n\n        v_fragColor = a_color;\n        //v_fragColor = gl_Position * 0.5 + 0.5;\n\n        // orient the normals and pass to the fragment shader\n        //v_vertNormal = mat3(u_worldInverseTransposeMatrix) * a_normal; // TODO waiting for transpose() method on DOMMatrix\n        //alternate: v_vertNormal = (u_worldInverseTransposeMatrix * vec4(a_normal, 0)).xyz;\n        v_vertNormal = mat3(u_worldMatrix) * a_normal;\n\n        v_textureCoordinate = a_textureCoordinate;\n    }\n`\n\nexport\nconst fragShaderSource = `\n    // TODO: detect highp support, see\n    // https://github.com/greggman/webgl-fundamentals/issues/80#issuecomment-306746556\n    //precision mediump float;\n    precision highp float;\n\n    varying vec4 v_fragColor;\n    varying vec3 v_vertNormal;\n\n    varying vec3 v_surfaceToLightVector;\n\n    //// TODO: use this for directional lighting (f.e. sunlight or moonlight).\n    //uniform vec3 reverseLightDirection;\n\n    varying vec3 v_surfaceToCameraVector;\n\n    uniform float u_shininess;\n    uniform vec3 u_lightColor;\n    uniform vec3 u_specularColor;\n\n    varying vec2 v_textureCoordinate;\n    uniform sampler2D u_texture;\n    uniform bool u_hasTexture;\n\n    void main(void) {\n\n        // because v_vertNormal is a varying it's interpolated\n        // so it will not be a unit vector. Normalizing it\n        // will make it a unit vector again.\n        vec3 normal = normalize(v_vertNormal);\n\n        vec3 surfaceToCameraDirection = normalize(v_surfaceToCameraVector);\n\n        vec3 surfaceToLightDirection = normalize(v_surfaceToLightVector);\n\n        // represents the unit vector oriented at half of the angle between\n        // surfaceToLightDirection and surfaceToCameraDirection.\n        vec3 halfVector = normalize(surfaceToLightDirection + surfaceToCameraDirection);\n\n        float pointLight = dot(normal, surfaceToLightDirection);\n        float pointLightIntensity = 1.0; // TODO make configurable\n        //float directionalLight = dot(normal, reverseLightDirection); // TODO make configurable\n\n        //float specular = dot(normal, halfVector);\n        float specular = 0.0;\n        if (pointLight > 0.0) {\n            specular = pow(dot(normal, halfVector), u_shininess);\n        }\n\n        // TODO make configurable\n        //vec3 ambientLight = vec3(0.361, 0.184, 0.737); // teal\n        vec3 ambientLight = vec3(1.0, 1.0, 1.0); // white\n        float ambientLightIntensity = 0.3;\n\n        // TODO: user can choose color or texture, default to a color if no texture, etc.\n        // TODO: blend texture on top of color, if texture has alpha.\n        gl_FragColor = v_fragColor;\n        if (u_hasTexture) {\n            gl_FragColor = texture2D(u_texture, v_textureCoordinate);\n        }\n\n        // Lets multiply just the color portion (not the alpha) of\n        // gl_FragColor by the pointLight + directionalLight\n        //gl_FragColor.rgb *= pointLight * u_lightColor; // point light only.\n        //gl_FragColor.rgb *= directionalLight; // directional light only.\n        //gl_FragColor.rgb *= ambientLight; // ambient light only.\n        gl_FragColor.rgb *=\n            //clamp(directionalLight, 0.0, 1.0) +\n            clamp(pointLight, 0.0, 1.0) * u_lightColor * pointLightIntensity +\n            ambientLight * ambientLightIntensity;\n\n        // Just add in the specular\n        gl_FragColor.rgb += specular * u_specularColor;\n\n        //gl_FragColor.a = 0.5;\n    }\n`\n"],"names":[],"mappings":"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C,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;AACxB,cAAM,AAAG,MAAG,AAAC,EAAC,AAAC,IAAG,AAAC,IAAG,AAAC,AAAC;;AAExB,eAAO,CACH,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,KAC7C,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,MAAG,AAAG,AAChD;AACJ,AACJ;AA7QU;;AA+QX,SAAS,AAAQ,SAAC,AAAO,SAAE;AACvB,WAAO,AAAO,UAAG,AAAI,KAAC,AAAE,KAAG,AAAG;AACjC,AAED;;AACA,MAAM,AAAgB,AAAG,8CAAC,AA+C1B,AAAC,AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAM,AAAgB,AAAG,8CAAC,AA4E1B,AAAC"}