{"version":3,"file":"Transformable.js","sources":["../../src/core/Transformable.js"],"sourcesContent":["import XYZValues from './XYZValues'\nimport Sizeable from './Sizeable'\nimport { makeLowercaseSetterAliases } from './Utility'\nimport {isInstanceof} from './Utility'\n\nconst instanceofSymbol = Symbol('instanceofSymbol')\n\nconst TransformableMixin = base => {\n\n    // Transformable extends TreeNode (indirectly through Sizeable) because it\n    // needs to be aware of its _parent when calculating align adjustments.\n    const ParentClass = Sizeable.mixin(base)\n    class Transformable extends ParentClass {\n\n        constructor(options = {}) {\n            super(options)\n\n            this._worldMatrix = null\n        }\n\n        _setDefaultProperties() {\n            super._setDefaultProperties()\n\n            Object.assign(this._properties, {\n                position:   new XYZValues(0, 0, 0),\n                rotation:   new XYZValues(0, 0, 0),\n                scale:      new XYZValues(1, 1, 1),\n                origin:     new XYZValues(0.5, 0.5, 0.5),\n                align:      new XYZValues(0, 0, 0),\n                mountPoint: new XYZValues(0, 0, 0),\n                opacity:    1,\n                transform:  new window.DOMMatrix,\n            })\n        }\n\n        _setPropertyObservers() {\n            super._setPropertyObservers()\n\n            this._properties.position.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'position'))\n            this._properties.rotation.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'rotation'))\n            this._properties.scale.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'scale'))\n            this._properties.origin.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'origin'))\n            this._properties.align.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'align'))\n            this._properties.mountPoint.on('valuechanged',\n                () => this.triggerEvent('propertychange', 'mountPoint'))\n        }\n\n        /**\n         * Takes all the current component values (position, rotation, etc) and\n         * calculates a transformation DOMMatrix from them. See \"W3C Geometry\n         * Interfaces\" to learn about DOMMatrix.\n         *\n         * @method\n         * @private\n         * @memberOf Node\n         */\n        _calculateMatrix () {\n            const matrix = new window.DOMMatrix\n            const properties = this._properties\n\n            const alignAdjustment = [0,0,0]\n            if (this._parent) { // The root Scene doesn't have a parent, for example.\n                const parentSize = this._parent._calculatedSize\n                const {align} = properties\n                alignAdjustment[0] = parentSize.x * align.x\n                alignAdjustment[1] = parentSize.y * align.y\n                alignAdjustment[2] = parentSize.z * align.z\n            }\n\n            const mountPointAdjustment = [0,0,0]\n            const thisSize = this._calculatedSize\n            const {mountPoint} = properties\n            mountPointAdjustment[0] = thisSize.x * mountPoint.x\n            mountPointAdjustment[1] = thisSize.y * mountPoint.y\n            mountPointAdjustment[2] = thisSize.z * mountPoint.z\n\n            const appliedPosition = []\n            const {position} = properties\n            appliedPosition[0] = position.x + alignAdjustment[0] - mountPointAdjustment[0]\n            appliedPosition[1] = position.y + alignAdjustment[1] - mountPointAdjustment[1]\n            appliedPosition[2] = position.z + alignAdjustment[2] - mountPointAdjustment[2]\n\n            matrix.translateSelf(appliedPosition[0], appliedPosition[1], appliedPosition[2])\n\n            // origin calculation will go here:\n            // - move by negative origin before rotating.\n\n            // apply each axis rotation, in the x,y,z order.\n            const {rotation} = properties\n            matrix.rotateAxisAngleSelf(1,0,0, rotation.x)\n            matrix.rotateAxisAngleSelf(0,1,0, rotation.y)\n            matrix.rotateAxisAngleSelf(0,0,1, rotation.z)\n\n            // origin calculation will go here:\n            // - move by positive origin after rotating.\n\n            return matrix\n        }\n\n        // TODO: fix _isIdentity in DOMMatrix, it is returning true even if false.\n        _calculateWorldMatricesInSubtree() {\n            this._calculateWorldMatrixFromParent()\n\n            const children = this._children\n            for (let i=0, l=children.length; i<l; i+=1) {\n                children[i]._calculateWorldMatricesInSubtree()\n            }\n        }\n\n        _calculateWorldMatrixFromParent() {\n            const parent = this._parent\n\n            if (isInstanceof(parent, Transformable))\n                //this._worldMatrix = parent._worldMatrix.multiply(this._properties.transform)\n                this._worldMatrix = this._properties.transform.multiply(parent._worldMatrix)\n            else // otherwise parent is the Scene, which is Sizeable, not Transformable\n                this._worldMatrix = this._properties.transform\n        }\n\n        _render() {\n            super._render()\n\n            // TODO: only run this when necessary (f.e. not if only opacity\n            // changed)\n            this._properties.transform = this._calculateMatrix()\n        }\n    }\n\n    const {set: superPropertiesSet} = Object.getOwnPropertyDescriptor(ParentClass.prototype, 'properties')\n\n    // We set accessors manually because Buble doesn't make them configurable\n    // as per spec. Additionally we're maing these ones enumerable.\n    Object.defineProperties(Transformable.prototype, {\n\n        /**\n         * Set the position of the Transformable.\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis position to apply.\n         * @param {number} [newValue.y] The y-axis position to apply.\n         * @param {number} [newValue.z] The z-axis position to apply.\n         */\n        position: {\n            set(newValue) {\n                this._setPropertyXYZ(Transformable, 'position', newValue)\n            },\n            get() {\n                return this._properties.position\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis rotation to apply.\n         * @param {number} [newValue.y] The y-axis rotation to apply.\n         * @param {number} [newValue.z] The z-axis rotation to apply.\n         */\n        rotation: {\n            set(newValue) {\n                this._setPropertyXYZ(Transformable, 'rotation', newValue)\n            },\n            get() {\n                return this._properties.rotation\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis scale to apply.\n         * @param {number} [newValue.y] The y-axis scale to apply.\n         * @param {number} [newValue.z] The z-axis scale to apply.\n         */\n        scale: {\n            set(newValue) {\n                this._setPropertyXYZ(Transformable, 'scale', newValue)\n            },\n            get() {\n                return this._properties.scale\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * Set this Node's opacity.\n         *\n         * @param {number} opacity A floating point number between 0 and 1\n         * (inclusive). 0 is fully transparent, 1 is fully opaque.\n         */\n        opacity: {\n            set(newValue) {\n                if (!isRealNumber(newValue)) newValue = undefined\n                this._setPropertySingle(Transformable, 'opacity', newValue, 'number')\n            },\n            get() {\n                return this._properties.opacity\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * Set the alignment of the Node. This determines at which point in this\n         * Node's parent that this Node is mounted.\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis align to apply.\n         * @param {number} [newValue.y] The y-axis align to apply.\n         * @param {number} [newValue.z] The z-axis align to apply.\n         */\n        align: {\n            set(newValue) {\n                this._setPropertyXYZ(Transformable, 'align', newValue)\n            },\n            get() {\n                return this._properties.align\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * Set the mount point of the Node.\n         *\n         * @param {Object} newValue\n         * @param {number} [newValue.x] The x-axis mountPoint to apply.\n         * @param {number} [newValue.y] The y-axis mountPoint to apply.\n         * @param {number} [newValue.z] The z-axis mountPoint to apply.\n         */\n        mountPoint: {\n            set(newValue) {\n                this._setPropertyXYZ(Transformable, 'mountPoint', newValue)\n            },\n            get() {\n                return this._properties.mountPoint\n            },\n            configurable: true,\n            enumerable: true,\n        },\n\n        /**\n         * Set all properties of a Transformable in one method.\n         *\n         * @param {Object} properties Properties object - see example.\n         *\n         * @example\n         * node.properties = {\n         *   position: {x:200, y:300, z:100},\n         *   rotation: {z:35},\n         *   scale: {y:2},\n         *   opacity: .9,\n         * }\n         */\n        properties: {\n            set(properties = {}) {\n                superPropertiesSet.call(this, properties)\n\n                if (properties.position)\n                    this.position = properties.position\n\n                if (properties.rotation)\n                    this.rotation = properties.rotation\n\n                if (properties.scale)\n                    this.scale = properties.scale\n\n                if (properties.origin)\n                    this.origin = properties.origin\n\n                if (properties.align)\n                    this.align = properties.align\n\n                if (properties.mountPoint)\n                    this.mountPoint = properties.mountPoint\n\n                if (properties.opacity)\n                    this.opacity = properties.opacity\n            },\n            // no need for a properties getter.\n            configurable: true,\n        },\n    })\n\n    // for use by MotorHTML, convenient since HTMLElement attributes are all\n    // converted to lowercase by default, so if we don't do this then we won't be\n    // able to map attributes to Node setters as easily.\n    makeLowercaseSetterAliases(Transformable.prototype)\n\n    Object.defineProperty(Transformable, Symbol.hasInstance, {\n        value: function(obj) {\n            if (this !== Transformable) return Object.getPrototypeOf(Transformable)[Symbol.hasInstance].call(this, obj)\n\n            let currentProto = obj\n\n            while(currentProto) {\n                const desc = Object.getOwnPropertyDescriptor(currentProto, \"constructor\")\n\n                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol))\n                    return true\n\n                currentProto = Object.getPrototypeOf(currentProto)\n            }\n\n            return false\n        }\n    })\n\n    Transformable[instanceofSymbol] = true\n\n    return Transformable\n}\n\nfunction isRealNumber(num) {\n    if (\n        typeof num != 'number'\n        || Object.is(num, NaN)\n        || Object.is(num, Infinity)\n    ) return false\n    return true\n}\n\nconst Transformable = TransformableMixin(class{})\nTransformable.mixin = TransformableMixin\n\nexport {Transformable as default}\n"],"names":[],"mappings":"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"}