{"version":3,"file":"Motor.js","sources":["../../src/core/Motor.js"],"sourcesContent":["import documentReady from 'awaitbox/dom/documentReady'\nimport Transformable from './Transformable'\nimport getWebGlRenderer from './WebGLRenderer'\n\nimport {\n    //animationFrame,\n} from './Utility'\n\nlet documentIsReady = false\nlet webGLRenderer = null\n\nclass Motor {\n    constructor() {\n        this._inFrame = false // true when inside a requested animation frame.\n        this._rAF = null // the current animation frame, or null.\n        this._animationLoopStarted = false\n        this._allRenderTasks = []\n        this._taskIterationIndex = 0\n        this._numberOfTasks = 0\n        this._nodesToBeRendered = []\n        this._modifiedScenes = []\n\n        // A set of nodes that are the root nodes of subtrees where all nodes\n        // in each subtree need to have their world matrices updated.\n        this._worldMatrixRootNodes = []\n    }\n\n    /**\n     * Starts an rAF loop and runs the render tasks in the _renderTasks stack.\n     * As long as there are tasks in the stack, the loop continues. When the\n     * stack becomes empty due to removal of tasks, the rAF stops and the app\n     * sits there doing nothing -- silence, crickets.\n     */\n    _startAnimationLoop() {\n        if (this._animationLoopStarted) return Promise.resolve()\n\n        this._animationLoopStarted = true\n\n        const logic = () => {\n            // DIRECT ANIMATION LOOP ///////////////////////////////////\n            // So now we can render after the scene is mounted.\n            const motorLoop = timestamp => {\n                this._inFrame = true\n\n                this._runRenderTasks(timestamp)\n                this._renderNodes(timestamp)\n\n                // If any tasks are left to run, continue the animation loop.\n                if (this._allRenderTasks.length)\n                    this._rAF = requestAnimationFrame(motorLoop)\n                else {\n                    this._rAF = null\n                    this._animationLoopStarted = false\n                }\n\n                this._inFrame = false\n            }\n\n            this._rAF = requestAnimationFrame(motorLoop)\n        }\n\n        if (!documentIsReady) {\n            return documentReady().then(() => {\n                documentIsReady = true\n                logic()\n            })\n        }\n\n        logic()\n        return Promise.resolve()\n    }\n    //async _startAnimationLoop() {\n        //if (this._animationLoopStarted) return\n\n        //this._animationLoopStarted = true\n\n        //if (!documentIsReady) {\n            //await documentReady()\n            //documentIsReady = true\n        //}\n\n        //// DIRECT ANIMATION LOOP ///////////////////////////////////\n        //// So now we can render after the scene is mounted.\n        //const motorLoop = timestamp => {\n            //this._inFrame = true\n\n            //this._runRenderTasks(timestamp)\n            //this._renderNodes(timestamp)\n\n            //// If any tasks are left to run, continue the animation loop.\n            //if (this._allRenderTasks.length)\n                //this._rAF = requestAnimationFrame(motorLoop)\n            //else {\n                //this._rAF = null\n                //this._animationLoopStarted = false\n            //}\n\n            //this._inFrame = false\n        //}\n\n        //this._rAF = requestAnimationFrame(motorLoop)\n\n        //// ANIMATION LOOP USING WHILE AND AWAIT ///////////////////////////////////\n        ////this._rAF = true\n        ////let timestamp = null\n        ////while (this._rAF) {\n            ////timestamp = await animationFrame()\n            ////this._inFrame = true\n\n            ////this._runRenderTasks(timestamp)\n            ////this._renderNodes(timestamp)\n\n            ////// If any tasks are left to run, continue the animation loop.\n            ////if (!this._allRenderTasks.length) {\n                ////this._rAF = null\n                ////this._animationLoopStarted = false\n            ////}\n\n            ////this._inFrame = false\n        ////}\n    //}\n\n    /**\n     * When a render tasks is added a new rAF loop will be started if there\n     * isn't one currently.\n     *\n     * A render task is simply a function that will be called over and over\n     * again, in the Motor's animation loop. That's all, nothing special.\n     * However, if a Node setter is used inside of a render task, then the Node\n     * will tell Motor that it needs to be re-rendered, which will happen at\n     * the end of the current frame. If a Node setter is used outside of a\n     * render task (i.e. outside of the Motor's animation loop), then the Node\n     * tells Motor to re-render the Node on the next animation loop tick.\n     * Basically, regardless of where the Node's setters are used (inside or\n     * outside of the Motor's animation loop), rendering always happens inside\n     * the loop.\n     *\n     * @param {Function} fn The render task to add.\n     * @return {Function} A reference to the render task. Useful for saving to\n     * a variable so that it can later be passed to Motor.removeRenderTask().\n     */\n    addRenderTask(fn) {\n        if (typeof fn != 'function')\n            throw new Error('Render task must be a function.')\n\n        if (this._allRenderTasks.includes(fn)) return\n\n        this._allRenderTasks.push(fn)\n        this._numberOfTasks += 1\n\n        // If the render loop isn't started, start it.\n        if (!this._animationLoopStarted)\n            this._startAnimationLoop()\n\n        return fn\n    }\n\n    removeRenderTask(fn) {\n        const taskIndex = this._allRenderTasks.indexOf(fn)\n\n        if (taskIndex == -1) return\n\n        this._allRenderTasks.splice(taskIndex, 1)\n        this._numberOfTasks -= 1\n        this._taskIterationIndex -= 1\n    }\n\n    _runRenderTasks(timestamp) {\n        for (this._taskIterationIndex = 0; this._taskIterationIndex < this._numberOfTasks; this._taskIterationIndex += 1) {\n            const task = this._allRenderTasks[this._taskIterationIndex]\n\n            if (task(timestamp) === false)\n                this.removeRenderTask(task)\n        }\n    }\n\n    _setNodeToBeRendered(node) {\n        if (this._nodesToBeRendered.includes(node)) return\n        this._nodesToBeRendered.push(node)\n        if (!this._inFrame) this._startAnimationLoop()\n    }\n\n    _renderNodes(timestamp) {\n        if (!this._nodesToBeRendered.length) return\n\n        for (let i=0, l=this._nodesToBeRendered.length; i<l; i+=1) {\n            const node = this._nodesToBeRendered[i]\n\n            node._render(timestamp)\n\n            // If the node is root of a subtree containing updated nodes and\n            // has no ancestors that were modified, then add it to the\n            // _worldMatrixRootNodes set so we can update the world matrices of\n            // all the nodes in the root node's subtree.\n            if (\n                // a node could be a Scene, which is not Transformable\n                node instanceof Transformable &&\n\n                // and if ancestor is not instanceof Transformable, f.e.\n                // `false` if there is no ancestor to be rendered, or Sizeable\n                // if the Scene is returned.\n                !(node._getAncestorToBeRendered() instanceof Transformable) &&\n\n                // and the node isn't already added.\n                !this._worldMatrixRootNodes.includes(node)\n            ) {\n                this._worldMatrixRootNodes.push(node)\n            }\n\n            // keep track of which scenes are modified so we can render webgl\n            // only for those scenes.\n            // TODO FIXME: at this point, a node should always have a scene,\n            // otherwise it should not ever be rendered here, but turns out\n            // some nodes are getting into this queue without a scene. We\n            // shouldn't need the conditional check for node._scene, and it\n            // will save CPU by not allowing the code to get here in that case.\n            if (node._scene && !this._modifiedScenes.includes(node._scene))\n                this._modifiedScenes.push(node._scene)\n        }\n\n        // Update world matrices of the subtrees.\n        const worldMatrixRootNodes = this._worldMatrixRootNodes\n        for (let i=0, l=worldMatrixRootNodes.length; i<l; i+=1) {\n            const subtreeRoot = worldMatrixRootNodes[i]\n            subtreeRoot._calculateWorldMatricesInSubtree()\n        }\n        worldMatrixRootNodes.length = 0\n\n        // render webgl of modified scenes.\n        const modifiedScenes = this._modifiedScenes\n        // TODO PERFORMANCE: store a list of webgl-enabled modified scenes, and\n        // iterate only through those so we don't iterate over non-webgl\n        // scenes.\n        for (let i=0, l=modifiedScenes.length; i<l; i+=1) {\n            const sceneElement = modifiedScenes[i].element\n            // TODO we're temporarily storing stuff on the .element, but we\n            // don't want that, we will move it to WebGLRenderer.\n            if (\n                sceneElement.webglEnabled &&\n                ( webGLRenderer || (webGLRenderer = getWebGlRenderer()) ) // only ever call getWebGlRenderer once\n            )\n                webGLRenderer.drawScene(sceneElement)\n        }\n        modifiedScenes.length = 0\n\n        const nodesToBeRendered = this._nodesToBeRendered\n        for (let i=0, l=nodesToBeRendered.length; i<l; i+=1) {\n            nodesToBeRendered[i]._willBeRendered = false\n        }\n        nodesToBeRendered.length = 0\n    }\n}\n\n// export a singleton instance rather than the class directly.\nexport default new Motor\n"],"names":["this"],"mappings":"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"}