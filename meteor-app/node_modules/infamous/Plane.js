'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Plane = undefined;

var _Surface = require('famous/src/core/Surface');

var _Surface2 = _interopRequireDefault(_Surface);

var _Molecule = require('./Molecule');

var _Molecule2 = _interopRequireDefault(_Molecule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Planes have the properties of [Molecules](#Molecule), plus they contain a
 * [famous/src/core/Surface](#famous/src/core/Surface) so that they ultimately render
 * onto the screen. A Surface's events are automatically piped to it's
 * [famous/src/core/EventHandler](#famous/src/core/EventHandler), inherited from
 * `Molecule`.
 *
 * @class Plane
 * @extends Molecule
 */
/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

var Plane = exports.Plane = function (Molecule) {
  function Plane(initialOptions) {
    Molecule.call(this, initialOptions);

    this.surface = new _Surface2.default(this.options);
    this.add(this.surface);
    this.surface.pipe(this.options.handler);
  }

  if (Molecule) Plane.__proto__ = Molecule;
  Plane.prototype = Object.create(Molecule && Molecule.prototype);
  Plane.prototype.constructor = Plane;

  /**
   * Get the content of this Plane's [famous/src/core/Surface](#famous/src/core/Surface).
   * See [famous/src/core/Surface.getContent](#famous/src/core/Surface.getContent).
   */
  Plane.prototype.getContent = function getContent() {
    const args = Array.prototype.splice.call(arguments, 0);
    return this.surface.getContent.apply(this.surface, args);
  };

  /**
   * Set the content of this Plane's [famous/src/core/Surface](#famous/src/core/Surface).
   * See [famous/src/core/Surface.setContent](#famous/src/core/Surface.setContent).
   */
  Plane.prototype.setContent = function setContent() {
    const args = Array.prototype.splice.call(arguments, 0);
    return this.surface.setContent.apply(this.surface, args);
  };

  return Plane;
}(_Molecule2.default);
exports.default = Plane;
//# sourceMappingURL=Plane.js.map