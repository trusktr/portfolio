'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DoubleSidedPlane = undefined;

var _Transform = require('famous/src/core/Transform');

var _Transform2 = _interopRequireDefault(_Transform);

var _Molecule = require('./Molecule');

var _Molecule2 = _interopRequireDefault(_Molecule);

var _Plane = require('./Plane');

var _Plane2 = _interopRequireDefault(_Plane);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A scenegraph tree who's two leaf nodes are [Plane](#Plane) instances facing
 * opposite directions. For the purposes of these docs, in a brand new app with
 * only a single `DoubleSidedPlane` added to the context, and having no
 * rotation, "plane1" faces you and "plane2" faces away.
 *
 * @class DoubleSidedPlane
 * @extends Molecule
 */
var DoubleSidedPlane = exports.DoubleSidedPlane = function (Molecule) {
  function DoubleSidedPlane(initialOptions) {
    Molecule.call(this, initialOptions);

    this.children = [];
    this.plane1 = new _Plane2.default(this.options);
    this.plane1.transform.set(_Transform2.default.rotate(0, 0, 0));
    this.setOptions({ properties: { background: 'orange' } });
    this.plane2 = new _Plane2.default(this.options);
    this.plane2.transform.set(_Transform2.default.rotate(0, Math.PI, 0));

    this.children.push(this.plane1);
    this.children.push(this.plane2);
    this.add(this.plane2);
    this.add(this.plane1);
    this.plane1.pipe(this.options.handler);
    this.plane2.pipe(this.options.handler);
  }

  if (Molecule) DoubleSidedPlane.__proto__ = Molecule;
  DoubleSidedPlane.prototype = Object.create(Molecule && Molecule.prototype);
  DoubleSidedPlane.prototype.constructor = DoubleSidedPlane;

  /**
   * Get the content of the [famous/src/core/Surface](#famous/src/core/Surface) of each [Plane](#Plane).
   *
   * @returns {Array} An array containing two items, the content of each
   * `Plane`. The first item is from "plane1".
   */
  DoubleSidedPlane.prototype.getContent = function getContent() {
    return [this.plane1.getContent(), this.plane2.getContent()];
  };

  /**
   * Set the content of both [Plane](#Plane) instances.
   *
   * @param {Array} content An array of content, one item per `Plane`. The
   * first item is for "plane1".
   */
  DoubleSidedPlane.prototype.setContent = function setContent(content) {
    this.plane1.setContent(content[0]);
    this.plane2.setContent(content[1]);
  };

  return DoubleSidedPlane;
}(_Molecule2.default); /*
                        * LICENSE
                        *
                        * This Source Code Form is subject to the terms of the Mozilla Public
                        * License, v. 2.0. If a copy of the MPL was not distributed with this
                        * file, You can obtain one at http://mozilla.org/MPL/2.0/.
                        *
                        */

exports.default = DoubleSidedPlane;
//# sourceMappingURL=DoubleSidedPlane.js.map