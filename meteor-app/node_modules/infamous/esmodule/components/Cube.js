/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */
import forLength from 'army-knife/forLength';
import Node from '../core/Node'

/**
 * A scenegraph tree that lays things out in a cube form.
 *
 * XXX: Rename to CubeLayout?
 *
 * @class Cube
 * @extends Node
 */
export class Cube extends Node {

    /**
     * Create a new Cube.
     *
     * @constructor
     * @param {Number} size The integer width of the cube.
     */
    constructor(size, options) {

        // cubes, the same size on all sides
        super(Object.assign({}, {absoluteSize: [size, size, size]}, options));

        //GenericSync.register({
            //mouse: MouseSync,
            //touch: TouchSync
        //});

        this.size = size;
        this.sides = [];

        forLength(6, n => this._createCubeSide(n));
    }

    /**
     * Creates the 6 sides of the cube (the leafnodes of the scenegraph).
     *
     * @private
     * @param {Number} index The index (a integer between 0 and 5) that specifies which side to create.
     */
    _createCubeSide(index) {
        const rotator = new Node({
            align: [0.5, 0.5],
            mountPoint: [0.5, 0.5],
        })

        const side = new Node({
            align: [0.5, 0.5],
            mountPoint: [0.5, 0.5],
            absoluteSize: [this.size, this.size],
        })

        this.sides.push(side)

        rotator.addChild(side)

        // XXX: make a new GenericSync-like thing?
        //const sync = new GenericSync(['mouse','touch']);
        //side.pipe(sync);
        //sync.pipe(this.options.handler);

        // rotate and place each side.
        if (index < 4) // 4 sides
            { rotator.rotation.y = 90 * index }
        else // top/bottom
            { rotator.rotation.x = 90 * ( index % 2 ? -1 : 1 ) }

        side.position.z = this.size / 2

        this.addChild(rotator)
    }

    /**
     * Set the content for the sides of the cube.
     *
     * @param {Array} content An array containing [Node](#infamous/motor/Node)
     * instances to place in the cube sides. Only the first 6 items are used,
     * the rest are ignored.
     */
    setContent(content) {
        forLength(6, index => {
            //this.cubeSideNodes[index].set(null); // TODO: how do we erase previous content?
            this.sides[index].addChild(content[index])
        })
        return this;
    }
}
export default Cube;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3ViZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBvbmVudHMvQ3ViZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTElDRU5TRVxuICpcbiAqIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4gKlxuICovXG5pbXBvcnQgZm9yTGVuZ3RoIGZyb20gJ2FybXkta25pZmUvZm9yTGVuZ3RoJztcbmltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZSdcblxuLyoqXG4gKiBBIHNjZW5lZ3JhcGggdHJlZSB0aGF0IGxheXMgdGhpbmdzIG91dCBpbiBhIGN1YmUgZm9ybS5cbiAqXG4gKiBYWFg6IFJlbmFtZSB0byBDdWJlTGF5b3V0P1xuICpcbiAqIEBjbGFzcyBDdWJlXG4gKiBAZXh0ZW5kcyBOb2RlXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJlIGV4dGVuZHMgTm9kZSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQ3ViZS5cbiAgICAgKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzaXplIFRoZSBpbnRlZ2VyIHdpZHRoIG9mIHRoZSBjdWJlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNpemUsIG9wdGlvbnMpIHtcblxuICAgICAgICAvLyBjdWJlcywgdGhlIHNhbWUgc2l6ZSBvbiBhbGwgc2lkZXNcbiAgICAgICAgc3VwZXIoe2Fic29sdXRlU2l6ZTogW3NpemUsIHNpemUsIHNpemVdLCAuLi5vcHRpb25zfSk7XG5cbiAgICAgICAgLy9HZW5lcmljU3luYy5yZWdpc3Rlcih7XG4gICAgICAgICAgICAvL21vdXNlOiBNb3VzZVN5bmMsXG4gICAgICAgICAgICAvL3RvdWNoOiBUb3VjaFN5bmNcbiAgICAgICAgLy99KTtcblxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLnNpZGVzID0gW107XG5cbiAgICAgICAgZm9yTGVuZ3RoKDYsIG4gPT4gdGhpcy5fY3JlYXRlQ3ViZVNpZGUobikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIDYgc2lkZXMgb2YgdGhlIGN1YmUgKHRoZSBsZWFmbm9kZXMgb2YgdGhlIHNjZW5lZ3JhcGgpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIGluZGV4IChhIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1KSB0aGF0IHNwZWNpZmllcyB3aGljaCBzaWRlIHRvIGNyZWF0ZS5cbiAgICAgKi9cbiAgICBfY3JlYXRlQ3ViZVNpZGUoaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgcm90YXRvciA9IG5ldyBOb2RlKHtcbiAgICAgICAgICAgIGFsaWduOiBbMC41LCAwLjVdLFxuICAgICAgICAgICAgbW91bnRQb2ludDogWzAuNSwgMC41XSxcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBzaWRlID0gbmV3IE5vZGUoe1xuICAgICAgICAgICAgYWxpZ246IFswLjUsIDAuNV0sXG4gICAgICAgICAgICBtb3VudFBvaW50OiBbMC41LCAwLjVdLFxuICAgICAgICAgICAgYWJzb2x1dGVTaXplOiBbdGhpcy5zaXplLCB0aGlzLnNpemVdLFxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuc2lkZXMucHVzaChzaWRlKVxuXG4gICAgICAgIHJvdGF0b3IuYWRkQ2hpbGQoc2lkZSlcblxuICAgICAgICAvLyBYWFg6IG1ha2UgYSBuZXcgR2VuZXJpY1N5bmMtbGlrZSB0aGluZz9cbiAgICAgICAgLy9jb25zdCBzeW5jID0gbmV3IEdlbmVyaWNTeW5jKFsnbW91c2UnLCd0b3VjaCddKTtcbiAgICAgICAgLy9zaWRlLnBpcGUoc3luYyk7XG4gICAgICAgIC8vc3luYy5waXBlKHRoaXMub3B0aW9ucy5oYW5kbGVyKTtcblxuICAgICAgICAvLyByb3RhdGUgYW5kIHBsYWNlIGVhY2ggc2lkZS5cbiAgICAgICAgaWYgKGluZGV4IDwgNCkgLy8gNCBzaWRlc1xuICAgICAgICAgICAgcm90YXRvci5yb3RhdGlvbi55ID0gOTAgKiBpbmRleFxuICAgICAgICBlbHNlIC8vIHRvcC9ib3R0b21cbiAgICAgICAgICAgIHJvdGF0b3Iucm90YXRpb24ueCA9IDkwICogKCBpbmRleCAlIDIgPyAtMSA6IDEgKVxuXG4gICAgICAgIHNpZGUucG9zaXRpb24ueiA9IHRoaXMuc2l6ZSAvIDJcblxuICAgICAgICB0aGlzLmFkZENoaWxkKHJvdGF0b3IpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjb250ZW50IGZvciB0aGUgc2lkZXMgb2YgdGhlIGN1YmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb250ZW50IEFuIGFycmF5IGNvbnRhaW5pbmcgW05vZGVdKCNpbmZhbW91cy9tb3Rvci9Ob2RlKVxuICAgICAqIGluc3RhbmNlcyB0byBwbGFjZSBpbiB0aGUgY3ViZSBzaWRlcy4gT25seSB0aGUgZmlyc3QgNiBpdGVtcyBhcmUgdXNlZCxcbiAgICAgKiB0aGUgcmVzdCBhcmUgaWdub3JlZC5cbiAgICAgKi9cbiAgICBzZXRDb250ZW50KGNvbnRlbnQpIHtcbiAgICAgICAgZm9yTGVuZ3RoKDYsIGluZGV4ID0+IHtcbiAgICAgICAgICAgIC8vdGhpcy5jdWJlU2lkZU5vZGVzW2luZGV4XS5zZXQobnVsbCk7IC8vIFRPRE86IGhvdyBkbyB3ZSBlcmFzZSBwcmV2aW91cyBjb250ZW50P1xuICAgICAgICAgICAgdGhpcy5zaWRlc1tpbmRleF0uYWRkQ2hpbGQoY29udGVudFtpbmRleF0pXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEN1YmU7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBUUEsT0FBTyxTQUFTLE1BQU0sc0JBQXNCLENBQUM7QUFDN0MsT0FBTyxJQUFJLE1BQU0sY0FBYzs7Ozs7Ozs7OztBQVUvQixPQUFPLE1BQU0sSUFBSSxTQUFTLElBQUksQ0FBQzs7Ozs7Ozs7SUFRM0IsV0FBVyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7OztRQUd2QixLQUFLLENBQUMsa0JBQUMsQ0FBQSxZQUFZLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBLEVBQUUsQUFBRyxPQUFPLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O1FBT3RELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDOztRQUVoQixTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDOUM7Ozs7Ozs7O0lBUUQsZUFBZSxDQUFDLEtBQUssRUFBRTtRQUNuQixNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQztZQUNyQixLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO1lBQ2pCLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7U0FDekIsQ0FBQzs7UUFFRixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQztZQUNsQixLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO1lBQ2pCLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7WUFDdEIsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3ZDLENBQUM7O1FBRUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOztRQUVyQixPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7UUFRdEIsSUFBSSxLQUFLLEdBQUcsQ0FBQztZQUNULEVBQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssRUFBQTs7WUFFL0IsRUFBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFBOztRQUVwRCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7O1FBRS9CLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0tBQ3pCOzs7Ozs7Ozs7SUFTRCxVQUFVLENBQUMsT0FBTyxFQUFFO1FBQ2hCLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxJQUFJOztZQUVsQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0MsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7Q0FDSjtBQUNELGVBQWUsSUFBSSxDQUFDOyJ9