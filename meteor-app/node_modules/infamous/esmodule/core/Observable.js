
const instanceofSymbol = Symbol('instanceofSymbol')

const ObservableMixin = base => {
    class Observable extends base {

        constructor(options) {
            if ( options === void 0 ) options = {};

            super(options)
        }

        on(eventName, callback) {
            if (!this._eventMap)
                { this._eventMap = new Map }

            if (!this._eventMap.has(eventName))
                { this._eventMap.set(eventName, []) }

            if (typeof callback == 'function')
                { this._eventMap.get(eventName).push(callback) }
            else
                { throw new Error('Expected a function in callback argument of Observable#on.') }
        }

        off(eventName, callback) {
            if (!this._eventMap || !this._eventMap.has(eventName)) { return }

            const callbacks = this._eventMap.get(eventName)

            if (callbacks.indexOf(callback) === -1) { return }

            callbacks.splice(callbacks.indexOf(callback), 1)

            if (callbacks.length === 0) { this._eventMap.delete(eventName) }

            if (this._eventMap.size === 0) { this._eventMap = null }
        }

        triggerEvent(eventName, data) {
            if (!this._eventMap || !this._eventMap.has(eventName)) { return }

            const callbacks = this._eventMap.get(eventName)

            for (let i=0, len=callbacks.length; i<len; i+=1) {
                callbacks[i](data)
            }
        }
    }

    Object.defineProperty(Observable, Symbol.hasInstance, {
        value: function(obj) {
            if (this !== Observable) { return Object.getPrototypeOf(Observable)[Symbol.hasInstance].call(this, obj) }

            let currentProto = obj

            while(currentProto) {
                const desc = Object.getOwnPropertyDescriptor(currentProto, "constructor")

                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol))
                    { return true }

                currentProto = Object.getPrototypeOf(currentProto)
            }

            return false
        }
    })

    Observable[instanceofSymbol] = true

    return Observable
}

const Observable = ObservableMixin(class{})
Observable.mixin = ObservableMixin

export {Observable as default}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YWJsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvT2JzZXJ2YWJsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGluc3RhbmNlb2ZTeW1ib2wgPSBTeW1ib2woJ2luc3RhbmNlb2ZTeW1ib2wnKVxuXG5jb25zdCBPYnNlcnZhYmxlTWl4aW4gPSBiYXNlID0+IHtcbiAgICBjbGFzcyBPYnNlcnZhYmxlIGV4dGVuZHMgYmFzZSB7XG5cbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgICAgICBzdXBlcihvcHRpb25zKVxuICAgICAgICB9XG5cbiAgICAgICAgb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9ldmVudE1hcClcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudE1hcCA9IG5ldyBNYXBcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9ldmVudE1hcC5oYXMoZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudE1hcC5zZXQoZXZlbnROYW1lLCBbXSlcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFwLmdldChldmVudE5hbWUpLnB1c2goY2FsbGJhY2spXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIGZ1bmN0aW9uIGluIGNhbGxiYWNrIGFyZ3VtZW50IG9mIE9ic2VydmFibGUjb24uJylcbiAgICAgICAgfVxuXG4gICAgICAgIG9mZihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2V2ZW50TWFwIHx8ICF0aGlzLl9ldmVudE1hcC5oYXMoZXZlbnROYW1lKSkgcmV0dXJuXG5cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMuX2V2ZW50TWFwLmdldChldmVudE5hbWUpXG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xKSByZXR1cm5cblxuICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayksIDEpXG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFja3MubGVuZ3RoID09PSAwKSB0aGlzLl9ldmVudE1hcC5kZWxldGUoZXZlbnROYW1lKVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fZXZlbnRNYXAuc2l6ZSA9PT0gMCkgdGhpcy5fZXZlbnRNYXAgPSBudWxsXG4gICAgICAgIH1cblxuICAgICAgICB0cmlnZ2VyRXZlbnQoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2V2ZW50TWFwIHx8ICF0aGlzLl9ldmVudE1hcC5oYXMoZXZlbnROYW1lKSkgcmV0dXJuXG5cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMuX2V2ZW50TWFwLmdldChldmVudE5hbWUpXG5cbiAgICAgICAgICAgIGZvciAobGV0IGk9MCwgbGVuPWNhbGxiYWNrcy5sZW5ndGg7IGk8bGVuOyBpKz0xKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldKGRhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIGlmICh0aGlzICE9PSBPYnNlcnZhYmxlKSByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKE9ic2VydmFibGUpW1N5bWJvbC5oYXNJbnN0YW5jZV0uY2FsbCh0aGlzLCBvYmopXG5cbiAgICAgICAgICAgIGxldCBjdXJyZW50UHJvdG8gPSBvYmpcblxuICAgICAgICAgICAgd2hpbGUoY3VycmVudFByb3RvKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3VycmVudFByb3RvLCBcImNvbnN0cnVjdG9yXCIpXG5cbiAgICAgICAgICAgICAgICBpZiAoZGVzYyAmJiBkZXNjLnZhbHVlICYmIGRlc2MudmFsdWUuaGFzT3duUHJvcGVydHkoaW5zdGFuY2VvZlN5bWJvbCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG5cbiAgICAgICAgICAgICAgICBjdXJyZW50UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3VycmVudFByb3RvKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBPYnNlcnZhYmxlW2luc3RhbmNlb2ZTeW1ib2xdID0gdHJ1ZVxuXG4gICAgcmV0dXJuIE9ic2VydmFibGVcbn1cblxuY29uc3QgT2JzZXJ2YWJsZSA9IE9ic2VydmFibGVNaXhpbihjbGFzc3t9KVxuT2JzZXJ2YWJsZS5taXhpbiA9IE9ic2VydmFibGVNaXhpblxuXG5leHBvcnQge09ic2VydmFibGUgYXMgZGVmYXVsdH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDOztBQUVuRCxNQUFNLGVBQWUsR0FBRyxJQUFJLElBQUk7SUFDNUIsTUFBTSxVQUFVLFNBQVMsSUFBSSxDQUFDOztRQUUxQixXQUFXLENBQUMsT0FBWSxFQUFFLENBQVA7NkNBQUEsR0FBRyxFQUFFO0FBQUc7WUFDdkIsS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUNqQjs7UUFFRCxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRTtZQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7Z0JBQ2YsRUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFBOztZQUU1QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO2dCQUM5QixFQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBQTs7WUFFckMsSUFBSSxPQUFPLFFBQVEsSUFBSSxVQUFVO2dCQUM3QixFQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQTs7Z0JBRTVDLEVBQUEsTUFBTSxJQUFJLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxFQUFBO1NBQ3BGOztRQUVELEdBQUcsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBQSxNQUFNLEVBQUE7O1lBRTdELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzs7WUFFL0MsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUEsTUFBTSxFQUFBOztZQUU5QyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztZQUVoRCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUE7O1lBRTVELElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEVBQUE7U0FDdkQ7O1FBRUQsWUFBWSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUU7WUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFBLE1BQU0sRUFBQTs7WUFFN0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDOztZQUUvQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQzdDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDckI7U0FDSjtLQUNKOztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUU7UUFDbEQsS0FBSyxFQUFFLFNBQVMsR0FBRyxFQUFFO1lBQ2pCLElBQUksSUFBSSxLQUFLLFVBQVUsRUFBRSxFQUFBLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBQTs7WUFFckcsSUFBSSxZQUFZLEdBQUcsR0FBRzs7WUFFdEIsTUFBTSxZQUFZLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDOztnQkFFekUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDakUsRUFBQSxPQUFPLElBQUksRUFBQTs7Z0JBRWYsWUFBWSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO2FBQ3JEOztZQUVELE9BQU8sS0FBSztTQUNmO0tBQ0osQ0FBQzs7SUFFRixVQUFVLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJOztJQUVuQyxPQUFPLFVBQVU7Q0FDcEI7O0FBRUQsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzNDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsZUFBZTs7QUFFbEMsUUFBUSxVQUFVLElBQUksT0FBTyxDQUFDOyJ9