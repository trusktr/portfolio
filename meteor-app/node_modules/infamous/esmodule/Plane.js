/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

import Surface from 'famous/src/core/Surface';

import Molecule from './Molecule';

/**
 * Planes have the properties of [Molecules](#Molecule), plus they contain a
 * [famous/src/core/Surface](#famous/src/core/Surface) so that they ultimately render
 * onto the screen. A Surface's events are automatically piped to it's
 * [famous/src/core/EventHandler](#famous/src/core/EventHandler), inherited from
 * `Molecule`.
 *
 * @class Plane
 * @extends Molecule
 */
export var Plane = (function (Molecule) {
    function Plane(initialOptions) {
        Molecule.call(this, initialOptions);

        this.surface = new Surface(this.options);
        this.add(this.surface);
        this.surface.pipe(this.options.handler);
    }

    if ( Molecule ) Plane.__proto__ = Molecule;
    Plane.prototype = Object.create( Molecule && Molecule.prototype );
    Plane.prototype.constructor = Plane;

    /**
     * Get the content of this Plane's [famous/src/core/Surface](#famous/src/core/Surface).
     * See [famous/src/core/Surface.getContent](#famous/src/core/Surface.getContent).
     */
    Plane.prototype.getContent = function getContent () {
        const args = Array.prototype.splice.call(arguments, 0);
        return this.surface.getContent.apply(this.surface, args);
    };

    /**
     * Set the content of this Plane's [famous/src/core/Surface](#famous/src/core/Surface).
     * See [famous/src/core/Surface.setContent](#famous/src/core/Surface.setContent).
     */
    Plane.prototype.setContent = function setContent () {
        const args = Array.prototype.splice.call(arguments, 0);
        return this.surface.setContent.apply(this.surface, args);
    };

    return Plane;
}(Molecule));
export default Plane;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxhbmUuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9QbGFuZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTElDRU5TRVxuICpcbiAqIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4gKlxuICovXG5cbmltcG9ydCBTdXJmYWNlIGZyb20gJ2ZhbW91cy9zcmMvY29yZS9TdXJmYWNlJztcblxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4vTW9sZWN1bGUnO1xuXG4vKipcbiAqIFBsYW5lcyBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIFtNb2xlY3VsZXNdKCNNb2xlY3VsZSksIHBsdXMgdGhleSBjb250YWluIGFcbiAqIFtmYW1vdXMvc3JjL2NvcmUvU3VyZmFjZV0oI2ZhbW91cy9zcmMvY29yZS9TdXJmYWNlKSBzbyB0aGF0IHRoZXkgdWx0aW1hdGVseSByZW5kZXJcbiAqIG9udG8gdGhlIHNjcmVlbi4gQSBTdXJmYWNlJ3MgZXZlbnRzIGFyZSBhdXRvbWF0aWNhbGx5IHBpcGVkIHRvIGl0J3NcbiAqIFtmYW1vdXMvc3JjL2NvcmUvRXZlbnRIYW5kbGVyXSgjZmFtb3VzL3NyYy9jb3JlL0V2ZW50SGFuZGxlciksIGluaGVyaXRlZCBmcm9tXG4gKiBgTW9sZWN1bGVgLlxuICpcbiAqIEBjbGFzcyBQbGFuZVxuICogQGV4dGVuZHMgTW9sZWN1bGVcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYW5lIGV4dGVuZHMgTW9sZWN1bGUge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBgUGxhbmVgLiBQcm9wZXJ0aWVzIGZyb20gdGhlIGBpbml0aWFsT3B0aW9uc2AgcGFyYW1ldGVyXG4gICAgICogYXJlIGFwcGxpZWQgdG8gdGhpcyBQbGFuZSdzIFtmYW1vdXMvc3JjL2NvcmUvU3VyZmFjZV0oI2ZhbW91cy9zcmMvY29yZS9TdXJmYWNlKSBhcyB3ZWxsIGFzIHRvXG4gICAgICogdG8gdGhpcyBQbGFuZSdzIFtmYW1vdXMvc3JjL2NvcmUvTW9kaWZpZXJdKCNmYW1vdXMvc3JjL2NvcmUvTW9kaWZpZXIpLCBoZW5jZSB0aGUgQVBJIG9mIGEgUGxhbmVcbiAgICAgKiBpcyBjdXJyZW50bHkgdGhlIGNvbWJpbmF0aW9uIG9mIHRoZSBGYW1vLnVzIGBNb2RpZmllcmAgYW5kIGBTdXJmYWNlYCBBUElzLlxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGluaXRpYWxPcHRpb25zIE9wdGlvbnMgZm9yIHRoZSBuZXcgUGxhbmUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW5pdGlhbE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoaW5pdGlhbE9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuc3VyZmFjZSA9IG5ldyBTdXJmYWNlKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYWRkKHRoaXMuc3VyZmFjZSk7XG4gICAgICAgIHRoaXMuc3VyZmFjZS5waXBlKHRoaXMub3B0aW9ucy5oYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvbnRlbnQgb2YgdGhpcyBQbGFuZSdzIFtmYW1vdXMvc3JjL2NvcmUvU3VyZmFjZV0oI2ZhbW91cy9zcmMvY29yZS9TdXJmYWNlKS5cbiAgICAgKiBTZWUgW2ZhbW91cy9zcmMvY29yZS9TdXJmYWNlLmdldENvbnRlbnRdKCNmYW1vdXMvc3JjL2NvcmUvU3VyZmFjZS5nZXRDb250ZW50KS5cbiAgICAgKi9cbiAgICBnZXRDb250ZW50KCkge1xuICAgICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICAgIHJldHVybiB0aGlzLnN1cmZhY2UuZ2V0Q29udGVudC5hcHBseSh0aGlzLnN1cmZhY2UsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY29udGVudCBvZiB0aGlzIFBsYW5lJ3MgW2ZhbW91cy9zcmMvY29yZS9TdXJmYWNlXSgjZmFtb3VzL3NyYy9jb3JlL1N1cmZhY2UpLlxuICAgICAqIFNlZSBbZmFtb3VzL3NyYy9jb3JlL1N1cmZhY2Uuc2V0Q29udGVudF0oI2ZhbW91cy9zcmMvY29yZS9TdXJmYWNlLnNldENvbnRlbnQpLlxuICAgICAqL1xuICAgIHNldENvbnRlbnQoKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VyZmFjZS5zZXRDb250ZW50LmFwcGx5KHRoaXMuc3VyZmFjZSwgYXJncyk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgUGxhbmU7XG4iXSwibmFtZXMiOlsic3VwZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFTQSxPQUFPLE9BQU8sTUFBTSx5QkFBeUIsQ0FBQzs7QUFFOUMsT0FBTyxRQUFRLE1BQU0sWUFBWSxDQUFDOzs7Ozs7Ozs7Ozs7QUFZbEMsT0FBTyxJQUFNLEtBQUssR0FBaUI7SUFBQyxBQVdoQyxjQUFXLENBQUMsY0FBYyxFQUFFO1FBQ3hCQSxRQUFLLEtBQUEsQ0FBQyxNQUFBLGNBQWMsQ0FBQyxDQUFDOztRQUV0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNDOzs7O3dDQUFBOzs7Ozs7SUFNRCxnQkFBQSxVQUFVLHVCQUFBLEdBQUc7UUFDVCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUQsQ0FBQTs7Ozs7O0lBTUQsZ0JBQUEsVUFBVSx1QkFBQSxHQUFHO1FBQ1QsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzVELENBQUEsQUFDSjs7O0VBcEMwQixRQW9DMUIsR0FBQTtBQUNELGVBQWUsS0FBSyxDQUFDOyJ9