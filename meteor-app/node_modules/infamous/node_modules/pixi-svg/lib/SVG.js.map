{"version":3,"sources":["../src/SVG.js"],"names":["measureColor","document","createElement","SVG","svg","fill","svgChildren","children","inherit","i","length","child","nodeName","toLowerCase","svgPath","svgCircle","svgRect","svgPoly","console","info","hexToUint","hex","substr","replace","parseInt","style","color","rgb","window","getComputedStyle","body","appendChild","match","map","a","removeChild","node","heightProp","widthProp","isEllipse","width","parseFloat","getAttribute","height","cx","cy","x","y","drawCircle","drawEllipse","rx","drawRoundedRect","drawRect","svgStyle","result","opacity","stroke","strokeWidth","split","forEach","prop","name","value","trim","close","points","p","drawPolygon","closePath","defaultLineWidth","lineWidth","lineColor","beginFill","lineStyle","d","commands","command","code","moveTo","end","lineTo","currX","currY","bezierCurveTo","cp1","cp2","quadraticCurveTo","cp","PIXI","Graphics"],"mappings":"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","file":"SVG.js","sourcesContent":["import dPathParse from 'd-path-parser';\n\n// <div> element to measure string colors like \"black\"\n// and convert to hex colors\nconst measureColor = document.createElement('div');\n\n/**\n * Scalable Graphics drawn from SVG image document.\n * @class SVG\n * @extends PIXI.Graphics\n * @memberof PIXI\n * @param {SVGSVGElement} svg - SVG Element `<svg>`\n */\nexport default class SVG extends PIXI.Graphics {\n    /**\n     * Constructor\n     */\n    constructor (svg) {\n        super();\n        this.fill(svg);\n        this.svgChildren(svg.children);\n    }\n\n    /**\n     * Create a PIXI Graphic from SVG element\n     * @private\n     * @method PIXI.SVG#svgChildren\n     * @param {Array<*>} children - Collection of SVG nodes\n     * @param {Boolean} [inherit=false] Whether to inherit fill settings.\n     */\n    svgChildren (children, inherit = false) {\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            this.fill(child, inherit);\n            switch (child.nodeName.toLowerCase()) {\n                case 'path': {\n                    this.svgPath(child);\n                    break;\n                }\n                case 'circle':\n                case 'ellipse': {\n                    this.svgCircle(child);\n                    break;\n                }\n                case 'rect': {\n                    this.svgRect(child);\n                    break;\n                }\n                case 'polygon': {\n                    this.svgPoly(child, true);\n                    break;\n                }\n                case 'polyline': {\n                    this.svgPoly(child);\n                    break;\n                }\n                case 'g': {\n                    break;\n                }\n                default: {\n                    // @if DEBUG\n                    console.info('[SVGUtils] <%s> elements unsupported', child.nodeName);\n                    // @endif\n                    break;\n                }\n            }\n            this.svgChildren(child.children, true);\n        }\n    }\n\n    /**\n     * Convert the Hexidecimal string (e.g., \"#fff\") to uint\n     * @private\n     * @method PIXI.SVG#hexToUint\n     */\n    hexToUint (hex) {\n        if (hex[0] === '#') {\n                        // Remove the hash\n            hex = hex.substr(1);\n\n                        // Convert shortcolors fc9 to ffcc99\n            if (hex.length === 3) {\n                hex = hex.replace(/([a-f0-9])/ig, '$1$1');\n            }\n            return parseInt(hex, 16);\n        } else {\n            measureColor.style.color = hex;\n            const rgb = window.getComputedStyle(document.body.appendChild(measureColor)).color\n                .match(/\\d+/g)\n                .map(function (a) {\n                    return parseInt(a, 10);\n                });\n            document.body.removeChild(measureColor);\n            return (rgb[0] << 16) + (rgb[1] << 8) + rgb[2];\n        }\n    }\n\n    /**\n     * Render a <ellipse> element or <circle> element\n     * @private\n     * @method PIXI.SVG#internalEllipse\n     * @param {SVGCircleElement} node\n     */\n    svgCircle (node) {\n\n        let heightProp = 'r';\n        let widthProp = 'r';\n        const isEllipse = node.nodeName === 'elipse';\n        if (isEllipse) {\n            heightProp += 'x';\n            widthProp += 'y';\n        }\n        const width = parseFloat(node.getAttribute(widthProp));\n        const height = parseFloat(node.getAttribute(heightProp));\n        const cx = node.getAttribute('cx');\n        const cy = node.getAttribute('cy');\n        let x = 0;\n        let y = 0;\n        if (cx !== null) {\n            x = parseFloat(cx);\n        }\n        if (cy !== null) {\n            y = parseFloat(cy);\n        }\n        if (!isEllipse) {\n            this.drawCircle(x, y, width);\n        }\n        else {\n            this.drawEllipse(x, y, width, height);\n        }\n    }\n\n    /**\n     * Render a <rect> element\n     * @private\n     * @method PIXI.SVG#svgRect\n     * @param {SVGRectElement} node\n     */\n    svgRect (node) {\n        const x = parseFloat(node.getAttribute('x'));\n        const y = parseFloat(node.getAttribute('y'));\n        const width = parseFloat(node.getAttribute('width'));\n        const height = parseFloat(node.getAttribute('height'));\n        const rx = parseFloat(node.getAttribute('rx'));\n        if (rx) {\n            this.drawRoundedRect(\n                x,\n                y,\n                width,\n                height,\n                rx\n            );\n        } else {\n            this.drawRect(\n                x,\n                y,\n                width,\n                height\n            );\n        }\n    }\n\n    /**\n     * Get the style property and parse options.\n     * @private\n     * @method PIXI.SVG#svgStyle\n     * @param {SVGElement} node\n     * @return {Object} Style attributes\n     */\n    svgStyle (node) {\n        const style = node.getAttribute('style');\n        const result = {\n            fill: node.getAttribute('fill'),\n            opacity: node.getAttribute('opacity'),\n            stroke: node.getAttribute('stroke'),\n            strokeWidth: node.getAttribute('stroke-width')\n        };\n        if (style !== null) {\n            style.split(';').forEach(prop => {\n                const [name, value] = prop.split(':');\n                result[name.trim()] = value.trim();\n            });\n            if (result['stroke-width']) {\n                result.strokeWidth = result['stroke-width'];\n                delete result['stroke-width'];\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Render a polyline element.\n     * @private\n     * @method PIXI.SVG#svgPoly\n     * @param {SVGPolylineElement} node\n     */\n    svgPoly (node, close) {\n\n        const points = node.getAttribute('points')\n            .split(/[ ,]/g)\n            .map(p => parseInt(p));\n\n        this.drawPolygon(points);\n\n        if (close) {\n            this.closePath();\n        }\n    }\n\n    /**\n     * Set the fill and stroke style.\n     * @private\n     * @method PIXI.SVG#fill\n     * @param {SVGElement} node\n     * @param {Boolean} inherit\n     */\n    fill (node, inherit) {\n\n        const {fill, opacity, stroke, strokeWidth} = this.svgStyle(node);\n        const defaultLineWidth = stroke !== null ? 1 : 0;\n        const lineWidth = strokeWidth !== null ? parseFloat(strokeWidth) : defaultLineWidth;\n        const lineColor = stroke !== null ? this.hexToUint(stroke) : this.lineColor;\n        if (fill) {\n            if (fill === 'none') {\n                this.beginFill(0, 0);\n            } else {\n                this.beginFill(\n                    this.hexToUint(fill),\n                    opacity !== null ? parseFloat(opacity) : 1\n                );\n            }\n        } else if (!inherit) {\n            this.beginFill(0);\n        }\n        this.lineStyle(\n            lineWidth,\n            lineColor\n        );\n\n        // @if DEBUG\n        if (node.getAttribute('stroke-linejoin')) {\n            console.info('[SVGUtils] \"stroke-linejoin\" attribute is not supported');\n        }\n        if (node.getAttribute('stroke-linecap')) {\n            console.info('[SVGUtils] \"stroke-linecap\" attribute is not supported');\n        }\n        if (node.getAttribute('fill-rule')) {\n            console.info('[SVGUtils] \"fill-rule\" attribute is not supported');\n        }\n        // @endif\n    }\n\n    /**\n     * Render a <path> d element\n     * @method PIXI.SVG#svgPath\n     * @param {SVGPathElement} node\n     */\n    svgPath (node) {\n        const d = node.getAttribute('d');\n        let x, y;\n        const commands = dPathParse(d);\n        for (var i = 0; i < commands.length; i++) {\n            const command = commands[i];\n            switch (command.code) {\n                case 'm': {\n                    this.moveTo(\n                        x += command.end.x,\n                        y += command.end.y\n                    );\n                    break;\n                }\n                case 'M': {\n                    this.moveTo(\n                        x = command.end.x,\n                        y = command.end.y\n                    );\n                    break;\n                }\n                case 'H': {\n                    this.lineTo(x = command.value, y);\n                    break;\n                }\n                case 'h': {\n                    this.lineTo(x += command.value, y);\n                    break;\n                }\n                case 'V': {\n                    this.lineTo(x, y = command.value);\n                    break;\n                }\n                case 'v': {\n                    this.lineTo(x, y += command.value);\n                    break;\n                }\n                case 'Z': {\n                    this.closePath();\n                    break;\n                }\n                case 'L': {\n                    this.lineTo(\n                        x = command.end.x,\n                        y = command.end.y\n                    );\n                    break;\n                }\n                case 'l': {\n                    this.lineTo(\n                        x += command.end.x,\n                        y += command.end.y\n                    );\n                    break;\n                }\n                case 'C': {\n                    const currX = x;\n                    const currY = y;\n                    this.bezierCurveTo(\n                        currX + command.cp1.x,\n                        currY + command.cp1.y,\n                        currX + command.cp2.x,\n                        currY + command.cp2.y,\n                        x = command.end.x,\n                        y = command.end.y\n                    );\n                    break;\n                }\n                case 'c': {\n                    const currX = x;\n                    const currY = y;\n                    this.bezierCurveTo(\n                        currX + command.cp1.x,\n                        currY + command.cp1.y,\n                        currX + command.cp2.x,\n                        currY + command.cp2.y,\n                        x += command.end.x,\n                        y += command.end.y\n                    );\n                    break;\n                }\n                case 's':\n                case 'q': {\n                    const currX = x;\n                    const currY = y;\n                    this.quadraticCurveTo(\n                        currX + command.cp.x,\n                        currY + command.cp.y,\n                        x += command.end.x,\n                        y += command.end.y\n                    );\n                    break;\n                }\n                case 'S':\n                case 'Q': {\n                    const currX = x;\n                    const currY = y;\n                    this.quadraticCurveTo(\n                        currX + command.cp.x,\n                        currY + command.cp.y,\n                        x = command.end.x,\n                        y = command.end.y\n                    );\n                    break;\n                }\n                default: {\n                    // @if DEBUG\n                    console.info('[SVGUtils] Draw command not supported:', command.code, command);\n                    // @endif\n                    break;\n                }\n            }\n        }\n    }\n}\n"]}