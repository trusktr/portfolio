'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Cube = undefined;

var _forLength = require('army-knife/forLength');

var _forLength2 = _interopRequireDefault(_forLength);

var _Node = require('../core/Node');

var _Node2 = _interopRequireDefault(_Node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A scenegraph tree that lays things out in a cube form.
 *
 * XXX: Rename to CubeLayout?
 *
 * @class Cube
 * @extends Node
 */
/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */
var Cube = exports.Cube = function (Node) {
    function Cube(size, options) {
        var this$1 = this;

        // cubes, the same size on all sides
        Node.call(this, Object.assign({}, { absoluteSize: [size, size, size] }, options));

        //GenericSync.register({
        //mouse: MouseSync,
        //touch: TouchSync
        //});

        this.size = size;
        this.sides = [];

        (0, _forLength2.default)(6, function (n) {
            return this$1._createCubeSide(n);
        });
    }

    if (Node) Cube.__proto__ = Node;
    Cube.prototype = Object.create(Node && Node.prototype);
    Cube.prototype.constructor = Cube;

    /**
     * Creates the 6 sides of the cube (the leafnodes of the scenegraph).
     *
     * @private
     * @param {Number} index The index (a integer between 0 and 5) that specifies which side to create.
     */
    Cube.prototype._createCubeSide = function _createCubeSide(index) {
        const rotator = new Node({
            align: [0.5, 0.5],
            mountPoint: [0.5, 0.5]
        });

        const side = new Node({
            align: [0.5, 0.5],
            mountPoint: [0.5, 0.5],
            absoluteSize: [this.size, this.size]
        });

        this.sides.push(side);

        rotator.addChild(side);

        // XXX: make a new GenericSync-like thing?
        //const sync = new GenericSync(['mouse','touch']);
        //side.pipe(sync);
        //sync.pipe(this.options.handler);

        // rotate and place each side.
        if (index < 4) // 4 sides
            {
                rotator.rotation.y = 90 * index;
            } else // top/bottom
            {
                rotator.rotation.x = 90 * (index % 2 ? -1 : 1);
            }

        side.position.z = this.size / 2;

        this.addChild(rotator);
    };

    /**
     * Set the content for the sides of the cube.
     *
     * @param {Array} content An array containing [Node](#infamous/motor/Node)
     * instances to place in the cube sides. Only the first 6 items are used,
     * the rest are ignored.
     */
    Cube.prototype.setContent = function setContent(content) {
        var this$1 = this;

        (0, _forLength2.default)(6, function (index) {
            //this.cubeSideNodes[index].set(null); // TODO: how do we erase previous content?
            this$1.sides[index].addChild(content[index]);
        });
        return this;
    };

    return Cube;
}(_Node2.default);
exports.default = Cube;
//# sourceMappingURL=Cube.js.map