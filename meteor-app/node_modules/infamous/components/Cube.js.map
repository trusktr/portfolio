{"version":3,"file":"Cube.js","sources":["../../src/components/Cube.js"],"sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\nimport forLength from 'army-knife/forLength';\nimport Node from '../core/Node'\n\n/**\n * A scenegraph tree that lays things out in a cube form.\n *\n * XXX: Rename to CubeLayout?\n *\n * @class Cube\n * @extends Node\n */\nexport class Cube extends Node {\n\n    /**\n     * Create a new Cube.\n     *\n     * @constructor\n     * @param {Number} size The integer width of the cube.\n     */\n    constructor(size, options) {\n\n        // cubes, the same size on all sides\n        super({absoluteSize: [size, size, size], ...options});\n\n        //GenericSync.register({\n            //mouse: MouseSync,\n            //touch: TouchSync\n        //});\n\n        this.size = size;\n        this.sides = [];\n\n        forLength(6, n => this._createCubeSide(n));\n    }\n\n    /**\n     * Creates the 6 sides of the cube (the leafnodes of the scenegraph).\n     *\n     * @private\n     * @param {Number} index The index (a integer between 0 and 5) that specifies which side to create.\n     */\n    _createCubeSide(index) {\n        const rotator = new Node({\n            align: [0.5, 0.5],\n            mountPoint: [0.5, 0.5],\n        })\n\n        const side = new Node({\n            align: [0.5, 0.5],\n            mountPoint: [0.5, 0.5],\n            absoluteSize: [this.size, this.size],\n        })\n\n        this.sides.push(side)\n\n        rotator.addChild(side)\n\n        // XXX: make a new GenericSync-like thing?\n        //const sync = new GenericSync(['mouse','touch']);\n        //side.pipe(sync);\n        //sync.pipe(this.options.handler);\n\n        // rotate and place each side.\n        if (index < 4) // 4 sides\n            rotator.rotation.y = 90 * index\n        else // top/bottom\n            rotator.rotation.x = 90 * ( index % 2 ? -1 : 1 )\n\n        side.position.z = this.size / 2\n\n        this.addChild(rotator)\n    }\n\n    /**\n     * Set the content for the sides of the cube.\n     *\n     * @param {Array} content An array containing [Node](#infamous/motor/Node)\n     * instances to place in the cube sides. Only the first 6 items are used,\n     * the rest are ignored.\n     */\n    setContent(content) {\n        forLength(6, index => {\n            //this.cubeSideNodes[index].set(null); // TODO: how do we erase previous content?\n            this.sides[index].addChild(content[index])\n        })\n        return this;\n    }\n}\nexport default Cube;\n"],"names":["super","this"],"mappings":";;;;;;;AAQA,AAAO,AAAS,AAAM,AAAsB,AAAC;;;;AAC7C,AAAO,AAAI,AAAM,AAAc;;;;;;AAU/B;;;;;;;;AAnBA;;;;;;;;AAmBO,IAAM,AAAI,AAAa;AAAC,AAQ3B,aAAW,KAAC,AAAI,MAAE,AAAO,SAAE,AAAC;qBAAA;;;AAGxB,AAAK,aAAA,KAAC,MAAA,kBAAC,EAAA,AAAY,cAAE,CAAC,AAAI,MAAE,AAAI,MAAE,AAAI,AAAC,SAAE,AAAG,AAAO,AAAC,AAAC,AAAC;;;;;;;AAOtD,AAAI,aAAC,AAAI,OAAG,AAAI,AAAC;AACjB,AAAI,aAAC,AAAK,QAAG,AAAE,AAAC;;AAEhB,AAAS,iCAAC,AAAC,GAAE,UAAA,AAAC,GAAC,AAAG;mBAAA,AAAI,OAAC,AAAe,gBAAC,AAAC,AAAC;AAAA,AAAC,AAAC;AAC9C;;;;iCAAA;;;;;;;;AAQD,mBAAA,AAAe,2BAAA,gBAAC,AAAK,OAAE;AACnB,cAAM,AAAO,cAAO,AAAI;AACpB,AAAK,mBAAE,CAAC,AAAG,KAAE,AAAG,AAAC;AACjB,AAAU,wBAAE,CAAC,AAAG,KAAE,AAAG,AAAC,AACzB,AAAC;AAHuB,SAAT;;AAKhB,cAAM,AAAI,WAAO,AAAI;AACjB,AAAK,mBAAE,CAAC,AAAG,KAAE,AAAG,AAAC;AACjB,AAAU,wBAAE,CAAC,AAAG,KAAE,AAAG,AAAC;AACtB,AAAY,0BAAE,CAAC,AAAI,KAAC,AAAI,MAAE,AAAI,KAAC,AAAI,AAAC,AACvC,AAAC;AAJoB,SAAT;;AAMb,AAAI,aAAC,AAAK,MAAC,AAAI,KAAC,AAAI,AAAC;;AAErB,AAAO,gBAAC,AAAQ,SAAC,AAAI,AAAC;;;;;;;;AAQtB,YAAI,AAAK,QAAG,AAAC;AACT;AAAA,AAAO,wBAAC,AAAQ,SAAC,AAAC,IAAG,AAAE,KAAG,AAAK;AAAA;AAE/B;AAAA,AAAO,wBAAC,AAAQ,SAAC,AAAC,IAAG,AAAE,AAAG,MAAE,AAAK,QAAG,AAAC,IAAG,CAAC,AAAC,IAAG,AAAC,AAAE;AAAA;;AAEpD,AAAI,aAAC,AAAQ,SAAC,AAAC,IAAG,AAAI,KAAC,AAAI,OAAG,AAAC;;AAE/B,AAAI,aAAC,AAAQ,SAAC,AAAO,AAAC;AACzB;;;;;;;;;AASD,mBAAA,AAAU,sBAAA,WAAC,AAAO,SAAE,AAAC;qBAAA;;AACjB,AAAS,iCAAC,AAAC,GAAE,UAAA,AAAK,OAAC,AAAG;;AAElB,AAAI,mBAAC,AAAK,MAAC,AAAK,AAAC,OAAC,AAAQ,SAAC,AAAO,QAAC,AAAK,AAAC,AAAC;AAC7C,AAAC;AACF,eAAO,AAAI,AAAC;AACf,AACJ;;;AA5EyB,AA4EzB,AACD;kBAAe,AAAI,AAAC"}