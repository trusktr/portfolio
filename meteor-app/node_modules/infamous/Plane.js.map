{"version":3,"file":"Plane.js","sources":["../src/Plane.js"],"sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Surface from 'famous/src/core/Surface';\n\nimport Molecule from './Molecule';\n\n/**\n * Planes have the properties of [Molecules](#Molecule), plus they contain a\n * [famous/src/core/Surface](#famous/src/core/Surface) so that they ultimately render\n * onto the screen. A Surface's events are automatically piped to it's\n * [famous/src/core/EventHandler](#famous/src/core/EventHandler), inherited from\n * `Molecule`.\n *\n * @class Plane\n * @extends Molecule\n */\nexport class Plane extends Molecule {\n\n    /**\n     * Creates a new `Plane`. Properties from the `initialOptions` parameter\n     * are applied to this Plane's [famous/src/core/Surface](#famous/src/core/Surface) as well as to\n     * to this Plane's [famous/src/core/Modifier](#famous/src/core/Modifier), hence the API of a Plane\n     * is currently the combination of the Famo.us `Modifier` and `Surface` APIs.\n     *\n     * @constructor\n     * @param {Object} initialOptions Options for the new Plane.\n     */\n    constructor(initialOptions) {\n        super(initialOptions);\n\n        this.surface = new Surface(this.options);\n        this.add(this.surface);\n        this.surface.pipe(this.options.handler);\n    }\n\n    /**\n     * Get the content of this Plane's [famous/src/core/Surface](#famous/src/core/Surface).\n     * See [famous/src/core/Surface.getContent](#famous/src/core/Surface.getContent).\n     */\n    getContent() {\n        const args = Array.prototype.splice.call(arguments, 0);\n        return this.surface.getContent.apply(this.surface, args);\n    }\n\n    /**\n     * Set the content of this Plane's [famous/src/core/Surface](#famous/src/core/Surface).\n     * See [famous/src/core/Surface.setContent](#famous/src/core/Surface.setContent).\n     */\n    setContent() {\n        const args = Array.prototype.splice.call(arguments, 0);\n        return this.surface.setContent.apply(this.surface, args);\n    }\n}\nexport default Plane;\n"],"names":["super"],"mappings":";;;;;;;AASA,AAAO,AAAO,AAAM,AAAyB,AAAC;;;;AAE9C,AAAO,AAAQ,AAAM,AAAY,AAAC;;;;;;AAYlC;;;;;;;;;;AAvBA;;;;;;;;;AAuBO,IAAM,AAAK,AAAiB;AAAC,AAWhC,WAAW,MAAC,AAAc,gBAAE;AACxB,AAAK,aAAA,KAAC,MAAA,AAAc,AAAC,AAAC;;AAEtB,AAAI,SAAC,AAAO,UAAG,AAAI,AAAO,sBAAC,AAAI,KAAC,AAAO,AAAC,AAAC;AACzC,AAAI,SAAC,AAAG,IAAC,AAAI,KAAC,AAAO,AAAC,AAAC;AACvB,AAAI,SAAC,AAAO,QAAC,AAAI,KAAC,AAAI,KAAC,AAAO,QAAC,AAAO,AAAC,AAAC;AAC3C;;;;gCAAA;;;;;;AAMD,kBAAA,AAAU,sBAAA,aAAG;AACT,UAAM,AAAI,OAAG,AAAK,MAAC,AAAS,UAAC,AAAM,OAAC,AAAI,KAAC,AAAS,WAAE,AAAC,AAAC,AAAC;AACvD,WAAO,AAAI,KAAC,AAAO,QAAC,AAAU,WAAC,AAAK,MAAC,AAAI,KAAC,AAAO,SAAE,AAAI,AAAC,AAAC;AAC5D;;;;;;AAMD,kBAAA,AAAU,sBAAA,aAAG;AACT,UAAM,AAAI,OAAG,AAAK,MAAC,AAAS,UAAC,AAAM,OAAC,AAAI,KAAC,AAAS,WAAE,AAAC,AAAC,AAAC;AACvD,WAAO,AAAI,KAAC,AAAO,QAAC,AAAU,WAAC,AAAK,MAAC,AAAI,KAAC,AAAO,SAAE,AAAI,AAAC,AAAC;AAC5D,AACJ;;;AApC0B,AAoC1B,AACD;kBAAe,AAAK,AAAC"}