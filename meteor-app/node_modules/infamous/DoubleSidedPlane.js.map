{"version":3,"file":"DoubleSidedPlane.js","sources":["../src/DoubleSidedPlane.js"],"sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Transform from 'famous/src/core/Transform';\n\nimport Molecule from './Molecule';\nimport Plane from './Plane';\n\n/**\n * A scenegraph tree who's two leaf nodes are [Plane](#Plane) instances facing\n * opposite directions. For the purposes of these docs, in a brand new app with\n * only a single `DoubleSidedPlane` added to the context, and having no\n * rotation, \"plane1\" faces you and \"plane2\" faces away.\n *\n * @class DoubleSidedPlane\n * @extends Molecule\n */\nexport class DoubleSidedPlane extends Molecule {\n\n    /**\n     * Creates a new `DoubleSidedPlane` who's `initialOptions` get passed to\n     * both [Plane](#Plane) instances, as well as this DoubleSidedPlane's parent\n     * [Molecule](#Molecule) constructor.\n     *\n     * @constructor\n     * @param {Object} initialOptions The options to initiate the `DoubleSidedPlane` with.\n     */\n    constructor(initialOptions) {\n        super(initialOptions);\n\n        this.children = [];\n        this.plane1 = new Plane(this.options);\n        this.plane1.transform.set(Transform.rotate(0,0,0));\n        this.setOptions({properties: {background: 'orange'}});\n        this.plane2 = new Plane(this.options);\n        this.plane2.transform.set(Transform.rotate(0,Math.PI,0));\n\n        this.children.push(this.plane1);\n        this.children.push(this.plane2);\n        this.add(this.plane2)\n        this.add(this.plane1);\n        this.plane1.pipe(this.options.handler);\n        this.plane2.pipe(this.options.handler);\n\n    }\n\n    /**\n     * Get the content of the [famous/src/core/Surface](#famous/src/core/Surface) of each [Plane](#Plane).\n     *\n     * @returns {Array} An array containing two items, the content of each\n     * `Plane`. The first item is from \"plane1\".\n     */\n    getContent() {\n        return [this.plane1.getContent(), this.plane2.getContent()];\n    }\n\n    /**\n     * Set the content of both [Plane](#Plane) instances.\n     *\n     * @param {Array} content An array of content, one item per `Plane`. The\n     * first item is for \"plane1\".\n     */\n    setContent(content) {\n        this.plane1.setContent(content[0]);\n        this.plane2.setContent(content[1]);\n    }\n}\nexport default DoubleSidedPlane;\n"],"names":["super"],"mappings":";;;;;;;AASA,AAAO,AAAS,AAAM,AAA2B,AAAC;;;;AAElD,AAAO,AAAQ,AAAM,AAAY,AAAC;;;;AAClC,AAAO,AAAK,AAAM,AAAS,AAAC;;;;;;AAW5B;;;;;;;;;AAAO,IAAM,AAAgB,AAAiB;AAAC,AAU3C,WAAW,iBAAC,AAAc,gBAAE;AACxB,AAAK,aAAA,KAAC,MAAA,AAAc,AAAC,AAAC;;AAEtB,AAAI,SAAC,AAAQ,WAAG,AAAE,AAAC;AACnB,AAAI,SAAC,AAAM,SAAG,AAAI,AAAK,oBAAC,AAAI,KAAC,AAAO,AAAC,AAAC;AACtC,AAAI,SAAC,AAAM,OAAC,AAAS,UAAC,AAAG,IAAC,AAAS,oBAAC,AAAM,OAAC,AAAC,GAAC,AAAC,GAAC,AAAC,AAAC,AAAC,AAAC;AACnD,AAAI,SAAC,AAAU,WAAC,EAAC,AAAU,YAAE,EAAC,AAAU,YAAE,AAAQ,AAAC,AAAC,AAAC,AAAC;AACtD,AAAI,SAAC,AAAM,SAAG,AAAI,AAAK,oBAAC,AAAI,KAAC,AAAO,AAAC,AAAC;AACtC,AAAI,SAAC,AAAM,OAAC,AAAS,UAAC,AAAG,IAAC,AAAS,oBAAC,AAAM,OAAC,AAAC,GAAC,AAAI,KAAC,AAAE,IAAC,AAAC,AAAC,AAAC,AAAC;;AAEzD,AAAI,SAAC,AAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAM,AAAC,AAAC;AAChC,AAAI,SAAC,AAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAM,AAAC,AAAC;AAChC,AAAI,SAAC,AAAG,IAAC,AAAI,KAAC,AAAM,AAAC;AACrB,AAAI,SAAC,AAAG,IAAC,AAAI,KAAC,AAAM,AAAC,AAAC;AACtB,AAAI,SAAC,AAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAO,QAAC,AAAO,AAAC,AAAC;AACvC,AAAI,SAAC,AAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAO,QAAC,AAAO,AAAC,AAAC;AAE1C;;;;2CAAA;;;;;;;;AAQD,6BAAA,AAAU,sBAAA,aAAG;AACT,WAAO,CAAC,AAAI,KAAC,AAAM,OAAC,AAAU,AAAE,cAAE,AAAI,KAAC,AAAM,OAAC,AAAU,AAAE,AAAC,AAAC;AAC/D;;;;;;;;AAQD,6BAAA,AAAU,sBAAA,WAAC,AAAO,SAAE;AAChB,AAAI,SAAC,AAAM,OAAC,AAAU,WAAC,AAAO,QAAC,AAAC,AAAC,AAAC,AAAC;AACnC,AAAI,SAAC,AAAM,OAAC,AAAU,WAAC,AAAO,QAAC,AAAC,AAAC,AAAC,AAAC;AACtC,AACJ;;;AAjDqC,AAiDrC,AACD,uBAzEA;;;;;;;;;kBAyEe,AAAgB,AAAC"}