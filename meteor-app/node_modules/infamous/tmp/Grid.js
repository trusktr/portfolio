/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

import Modifier from 'famous/src/core/Modifier';
import Transform from 'famous/src/core/Transform';

import Molecule from './Molecule';

import forLength from 'army-knife/forLength';

/**
 * A scenegraph tree with a variable number of leaf node Modifiers (the grid
 * cells) that are arranged in a grid. Add any [famous/src/core/RenderNode](#famous/src/core/RenderNode)-compatible
 * item to each leafnode of the grid.
 *
 * TODO: Use Molecule instead of Modifier for the grid cells.
 * TODO: Add an options parameter, that the Molecule constructor will handle.
 *
 * @class Grid
 * @extends Molecule
 */
export var Grid = (function (Molecule) {
    function Grid(columns, rows, size) {
        Molecule.call(this, {size: size});

        this.columns = columns;
        this.rows = rows;
        this.cellNodes = [];

        if (typeof this.options.size === 'undefined') { this.setOptions({size: [undefined, undefined]}); }

        forLength(this.columns*this.rows, this._createGridCell.bind(this));
    }

    if ( Molecule ) Grid.__proto__ = Molecule;
    Grid.prototype = Object.create( Molecule && Molecule.prototype );
    Grid.prototype.constructor = Grid;

    /**
     * Creates a grid cell at the given index.
     *
     * @private
     * @param {Number} index The integer index of the grid cell.
     */
    Grid.prototype._createGridCell = function _createGridCell (index) {
        const column = index % this.columns;
        const row = Math.floor(index / this.columns);

        let cellSize = null;
        if (typeof this.options.size[0] != 'undefined' && typeof this.options.size[1] != 'undefined') {
            cellSize = [];
            cellSize[0] = this.options.size[0]/this.columns;
            cellSize[1] = this.options.size[1]/this.rows;
        }

        const mod = new Modifier({
            align: [0,0],
            origin: [0,0],
            size: cellSize? [cellSize[0], cellSize[1]]: [undefined, undefined],
            transform: Transform.translate(column*cellSize[0],row*cellSize[1],0)
        });
        const mod2 = new Modifier({
            //transform: Transform.rotateY(Math.PI/10),
            align: [0.5,0.5],
            origin: [0.5,0.5]
        });
        // FIXME: ^^^ Why do I need an extra Modifier to align stuff in the middle of the grid cells?????
        this.cellNodes.push(this.add(mod).add(mod2));
    };

    /**
     * Sets the items to be layed out in the grid.
     *
     * @param {Array} children An array of [famous/src/core/RenderNode](#famous/src/core/RenderNode)-compatible items.
     */
    Grid.prototype.setChildren = function setChildren (children) {
        forLength(this.columns*this.rows, function(index) {
            //this.cellNodes[index].set(null); // TODO: how do we erase previous children?
            this.cellNodes[index].add(children[index]);
        }.bind(this));
        return this;
    };

    return Grid;
}(Molecule));
export default Grid;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JpZC5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL0dyaWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExJQ0VOU0VcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuICpcbiAqL1xuXG5pbXBvcnQgTW9kaWZpZXIgZnJvbSAnZmFtb3VzL3NyYy9jb3JlL01vZGlmaWVyJztcbmltcG9ydCBUcmFuc2Zvcm0gZnJvbSAnZmFtb3VzL3NyYy9jb3JlL1RyYW5zZm9ybSc7XG5cbmltcG9ydCBNb2xlY3VsZSBmcm9tICcuL01vbGVjdWxlJztcblxuaW1wb3J0IGZvckxlbmd0aCBmcm9tICdhcm15LWtuaWZlL2Zvckxlbmd0aCc7XG5cbi8qKlxuICogQSBzY2VuZWdyYXBoIHRyZWUgd2l0aCBhIHZhcmlhYmxlIG51bWJlciBvZiBsZWFmIG5vZGUgTW9kaWZpZXJzICh0aGUgZ3JpZFxuICogY2VsbHMpIHRoYXQgYXJlIGFycmFuZ2VkIGluIGEgZ3JpZC4gQWRkIGFueSBbZmFtb3VzL3NyYy9jb3JlL1JlbmRlck5vZGVdKCNmYW1vdXMvc3JjL2NvcmUvUmVuZGVyTm9kZSktY29tcGF0aWJsZVxuICogaXRlbSB0byBlYWNoIGxlYWZub2RlIG9mIHRoZSBncmlkLlxuICpcbiAqIFRPRE86IFVzZSBNb2xlY3VsZSBpbnN0ZWFkIG9mIE1vZGlmaWVyIGZvciB0aGUgZ3JpZCBjZWxscy5cbiAqIFRPRE86IEFkZCBhbiBvcHRpb25zIHBhcmFtZXRlciwgdGhhdCB0aGUgTW9sZWN1bGUgY29uc3RydWN0b3Igd2lsbCBoYW5kbGUuXG4gKlxuICogQGNsYXNzIEdyaWRcbiAqIEBleHRlbmRzIE1vbGVjdWxlXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmlkIGV4dGVuZHMgTW9sZWN1bGUge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBHcmlkIGhhdmluZyB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBjb2x1bW5zLCBudW1iZXIgb2Ygcm93cyxcbiAgICAgKiBhbmQgZmFtby51cy1zdHlsZSBzaXplLlxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbHVtbnMgVGhlIGludGVnZXIgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJvd3MgVGhlIGludGVnZXIgbnVtYmVyIG9mIHJvd3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc2l6ZSBBIGZhbW8udXMtc3R5bGUgd2lkdGgvaGVpZ2h0IHNpemUgYXJyYXkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29sdW1ucywgcm93cywgc2l6ZSkge1xuICAgICAgICBzdXBlcih7c2l6ZTogc2l6ZX0pO1xuXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgICAgIHRoaXMucm93cyA9IHJvd3M7XG4gICAgICAgIHRoaXMuY2VsbE5vZGVzID0gW107XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuc2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHsgdGhpcy5zZXRPcHRpb25zKHtzaXplOiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdfSk7IH1cblxuICAgICAgICBmb3JMZW5ndGgodGhpcy5jb2x1bW5zKnRoaXMucm93cywgdGhpcy5fY3JlYXRlR3JpZENlbGwuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGdyaWQgY2VsbCBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBUaGUgaW50ZWdlciBpbmRleCBvZiB0aGUgZ3JpZCBjZWxsLlxuICAgICAqL1xuICAgIF9jcmVhdGVHcmlkQ2VsbChpbmRleCkge1xuICAgICAgICBjb25zdCBjb2x1bW4gPSBpbmRleCAlIHRoaXMuY29sdW1ucztcbiAgICAgICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuY29sdW1ucyk7XG5cbiAgICAgICAgbGV0IGNlbGxTaXplID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuc2l6ZVswXSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLnNpemVbMV0gIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNlbGxTaXplID0gW107XG4gICAgICAgICAgICBjZWxsU2l6ZVswXSA9IHRoaXMub3B0aW9ucy5zaXplWzBdL3RoaXMuY29sdW1ucztcbiAgICAgICAgICAgIGNlbGxTaXplWzFdID0gdGhpcy5vcHRpb25zLnNpemVbMV0vdGhpcy5yb3dzO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW9kID0gbmV3IE1vZGlmaWVyKHtcbiAgICAgICAgICAgIGFsaWduOiBbMCwwXSxcbiAgICAgICAgICAgIG9yaWdpbjogWzAsMF0sXG4gICAgICAgICAgICBzaXplOiBjZWxsU2l6ZT8gW2NlbGxTaXplWzBdLCBjZWxsU2l6ZVsxXV06IFt1bmRlZmluZWQsIHVuZGVmaW5lZF0sXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFRyYW5zZm9ybS50cmFuc2xhdGUoY29sdW1uKmNlbGxTaXplWzBdLHJvdypjZWxsU2l6ZVsxXSwwKVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbW9kMiA9IG5ldyBNb2RpZmllcih7XG4gICAgICAgICAgICAvL3RyYW5zZm9ybTogVHJhbnNmb3JtLnJvdGF0ZVkoTWF0aC5QSS8xMCksXG4gICAgICAgICAgICBhbGlnbjogWzAuNSwwLjVdLFxuICAgICAgICAgICAgb3JpZ2luOiBbMC41LDAuNV1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZJWE1FOiBeXl4gV2h5IGRvIEkgbmVlZCBhbiBleHRyYSBNb2RpZmllciB0byBhbGlnbiBzdHVmZiBpbiB0aGUgbWlkZGxlIG9mIHRoZSBncmlkIGNlbGxzPz8/Pz9cbiAgICAgICAgdGhpcy5jZWxsTm9kZXMucHVzaCh0aGlzLmFkZChtb2QpLmFkZChtb2QyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaXRlbXMgdG8gYmUgbGF5ZWQgb3V0IGluIHRoZSBncmlkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gY2hpbGRyZW4gQW4gYXJyYXkgb2YgW2ZhbW91cy9zcmMvY29yZS9SZW5kZXJOb2RlXSgjZmFtb3VzL3NyYy9jb3JlL1JlbmRlck5vZGUpLWNvbXBhdGlibGUgaXRlbXMuXG4gICAgICovXG4gICAgc2V0Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgICAgICAgZm9yTGVuZ3RoKHRoaXMuY29sdW1ucyp0aGlzLnJvd3MsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAvL3RoaXMuY2VsbE5vZGVzW2luZGV4XS5zZXQobnVsbCk7IC8vIFRPRE86IGhvdyBkbyB3ZSBlcmFzZSBwcmV2aW91cyBjaGlsZHJlbj9cbiAgICAgICAgICAgIHRoaXMuY2VsbE5vZGVzW2luZGV4XS5hZGQoY2hpbGRyZW5baW5kZXhdKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgR3JpZDtcbiJdLCJuYW1lcyI6WyJzdXBlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVNBLE9BQU8sUUFBUSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sU0FBUyxNQUFNLDJCQUEyQixDQUFDOztBQUVsRCxPQUFPLFFBQVEsTUFBTSxZQUFZLENBQUM7O0FBRWxDLE9BQU8sU0FBUyxNQUFNLHNCQUFzQixDQUFDOzs7Ozs7Ozs7Ozs7O0FBYTdDLE9BQU8sSUFB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