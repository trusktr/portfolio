import { makeLowercaseSetterAliases } from './Utility'
import TreeNode from './TreeNode'
import XYZValues from './XYZValues'
import Observable from './Observable'
import Motor from './Motor'

// fallback to experimental CSS transform if browser doesn't have it (fix for Safari 9)
if (typeof document.createElement('div').style.transform == 'undefined') {
    Object.defineProperty(CSSStyleDeclaration.prototype, 'transform', {
        set: function set(value) {
            this.webkitTransform = value
        },
        get: function get() {
            return this.webkitTransform
        },
        enumerable: true,
    })
}

const instanceofSymbol = Symbol('instanceofSymbol')

const SizeableMixin = function (base) {

    // Sizeable extends TreeNode because Sizeable knows about its _parent when
    // calculating proportionalSize. Also Transformable knows about it's parent
    // in order to calculate it's world matrix based on it's parent's.
    var Sizeable = (function (superclass) {
        function Sizeable(options) {
            if ( options === void 0 ) options = {};

            superclass.call(this, options)

            this._propertyFunctions = null
            this._calculatedSize = { x:0, y:0, z:0 }
            this._properties = {}
            this._setDefaultProperties()
            this._setPropertyObservers()
            this.properties = options
        }

        if ( superclass ) Sizeable.__proto__ = superclass;
        Sizeable.prototype = Object.create( superclass && superclass.prototype );
        Sizeable.prototype.constructor = Sizeable;

        Sizeable.prototype._setDefaultProperties = function _setDefaultProperties () {
            Object.assign(this._properties, {
                sizeMode:         new XYZValues('absolute', 'absolute', 'absolute'),
                absoluteSize:     new XYZValues(0, 0, 0),
                proportionalSize: new XYZValues(1, 1, 1),
            })
        };

        Sizeable.prototype._setPropertyObservers = function _setPropertyObservers () {
            var this$1 = this;

            this._properties.sizeMode.on('valuechanged',
                function () { return this$1.triggerEvent('propertychange', 'sizeMode'); })
            this._properties.absoluteSize.on('valuechanged',
                function () { return this$1.triggerEvent('propertychange', 'absoluteSize'); })
            this._properties.proportionalSize.on('valuechanged',
                function () { return this$1.triggerEvent('propertychange', 'proportionalSize'); })
        };

        Sizeable.prototype._calcSize = function _calcSize () {
            const calculatedSize = this._calculatedSize
            const previousSize = Object.assign({}, calculatedSize)
            const props = this._properties
            const parentSize = this._getParentSize()

            if (props.sizeMode._x == 'absolute') {
                calculatedSize.x = props.absoluteSize._x
            }
            else { // proportional
                calculatedSize.x = parentSize.x * props.proportionalSize._x
            }

            if (props.sizeMode._y == 'absolute') {
                calculatedSize.y = props.absoluteSize._y
            }
            else { // proportional
                calculatedSize.y = parentSize.y * props.proportionalSize._y
            }

            if (props.sizeMode._z == 'absolute') {
                calculatedSize.z = props.absoluteSize._z
            }
            else { // proportional
                calculatedSize.z = parentSize.z * props.proportionalSize._z
            }

            if (
                previousSize.x !== calculatedSize.x
                || previousSize.y !== calculatedSize.y
                || previousSize.z !== calculatedSize.z
            ) {
                this.triggerEvent('sizechange', Object.assign({}, calculatedSize))
            }
        };

        Sizeable.prototype._getParentSize = function _getParentSize () {
            return this._parent ? this._parent._calculatedSize : {x:0,y:0,z:0}
        };

        Sizeable.prototype._setPropertyXYZ = function _setPropertyXYZ (Class, name, newValue) {
            var this$1 = this;

            if (!(
                newValue instanceof Object ||
                newValue instanceof Array ||
                newValue instanceof Function
            )) {
                throw new TypeError(("Invalid value for " + (Class.name) + "#" + name + "."))
            }

            let change = false

            if (newValue instanceof Function) {
                // remove previous task if any.
                if (!this._propertyFunctions) { this._propertyFunctions = new Map }

                if (this._propertyFunctions.has(name))
                    { Motor.removeRenderTask(this._propertyFunctions.get(name)) }

                this._propertyFunctions.set(name,
                    Motor.addRenderTask(function (time) {
                        const result = newValue(
                            this$1._properties[name]._x,
                            this$1._properties[name]._y,
                            this$1._properties[name]._z,
                            time
                        )

                        if (result === false) {
                            this$1._propertyFunctions.delete(name)
                            return false
                        }

                        this$1[name] = result
                    })
                )
            }
            else if (newValue instanceof Array) {
                if (typeof newValue[0] != 'undefined') { this._properties[name]._x = newValue[0]; change = true }
                if (typeof newValue[1] != 'undefined') { this._properties[name]._y = newValue[1]; change = true }
                if (typeof newValue[2] != 'undefined') { this._properties[name]._z = newValue[2]; change = true }
            }
            else {
                if (typeof newValue.x != 'undefined') { this._properties[name]._x = newValue.x; change = true }
                if (typeof newValue.y != 'undefined') { this._properties[name]._y = newValue.y; change = true }
                if (typeof newValue.z != 'undefined') { this._properties[name]._z = newValue.z; change = true }
            }

            if (change) { this.triggerEvent('propertychange', name) }
        };

        Sizeable.prototype._setPropertySingle = function _setPropertySingle (Class, name, newValue, type) {
            var this$1 = this;

            if (!(typeof newValue == type || newValue instanceof Function))
                { throw new TypeError(("Invalid value for " + (Class.name) + "#" + name + ".")) }

            if (newValue instanceof Function) {
                // remove previous task if any.
                Motor.addRenderTask(function (time) {
                    const result = newValue(
                        this$1._properties[name],
                        time
                    )

                    if (result === false) { return false }

                    this$1[name] = result
                })
            }
            else {
                this._properties[name] = newValue
                this.triggerEvent('propertychange', name)
            }
        };

        Sizeable.prototype._render = function _render () {
            // nothing yet, but needed because ImperativeBase calls
            // `super._render()`, which will call either Transformable's
            // _render or Sizeable's _render for Node and Scene classes,
            // respectively.
        };

        return Sizeable;
    }(TreeNode.mixin(Observable.mixin(base))));

    // We set accessors manually because Buble doesn't make them configurable
    // as per spec. Additionally we're maing these ones enumerable.
    Object.defineProperties(Sizeable.prototype, {

        /**
         * Set the size mode for each axis. Possible size modes are "absolute" and "proportional".
         *
         * @param {Object} newValue
         * @param {number} [newValue.x] The x-axis sizeMode to apply.
         * @param {number} [newValue.y] The y-axis sizeMode to apply.
         * @param {number} [newValue.z] The z-axis sizeMode to apply.
         */
        sizeMode: {
            set: function set(newValue) {
                this._setPropertyXYZ(Sizeable, 'sizeMode', newValue)
            },
            get: function get() {
                return this._properties.sizeMode
            },
            configurable: true,
            enumerable: true,
        },

        /**
         * @param {Object} newValue
         * @param {number} [newValue.x] The x-axis absoluteSize to apply.
         * @param {number} [newValue.y] The y-axis absoluteSize to apply.
         * @param {number} [newValue.z] The z-axis absoluteSize to apply.
         */
        absoluteSize: {
            set: function set(newValue) {
                this._setPropertyXYZ(Sizeable, 'absoluteSize', newValue)
            },
            get: function get() {
                return this._properties.absoluteSize
            },
            configurable: true,
            enumerable: true,
        },

        /**
         * Get the actual size of the Node. This can be useful when size is
         * proportional, as the actual size of the Node depends on the size of
         * it's parent.
         *
         * @readonly
         *
         * @return {Array.number} An Oject with x, y, and z properties, each
         * property representing the computed size of the x, y, and z axes
         * respectively.
         */
        actualSize: {
            get: function get() {
                var ref = this._calculatedSize;
                var x = ref.x;
                var y = ref.y;
                var z = ref.z;
                return {x: x,y: y,z: z}
            },
            configurable: true,
            enumerable: true,
        },

        /**
         * Set the size of a Node proportional to the size of it's parent Node. The
         * values are a real number between 0 and 1 inclusive where 0 means 0% of
         * the parent size and 1 means 100% of the parent size.
         *
         * @param {Object} newValue
         * @param {number} [newValue.x] The x-axis proportionalSize to apply.
         * @param {number} [newValue.y] The y-axis proportionalSize to apply.
         * @param {number} [newValue.z] The z-axis proportionalSize to apply.
         */
        proportionalSize: {
            set: function set(newValue) {
                this._setPropertyXYZ(Sizeable, 'proportionalSize', newValue)
            },
            get: function get() {
                return this._properties.proportionalSize
            },
            configurable: true,
            enumerable: true,
        },

        /**
         * Set all properties of a Sizeable in one method.
         *
         * @param {Object} properties Properties object - see example
         *
         * @example
         * node.properties = {
         *   sizeMode: {x:'absolute', y:'proportional', z:'absolute'},
         *   absoluteSize: {x:300, y:100, z:200},
         *   proportionalSize: {x:1, z:0.5}
         * }
         */
        properties: {
            set: function set(properties) {
                if ( properties === void 0 ) properties = {};

                if (properties.sizeMode)
                    { this.sizeMode = properties.sizeMode }

                if (properties.absoluteSize)
                    { this.absoluteSize = properties.absoluteSize }

                if (properties.proportionalSize)
                    { this.proportionalSize = properties.proportionalSize }
            },
            // no need for a properties getter.
            configurable: true,
        },
    })

    // for use by MotorHTML, convenient since HTMLElement attributes are all
    // converted to lowercase by default, so if we don't do this then we won't be
    // able to map attributes to Node setters as easily.
    makeLowercaseSetterAliases(Sizeable.prototype)

    Object.defineProperty(Sizeable, Symbol.hasInstance, {
        value: function(obj) {
            if (this !== Sizeable) { return Object.getPrototypeOf(Sizeable)[Symbol.hasInstance].call(this, obj) }

            let currentProto = obj

            while (currentProto) {
                const desc = Object.getOwnPropertyDescriptor(currentProto, "constructor")

                if (desc && desc.value && desc.value.hasOwnProperty(instanceofSymbol))
                    { return true }

                currentProto = Object.getPrototypeOf(currentProto)
            }

            return false
        }
    })

    Sizeable[instanceofSymbol] = true

    return Sizeable
}

const Sizeable = SizeableMixin((function () {
    function anonymous () {}

    return anonymous;
}()))
Sizeable.mixin = SizeableMixin

export {Sizeable as default}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,