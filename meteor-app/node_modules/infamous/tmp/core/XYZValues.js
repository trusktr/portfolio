import Observable from './Observable'

/**
 * Represents a set of values for the X, Y, and Z axes. For example, the
 * position of an object can be described using a set of 3 numbers, one for each
 * axis in 3D space: {x:10, y:10, z:10}.
 *
 * The value don't have to be numerical. For example,
 * {x:'foo', y:'bar', z:'baz'}
 */
var XYZValues = (function (Observable) {
    function XYZValues(x, y, z) {
        if ( x === void 0 ) x = 0;
        if ( y === void 0 ) y = 0;
        if ( z === void 0 ) z = 0;

        Observable.call(this)
        this._x = x
        this._y = y
        this._z = z
    }

    if ( Observable ) XYZValues.__proto__ = Observable;
    XYZValues.prototype = Object.create( Observable && Observable.prototype );
    XYZValues.prototype.constructor = XYZValues;

    return XYZValues;
}(Observable));

// We set accessors manually because Buble doesn't make them configurable
// as per spec. Additionally we're maing these ones enumerable.
Object.defineProperties(XYZValues.prototype, {
    x: {
        set: function set(value) {
            this._x = value
            this.triggerEvent('valuechanged', {x: value})
        },
        get: function get() { return this._x },
        configurable: true,
        enumerable: true,
    },

    y: {
        set: function set(value) {
            this._y = value
            this.triggerEvent('valuechanged', {y: value})
        },
        get: function get() { return this._y },
        configurable: true,
        enumerable: true,
    },

    z: {
        set: function set(value) {
            this._z = value
            this.triggerEvent('valuechanged', {z: value})
        },
        get: function get() { return this._z },
        configurable: true,
        enumerable: true,
    },
})

export {XYZValues as default}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWFlaVmFsdWVzLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29yZS9YWVpWYWx1ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9ic2VydmFibGUgZnJvbSAnLi9PYnNlcnZhYmxlJ1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzZXQgb2YgdmFsdWVzIGZvciB0aGUgWCwgWSwgYW5kIFogYXhlcy4gRm9yIGV4YW1wbGUsIHRoZVxuICogcG9zaXRpb24gb2YgYW4gb2JqZWN0IGNhbiBiZSBkZXNjcmliZWQgdXNpbmcgYSBzZXQgb2YgMyBudW1iZXJzLCBvbmUgZm9yIGVhY2hcbiAqIGF4aXMgaW4gM0Qgc3BhY2U6IHt4OjEwLCB5OjEwLCB6OjEwfS5cbiAqXG4gKiBUaGUgdmFsdWUgZG9uJ3QgaGF2ZSB0byBiZSBudW1lcmljYWwuIEZvciBleGFtcGxlLFxuICoge3g6J2ZvbycsIHk6J2JhcicsIHo6J2Jheid9XG4gKi9cbmNsYXNzIFhZWlZhbHVlcyBleHRlbmRzIE9ic2VydmFibGUge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgeiA9IDApIHtcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICB0aGlzLl94ID0geFxuICAgICAgICB0aGlzLl95ID0geVxuICAgICAgICB0aGlzLl96ID0gelxuICAgIH1cbn1cblxuLy8gV2Ugc2V0IGFjY2Vzc29ycyBtYW51YWxseSBiZWNhdXNlIEJ1YmxlIGRvZXNuJ3QgbWFrZSB0aGVtIGNvbmZpZ3VyYWJsZVxuLy8gYXMgcGVyIHNwZWMuIEFkZGl0aW9uYWxseSB3ZSdyZSBtYWluZyB0aGVzZSBvbmVzIGVudW1lcmFibGUuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhYWVpWYWx1ZXMucHJvdG90eXBlLCB7XG4gICAgeDoge1xuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ggPSB2YWx1ZVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoJ3ZhbHVlY2hhbmdlZCcsIHt4OiB2YWx1ZX0pXG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHsgcmV0dXJuIHRoaXMuX3ggfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIH0sXG5cbiAgICB5OiB7XG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5feSA9IHZhbHVlXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudCgndmFsdWVjaGFuZ2VkJywge3k6IHZhbHVlfSlcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KCkgeyByZXR1cm4gdGhpcy5feSB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgfSxcblxuICAgIHo6IHtcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl96ID0gdmFsdWVcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCd2YWx1ZWNoYW5nZWQnLCB7ejogdmFsdWV9KVxuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7IHJldHVybiB0aGlzLl96IH0sXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB9LFxufSlcblxuZXhwb3J0IHtYWVpWYWx1ZXMgYXMgZGVmYXVsdH1cbiJdLCJuYW1lcyI6WyJzdXBlciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxVQUFVLE1BQU0sY0FBYzs7Ozs7Ozs7OztBQVVyQyxJQUFNLFNBQVMsR0FBbUI7SUFBQyxBQUMvQixrQkFBVyxDQUFDLENBQUssRUFBRSxDQUFLLEVBQUUsQ0FBSyxFQUFFLENBQXBCOzZCQUFBLEdBQUcsQ0FBQyxDQUFHOzZCQUFBLEdBQUcsQ0FBQyxDQUFHOzZCQUFBLEdBQUcsQ0FBQztBQUFHO1FBQzlCQSxVQUFLLEtBQUEsQ0FBQyxJQUFBLENBQUM7UUFDUCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7S0FDZDs7OztnREFBQSxBQUNKOzs7RUFQdUIsVUFPdkIsR0FBQTs7OztBQUlELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFO0lBQ3pDLENBQUMsRUFBRTtRQUNDLEdBQUcsY0FBQSxDQUFDLEtBQUssRUFBRTtZQUNQLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSztZQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsR0FBRyxjQUFBLEdBQUcsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDeEIsWUFBWSxFQUFFLElBQUk7UUFDbEIsVUFBVSxFQUFFLElBQUk7S0FDbkI7O0lBRUQsQ0FBQyxFQUFFO1FBQ0MsR0FBRyxjQUFBLENBQUMsS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLO1lBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDaEQ7UUFDRCxHQUFHLGNBQUEsR0FBRyxFQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUN4QixZQUFZLEVBQUUsSUFBSTtRQUNsQixVQUFVLEVBQUUsSUFBSTtLQUNuQjs7SUFFRCxDQUFDLEVBQUU7UUFDQyxHQUFHLGNBQUEsQ0FBQyxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUs7WUFDZixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNoRDtRQUNELEdBQUcsY0FBQSxHQUFHLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ3hCLFlBQVksRUFBRSxJQUFJO1FBQ2xCLFVBQVUsRUFBRSxJQUFJO0tBQ25CO0NBQ0osQ0FBQzs7QUFFRixRQUFRLFNBQVMsSUFBSSxPQUFPLENBQUM7In0=